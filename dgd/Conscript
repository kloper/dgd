# -*- mode:cperl -*-
#
# $Id$
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
#
# This file is part of Depression Glass library.
#
# Copyright (c) 2003. Dimitry Kloper <kloper@users.sf.net>
#
# Conscript -- build file for dgd library
#

use Cons::Template;

Import qw(BLIB toolset version);
    
my $ruleset  = $toolset->env();

die if( !defined( $ruleset ) );

our $BUILD      = $toolset->option( 'build' );
our $INCLUDE    = [ "..", "%BOOST_INCLUDE", "$BLIB/include" ];

Link $BUILD => 'src';

our $buildenv   = new cons( %{$ruleset},
			   'CPPPATH' => $INCLUDE );

my $TARGET = "$BUILD/%{PREFLIB}dgd%{SUFLIB}";

KeepPrecious $buildenv $TARGET;
AfterBuild $buildenv $TARGET, q( 
  if( $status eq 'built' ) {
     $version->save();
     print "AfterBuild: version incremented to " . $version->string() . "...\n"
  }
);

Library $buildenv $TARGET, 
  map( "$BUILD/$_", 
       qw( dgChannel.cpp
	   dgChannelBuf.cpp
	   dgDebug.cpp
	   dgDebugOpt.cpp
	   dgFunnel.cpp
	   dgMultifileLog.cpp
	   dgOptionFilter.cpp ) );

Install $buildenv "$BLIB/include", 
  map( "$BUILD/$_", qw(dgChannel.h
		       dgChannelBuf.h
		       dgChannelManip.h
		       dgConfig.h
		       dgDebug.h
		       dgDebugExtra.h
		       dgDebugOpt.h
		       dgDebugStd.h
		       dgFunnel.h
		       dgMultifileLog.h
		       dgOptionFilter.h
		       dgStream.h ) );

Install $buildenv "$BLIB/lib", $TARGET;

map {
    my $src = "$BUILD/$_";
    my $tgt = $src;
    $tgt =~ s/.in$//i;
    our $params = { 'version' => \$version, 
		    'toolset' => \$toolset };
    Command $buildenv $tgt, $src, 
      q([perl] Cons::Template->apply( '%>', '%<', $params ); );
} qw( dgConfig.h.in );

if( defined($ruleset->{'CLOXXCOM'}) ) {
    Command $buildenv [ "$BUILD/dgDebugOpt.h", 
			"$BUILD/dgDebugOpt.cpp" ], 
			  "$BUILD/dgDebugOpt.xml",
			    qq(#%CLOXXCOM# -Dcxx_header_file=%<:b.h ) .
			      qq(-Dcxx_namespace=DGD ) . 
				qq(-Dcxx_source_file=%<:b.cpp -o c++ %<);
}

