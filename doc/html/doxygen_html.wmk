<{!-- This WebMake file is automatically generated by:
   -- ../../util/bin/html2wmk doxygen/html --}>

<media src="doxygen/html" name="*.jpg" namesubst="s/\.jpg//" />
<media src="doxygen/html" name="*.jpeg" namesubst="s/\.jpeg//" />
<media src="doxygen/html" name="*.gif" namesubst="s/\.gif//" />
<media src="doxygen/html" name="*.png" namesubst="s/\.png//" />
<content name="doxygen_html_annotated" format="text/html">
<wmmeta name="title" value="Annotated Index" />
<h1>Depression Glass Debug Library Compound List</h1>
Here are the classes, structs, unions and interfaces with brief descriptions:<table><tr><td class="doxy_indexkey"><a class="doxy_el" href="$(doxygen_html_classDGD_1_1bad__params)">DGD::bad_params</a></td><td class="doxy_indexvalue">Bad command line option exception</td></tr><tr><td class="doxy_indexkey"><a class="doxy_el" href="$(doxygen_html_classDGD_1_1channel)">DGD::channel</a></td><td class="doxy_indexvalue">Simple debug channel</td></tr><tr><td class="doxy_indexkey"><a class="doxy_el" href="$(doxygen_html_classDGD_1_1channel__manip)">DGD::channel_manip&lt; Arg_type &gt;</a></td><td class="doxy_indexvalue">Channel manipulator with a single argument</td></tr><tr><td class="doxy_indexkey"><a class="doxy_el" href="$(doxygen_html_classDGD_1_1channel__manip__nop)">DGD::channel_manip_nop</a></td><td class="doxy_indexvalue">Channel manipulator without arguments</td></tr><tr><td class="doxy_indexkey"><a class="doxy_el" href="$(doxygen_html_classDGD_1_1channel__manip__void)">DGD::channel_manip_void</a></td><td class="doxy_indexvalue">Channel manipulator without arguments</td></tr><tr><td class="doxy_indexkey"><a class="doxy_el" href="$(doxygen_html_classDGD_1_1channelbuf)">DGD::channelbuf</a></td><td class="doxy_indexvalue">Simple formatting std::streambuf</td></tr><tr><td class="doxy_indexkey"><a class="doxy_el" href="$(doxygen_html_classDGD_1_1Debug)">DGD::Debug</a></td><td class="doxy_indexvalue"><a class="doxy_el" href="$(doxygen_html_namespaceDGD)">DGD</a> channel factory</td></tr><tr><td class="doxy_indexkey"><a class="doxy_el" href="$(doxygen_html_classDGD_1_1debug__disabled)">DGD::debug_disabled</a></td><td class="doxy_indexvalue">Disabled <a class="doxy_el" href="$(doxygen_html_classDGD_1_1Debug)">Debug</a> exception</td></tr><tr><td class="doxy_indexkey"><a class="doxy_el" href="$(doxygen_html_structDGD_1_1dgd__reference)">DGD::dgd_reference&lt; T &gt;</a></td><td class="doxy_indexvalue">Memory location/block</td></tr><tr><td class="doxy_indexkey"><a class="doxy_el" href="$(doxygen_html_classDGD_1_1exit__required)">DGD::exit_required</a></td><td class="doxy_indexvalue">Exit application exception</td></tr><tr><td class="doxy_indexkey"><a class="doxy_el" href="$(doxygen_html_classDGD_1_1funnel)">DGD::funnel</a></td><td class="doxy_indexvalue"></td></tr><tr><td class="doxy_indexkey"><a class="doxy_el" href="$(doxygen_html_classDGD_1_1funnelbuf)">DGD::funnelbuf</a></td><td class="doxy_indexvalue"></td></tr><tr><td class="doxy_indexkey"><a class="doxy_el" href="$(doxygen_html_classDGD_1_1funnelbuf_1_1Callback)">DGD::funnelbuf::Callback</a></td><td class="doxy_indexvalue"></td></tr><tr><td class="doxy_indexkey"><a class="doxy_el" href="$(doxygen_html_classDGD_1_1multifile__log)">DGD::multifile_log</a></td><td class="doxy_indexvalue"></td></tr><tr><td class="doxy_indexkey"><a class="doxy_el" href="$(doxygen_html_classDGD_1_1multifile__log_1_1Dont__split)">DGD::multifile_log::Dont_split</a></td><td class="doxy_indexvalue"></td></tr><tr><td class="doxy_indexkey"><a class="doxy_el" href="$(doxygen_html_classDGD_1_1multifile__log_1_1Split__by__lines)">DGD::multifile_log::Split_by_lines</a></td><td class="doxy_indexvalue"></td></tr><tr><td class="doxy_indexkey"><a class="doxy_el" href="$(doxygen_html_classDGD_1_1multifile__log_1_1Split__by__size)">DGD::multifile_log::Split_by_size</a></td><td class="doxy_indexvalue"></td></tr><tr><td class="doxy_indexkey"><a class="doxy_el" href="$(doxygen_html_classDGD_1_1multifile__log_1_1Split__criteria)">DGD::multifile_log::Split_criteria</a></td><td class="doxy_indexvalue"></td></tr><tr><td class="doxy_indexkey"><a class="doxy_el" href="$(doxygen_html_classDGD_1_1option__filter)">DGD::option_filter</a></td><td class="doxy_indexvalue">Command line options set filter</td></tr><tr><td class="doxy_indexkey"><a class="doxy_el" href="$(doxygen_html_classDGD_1_1option__filter_1_1option__set__type)">DGD::option_filter::option_set_type</a></td><td class="doxy_indexvalue"></td></tr></table>
<hr>
<address style="align: right;"><small>Generated on Mon Dec 9 18:30:02 2002 for Depression Glass Debug Library by <a href="http://www.doxygen.org/index.html"> <img align="middle" alt="doxygen" border=0 height=53 src="$(doxygen)" width=110></a>1.2.17 </small></address>
</content>

<content name="doxygen_html_classDGD_1_1bad__params-members" format="text/html">
<wmmeta name="title" value="Member List" />
<h1>DGD::bad_params Member List</h1>
This is the complete list of members for <a class="doxy_el" href="$(doxygen_html_classDGD_1_1bad__params)">DGD::bad_params</a>
, including all inherited members.<table><tr bgcolor="#f0f0f0"><td><a class="doxy_el" href="$(doxygen_html_classDGD_1_1bad__params)#a0">bad_params</a>()</td><td><a class="doxy_el" href="$(doxygen_html_classDGD_1_1bad__params)">DGD::bad_params</a></td><td><code> [inline]</code></td></tr><tr bgcolor="#f0f0f0"><td><a class="doxy_el" href="$(doxygen_html_classDGD_1_1bad__params)#a1">bad_params</a>(const char *s)</td><td><a class="doxy_el" href="$(doxygen_html_classDGD_1_1bad__params)">DGD::bad_params</a></td><td><code> [inline]</code></td></tr><tr bgcolor="#f0f0f0"><td><a class="doxy_el" href="$(doxygen_html_classDGD_1_1bad__params)#o0">m_what</a></td><td><a class="doxy_el" href="$(doxygen_html_classDGD_1_1bad__params)">DGD::bad_params</a></td><td><code> [private]</code></td></tr><tr bgcolor="#f0f0f0"><td><a class="doxy_el" href="$(doxygen_html_classDGD_1_1bad__params)#a2">what</a>() const</td><td><a class="doxy_el" href="$(doxygen_html_classDGD_1_1bad__params)">DGD::bad_params</a></td><td><code> [inline]</code></td></tr></table>
<hr>
<address style="align: right;"><small>Generated on Mon Dec 9 18:30:03 2002 for Depression Glass Debug Library by <a href="http://www.doxygen.org/index.html"> <img align="middle" alt="doxygen" border=0 height=53 src="$(doxygen)" width=110></a>1.2.17 </small></address>
</content>

<content name="doxygen_html_classDGD_1_1bad__params" format="text/html">
<wmmeta name="title" value="DGD::bad_params class Reference" />
<h1>DGD::bad_params Class Reference</h1>
Bad command line option exception. <a href="#_details">More...</a>
<p><a href="$(doxygen_html_classDGD_1_1bad__params-members)">List of all members.</a>
<h2>Public Methods</h2>
<ul><li><a class="doxy_el" href="$(doxygen_html_classDGD_1_1bad__params)#a0">bad_params</a> () <li><a class="doxy_el" href="$(doxygen_html_classDGD_1_1bad__params)#a1">bad_params</a> (const char *s) <li>const char * <a class="doxy_el" href="$(doxygen_html_classDGD_1_1bad__params)#a2">what</a> () const </ul>
<h2>Private Attributes</h2>
<ul><li>const char * <a class="doxy_el" href="$(doxygen_html_classDGD_1_1bad__params)#o0">m_what</a></ul>
<hr>
<a name="_details"></a>
<h2>Detailed Description</h2>
 Bad command line option exception. <p> This exception is thrown when <a class="doxy_el" href="$(doxygen_html_classDGD_1_1Debug)#a2">Debug::process_options</a>(int,char**) encounters invalid command line option. <dl compact><dt><b>See also: </b><dd><a class="doxy_el" href="$(doxygen_html_classDGD_1_1Debug)#d1">Debug::create_factory</a>(int,char**) , <a class="doxy_el" href="$(doxygen_html_classDGD_1_1Debug)#a2">Debug::process_options</a>(int,char**) </dl>
<p><hr>
<h2>Constructor &amp; Destructor Documentation</h2>
<a doxytag="DGD::bad_params::bad_params" name="a0"></a>
<p><table border=0 cellpadding=2 cellspacing=0 width="100%"><tr><td class="doxy_md"><table border=0 cellpadding=0 cellspacing=0><tr><td class="doxy_md" nowrap valign="top"> DGD::bad_params::bad_params </td><td class="doxy_md" valign="top">(&nbsp;</td><td class="doxy_mdname1" nowrap valign="top">&nbsp; </td><td class="doxy_md" valign="top">)&nbsp;</td><td class="doxy_md" nowrap><code> [inline]</code></td></tr></table></td></tr></table><table border=0 cellpadding=0 cellspacing=5><tr><td> &nbsp; </td><td><p></td></tr></table><a doxytag="DGD::bad_params::bad_params" name="a1"></a>
<p><table border=0 cellpadding=2 cellspacing=0 width="100%"><tr><td class="doxy_md"><table border=0 cellpadding=0 cellspacing=0><tr><td class="doxy_md" nowrap valign="top"> DGD::bad_params::bad_params </td><td class="doxy_md" valign="top">(&nbsp;</td><td class="doxy_md" nowrap valign="top">const char *&nbsp;</td><td class="doxy_mdname1" nowrap valign="top">&nbsp; <em>s</em></td><td class="doxy_md" valign="top">)&nbsp;</td><td class="doxy_md" nowrap><code> [inline]</code></td></tr></table></td></tr></table><table border=0 cellpadding=0 cellspacing=5><tr><td> &nbsp; </td><td><p></td></tr></table><hr>
<h2>Member Function Documentation</h2>
<a doxytag="DGD::bad_params::what" name="a2"></a>
<p><table border=0 cellpadding=2 cellspacing=0 width="100%"><tr><td class="doxy_md"><table border=0 cellpadding=0 cellspacing=0><tr><td class="doxy_md" nowrap valign="top"> const char* DGD::bad_params::what </td><td class="doxy_md" valign="top">(&nbsp;</td><td class="doxy_mdname1" nowrap valign="top">&nbsp; </td><td class="doxy_md" valign="top">)&nbsp;</td><td class="doxy_md" nowrap> const<code> [inline]</code></td></tr></table></td></tr></table><table border=0 cellpadding=0 cellspacing=5><tr><td> &nbsp; </td><td><p></td></tr></table><hr>
<h2>Member Data Documentation</h2>
<a doxytag="DGD::bad_params::m_what" name="o0"></a>
<p><table border=0 cellpadding=2 cellspacing=0 width="100%"><tr><td class="doxy_md"><table border=0 cellpadding=0 cellspacing=0><tr><td class="doxy_md" nowrap valign="top"> const char* DGD::bad_params::m_what<code> [private]</code></td></tr></table></td></tr></table><table border=0 cellpadding=0 cellspacing=5><tr><td> &nbsp; </td><td><p></td></tr></table><hr>The documentation for this class was generated from the following file:<ul><li><a class="doxy_el" href="$(doxygen_html_dgDebug_8cpp)">dgDebug.cpp</a></ul><hr><address style="align: right;"><small>Generated on Mon Dec 9 18:30:03 2002 for Depression Glass Debug Library by <a href="http://www.doxygen.org/index.html"> <img align="middle" alt="doxygen" border=0 height=53 src="$(doxygen)" width=110></a>1.2.17 </small></address>
</content>

<content name="doxygen_html_classDGD_1_1channel-members" format="text/html">
<wmmeta name="title" value="Member List" />
<h1>DGD::channel Member List</h1>
This is the complete list of members for <a class="doxy_el" href="$(doxygen_html_classDGD_1_1channel)">DGD::channel</a>
, including all inherited members.<table><tr bgcolor="#f0f0f0"><td><a class="doxy_el" href="$(doxygen_html_classDGD_1_1channel)#a0">channel</a>(const std::string &amp;name)</td><td><a class="doxy_el" href="$(doxygen_html_classDGD_1_1channel)">DGD::channel</a></td><td></td></tr><tr bgcolor="#f0f0f0"><td><a class="doxy_el" href="$(doxygen_html_classDGD_1_1channel)#a2">close</a>()</td><td><a class="doxy_el" href="$(doxygen_html_classDGD_1_1channel)">DGD::channel</a></td><td></td></tr><tr bgcolor="#f0f0f0"><td><a class="doxy_el" href="$(doxygen_html_classDGD_1_1channel)#a11">decr_indent</a>()</td><td><a class="doxy_el" href="$(doxygen_html_classDGD_1_1channel)">DGD::channel</a></td><td></td></tr><tr bgcolor="#f0f0f0"><td><a class="doxy_el" href="$(doxygen_html_classDGD_1_1channel)#a24">header</a>()</td><td><a class="doxy_el" href="$(doxygen_html_classDGD_1_1channel)">DGD::channel</a></td><td><code> [virtual]</code></td></tr><tr bgcolor="#f0f0f0"><td><a class="doxy_el" href="$(doxygen_html_classDGD_1_1channel)#a10">incr_indent</a>()</td><td><a class="doxy_el" href="$(doxygen_html_classDGD_1_1channel)">DGD::channel</a></td><td></td></tr><tr bgcolor="#f0f0f0"><td><a class="doxy_el" href="$(doxygen_html_classDGD_1_1channel)#a12">indent</a>(unsigned int val)</td><td><a class="doxy_el" href="$(doxygen_html_classDGD_1_1channel)">DGD::channel</a></td><td></td></tr><tr bgcolor="#f0f0f0"><td><a class="doxy_el" href="$(doxygen_html_classDGD_1_1channel)#a13">indent</a>() const</td><td><a class="doxy_el" href="$(doxygen_html_classDGD_1_1channel)">DGD::channel</a></td><td></td></tr><tr bgcolor="#f0f0f0"><td><a class="doxy_el" href="$(doxygen_html_classDGD_1_1channel)#a8">indent_step</a>(unsigned int step)</td><td><a class="doxy_el" href="$(doxygen_html_classDGD_1_1channel)">DGD::channel</a></td><td></td></tr><tr bgcolor="#f0f0f0"><td><a class="doxy_el" href="$(doxygen_html_classDGD_1_1channel)#a9">indent_step</a>() const</td><td><a class="doxy_el" href="$(doxygen_html_classDGD_1_1channel)">DGD::channel</a></td><td></td></tr><tr bgcolor="#f0f0f0"><td><a class="doxy_el" href="$(doxygen_html_classDGD_1_1channel)#a3">is_open</a>() const</td><td><a class="doxy_el" href="$(doxygen_html_classDGD_1_1channel)">DGD::channel</a></td><td></td></tr><tr bgcolor="#f0f0f0"><td><a class="doxy_el" href="$(doxygen_html_classDGD_1_1channel)#o2">m_buffer</a></td><td><a class="doxy_el" href="$(doxygen_html_classDGD_1_1channel)">DGD::channel</a></td><td><code> [private]</code></td></tr><tr bgcolor="#f0f0f0"><td><a class="doxy_el" href="$(doxygen_html_classDGD_1_1channel)#o0">m_is_open</a></td><td><a class="doxy_el" href="$(doxygen_html_classDGD_1_1channel)">DGD::channel</a></td><td><code> [private]</code></td></tr><tr bgcolor="#f0f0f0"><td><a class="doxy_el" href="$(doxygen_html_classDGD_1_1channel)#o1">m_name</a></td><td><a class="doxy_el" href="$(doxygen_html_classDGD_1_1channel)">DGD::channel</a></td><td><code> [private]</code></td></tr><tr bgcolor="#f0f0f0"><td><a class="doxy_el" href="$(doxygen_html_classDGD_1_1channel)#o3">m_tmp_buffer</a></td><td><a class="doxy_el" href="$(doxygen_html_classDGD_1_1channel)">DGD::channel</a></td><td><code> [private]</code></td></tr><tr bgcolor="#f0f0f0"><td><a class="doxy_el" href="$(doxygen_html_classDGD_1_1channel)#a16">max_width</a>(unsigned int width)</td><td><a class="doxy_el" href="$(doxygen_html_classDGD_1_1channel)">DGD::channel</a></td><td></td></tr><tr bgcolor="#f0f0f0"><td><a class="doxy_el" href="$(doxygen_html_classDGD_1_1channel)#a17">max_width</a>() const</td><td><a class="doxy_el" href="$(doxygen_html_classDGD_1_1channel)">DGD::channel</a></td><td></td></tr><tr bgcolor="#f0f0f0"><td><a class="doxy_el" href="$(doxygen_html_classDGD_1_1channel)#a14">min_width</a>(unsigned int width)</td><td><a class="doxy_el" href="$(doxygen_html_classDGD_1_1channel)">DGD::channel</a></td><td></td></tr><tr bgcolor="#f0f0f0"><td><a class="doxy_el" href="$(doxygen_html_classDGD_1_1channel)#a15">min_width</a>() const</td><td><a class="doxy_el" href="$(doxygen_html_classDGD_1_1channel)">DGD::channel</a></td><td></td></tr><tr bgcolor="#f0f0f0"><td><a class="doxy_el" href="$(doxygen_html_classDGD_1_1channel)#a5">name</a>() const</td><td><a class="doxy_el" href="$(doxygen_html_classDGD_1_1channel)">DGD::channel</a></td><td></td></tr><tr bgcolor="#f0f0f0"><td><a class="doxy_el" href="$(doxygen_html_classDGD_1_1channel)#a1">open</a>()</td><td><a class="doxy_el" href="$(doxygen_html_classDGD_1_1channel)">DGD::channel</a></td><td></td></tr><tr bgcolor="#f0f0f0"><td><a class="doxy_el" href="$(doxygen_html_classDGD_1_1channel)#a4">operator bool</a>() const</td><td><a class="doxy_el" href="$(doxygen_html_classDGD_1_1channel)">DGD::channel</a></td><td></td></tr><tr bgcolor="#f0f0f0"><td><a class="doxy_el" href="$(doxygen_html_classDGD_1_1channel)#s0">Parent</a> typedef</td><td><a class="doxy_el" href="$(doxygen_html_classDGD_1_1channel)">DGD::channel</a></td><td></td></tr><tr bgcolor="#f0f0f0"><td><a class="doxy_el" href="$(doxygen_html_classDGD_1_1channel)#a6">rdbuf</a>() const</td><td><a class="doxy_el" href="$(doxygen_html_classDGD_1_1channel)">DGD::channel</a></td><td></td></tr><tr bgcolor="#f0f0f0"><td><a class="doxy_el" href="$(doxygen_html_classDGD_1_1channel)#a7">rdbuf</a>()</td><td><a class="doxy_el" href="$(doxygen_html_classDGD_1_1channel)">DGD::channel</a></td><td></td></tr><tr bgcolor="#f0f0f0"><td><a class="doxy_el" href="$(doxygen_html_classDGD_1_1channel)#a22">space_chars</a>(const char *spc=&quot;\t&quot;)</td><td><a class="doxy_el" href="$(doxygen_html_classDGD_1_1channel)">DGD::channel</a></td><td></td></tr><tr bgcolor="#f0f0f0"><td><a class="doxy_el" href="$(doxygen_html_classDGD_1_1channel)#a23">space_chars</a>() const</td><td><a class="doxy_el" href="$(doxygen_html_classDGD_1_1channel)">DGD::channel</a></td><td></td></tr><tr bgcolor="#f0f0f0"><td><a class="doxy_el" href="$(doxygen_html_classDGD_1_1channel)#a20">word_wrap</a>(bool allow)</td><td><a class="doxy_el" href="$(doxygen_html_classDGD_1_1channel)">DGD::channel</a></td><td></td></tr><tr bgcolor="#f0f0f0"><td><a class="doxy_el" href="$(doxygen_html_classDGD_1_1channel)#a21">word_wrap</a>() const</td><td><a class="doxy_el" href="$(doxygen_html_classDGD_1_1channel)">DGD::channel</a></td><td></td></tr><tr bgcolor="#f0f0f0"><td><a class="doxy_el" href="$(doxygen_html_classDGD_1_1channel)#a18">wrap</a>(bool allow)</td><td><a class="doxy_el" href="$(doxygen_html_classDGD_1_1channel)">DGD::channel</a></td><td></td></tr><tr bgcolor="#f0f0f0"><td><a class="doxy_el" href="$(doxygen_html_classDGD_1_1channel)#a19">wrap</a>() const</td><td><a class="doxy_el" href="$(doxygen_html_classDGD_1_1channel)">DGD::channel</a></td><td></td></tr></table>
<hr>
<address style="align: right;"><small>Generated on Mon Dec 9 18:30:02 2002 for Depression Glass Debug Library by <a href="http://www.doxygen.org/index.html"> <img align="middle" alt="doxygen" border=0 height=53 src="$(doxygen)" width=110></a>1.2.17 </small></address>
</content>

<content name="doxygen_html_classDGD_1_1channel" format="text/html">
<wmmeta name="title" value="DGD::channel class Reference" />
<h1>DGD::channel Class Reference</h1>
Simple debug channel. <a href="#_details">More...</a>
<p><code>#include &lt;<a class="doxy_el" href="$(doxygen_html_dgChannel_8h-source)">dgChannel.h</a>&gt;</code>
<p> Collaboration diagram for DGD::channel:
<p><center><img alt="Collaboration graph" border=0 src="$(classDGD_1_1channel__coll__graph)" usemap="#DGD_1_1channel__coll__map"></center><map name="DGD_1_1channel__coll__map"><area alt="" coords="0,0,107,18" href="$(doxygen_html_classDGD_1_1channelbuf)" shape="rect"></map><center><font size=2>[<a href="$(doxygen_html_graph_legend)">legend</a>]</font></center><a href="$(doxygen_html_classDGD_1_1channel-members)">List of all members.</a>
<h2>Public Types</h2>
<ul><li>typedef std::ostream <a class="doxy_el" href="$(doxygen_html_classDGD_1_1channel)#s0">Parent</a></ul>
<h2>Public Methods</h2>
<ul><li><a class="doxy_el" href="$(doxygen_html_classDGD_1_1channel)#a0">channel</a> (const std::string &amp;name) <dl class="doxy_el"><dd><font size="-1"><em>channel constructor.</em> <a href="#a0"></a><em><br><br></em></font></dl><li>void <a class="doxy_el" href="$(doxygen_html_classDGD_1_1channel)#a1">open</a> () <dl class="doxy_el"><dd><font size="-1"><em>Open and effectively initialize the channel.</em> <a href="#a1"></a><em><br><br></em></font></dl><li>void <a class="doxy_el" href="$(doxygen_html_classDGD_1_1channel)#a2">close</a> () <dl class="doxy_el"><dd><font size="-1"><em>Close and effectively disable the channel.</em> <a href="#a2"></a><em><br><br></em></font></dl><li>bool <a class="doxy_el" href="$(doxygen_html_classDGD_1_1channel)#a3">is_open</a> () const <dl class="doxy_el"><dd><font size="-1"><em>Return channel open/close status.</em> <a href="#a3"></a><em><br><br></em></font></dl><li><a class="doxy_el" href="$(doxygen_html_classDGD_1_1channel)#a4">operator bool</a> () const <dl class="doxy_el"><dd><font size="-1"><em>Return channel open/close status.</em> <a href="#a4"></a><em><br><br></em></font></dl><li>const std::string &amp; <a class="doxy_el" href="$(doxygen_html_classDGD_1_1channel)#a5">name</a> () const <dl class="doxy_el"><dd><font size="-1"><em>Return channel name.</em> <a href="#a5"></a><em><br><br></em></font></dl><li><a class="doxy_el" href="$(doxygen_html_classDGD_1_1channelbuf)">channelbuf</a> * <a class="doxy_el" href="$(doxygen_html_classDGD_1_1channel)#a6">rdbuf</a> () const <dl class="doxy_el"><dd><font size="-1"><em>Return pointer to channel buffer.</em> <a href="#a6"></a><em><br><br></em></font></dl><li><a class="doxy_el" href="$(doxygen_html_classDGD_1_1channelbuf)">channelbuf</a> &amp; <a class="doxy_el" href="$(doxygen_html_classDGD_1_1channel)#a7">rdbuf</a> () <dl class="doxy_el"><dd><font size="-1"><em>Return the channel buffer.</em> <a href="#a7"></a><em><br><br></em></font></dl><li>void <a class="doxy_el" href="$(doxygen_html_classDGD_1_1channel)#a8">indent_step</a> (unsigned int step) <dl class="doxy_el"><dd><font size="-1"><em>Change indentation step.</em> <a href="#a8"></a><em><br><br></em></font></dl><li>unsigned int <a class="doxy_el" href="$(doxygen_html_classDGD_1_1channel)#a9">indent_step</a> () const <dl class="doxy_el"><dd><font size="-1"><em>Return indentation step.</em> <a href="#a9"></a><em><br><br></em></font></dl><li>void <a class="doxy_el" href="$(doxygen_html_classDGD_1_1channel)#a10">incr_indent</a> () <dl class="doxy_el"><dd><font size="-1"><em>Increment indentation level by indentation step.</em> <a href="#a10"></a><em><br><br></em></font></dl><li>void <a class="doxy_el" href="$(doxygen_html_classDGD_1_1channel)#a11">decr_indent</a> () <dl class="doxy_el"><dd><font size="-1"><em>Decrement indentation level by indentation step.</em> <a href="#a11"></a><em><br><br></em></font></dl><li>void <a class="doxy_el" href="$(doxygen_html_classDGD_1_1channel)#a12">indent</a> (unsigned int val) <dl class="doxy_el"><dd><font size="-1"><em>Change indentation level.</em> <a href="#a12"></a><em><br><br></em></font></dl><li>unsigned int <a class="doxy_el" href="$(doxygen_html_classDGD_1_1channel)#a13">indent</a> () const <dl class="doxy_el"><dd><font size="-1"><em>Return indentation level.</em> <a href="#a13"></a><em><br><br></em></font></dl><li>void <a class="doxy_el" href="$(doxygen_html_classDGD_1_1channel)#a14">min_width</a> (unsigned int width) <dl class="doxy_el"><dd><font size="-1"><em>Change minimum line width.</em> <a href="#a14"></a><em><br><br></em></font></dl><li>unsigned int <a class="doxy_el" href="$(doxygen_html_classDGD_1_1channel)#a15">min_width</a> () const <dl class="doxy_el"><dd><font size="-1"><em>Return minimum line width.</em> <a href="#a15"></a><em><br><br></em></font></dl><li>void <a class="doxy_el" href="$(doxygen_html_classDGD_1_1channel)#a16">max_width</a> (unsigned int width) <dl class="doxy_el"><dd><font size="-1"><em>Change maximum line width.</em> <a href="#a16"></a><em><br><br></em></font></dl><li>unsigned int <a class="doxy_el" href="$(doxygen_html_classDGD_1_1channel)#a17">max_width</a> () const <dl class="doxy_el"><dd><font size="-1"><em>Return maximum line width.</em> <a href="#a17"></a><em><br><br></em></font></dl><li>void <a class="doxy_el" href="$(doxygen_html_classDGD_1_1channel)#a18">wrap</a> (bool allow) <dl class="doxy_el"><dd><font size="-1"><em>Disable or enable character wrapping.</em> <a href="#a18"></a><em><br><br></em></font></dl><li>bool <a class="doxy_el" href="$(doxygen_html_classDGD_1_1channel)#a19">wrap</a> () const <dl class="doxy_el"><dd><font size="-1"><em>Return character wrapping flag.</em> <a href="#a19"></a><em><br><br></em></font></dl><li>void <a class="doxy_el" href="$(doxygen_html_classDGD_1_1channel)#a20">word_wrap</a> (bool allow) <dl class="doxy_el"><dd><font size="-1"><em>Disable or enable word wrapping.</em> <a href="#a20"></a><em><br><br></em></font></dl><li>bool <a class="doxy_el" href="$(doxygen_html_classDGD_1_1channel)#a21">word_wrap</a> () const <dl class="doxy_el"><dd><font size="-1"><em>Return character wrapping flag.</em> <a href="#a21"></a><em><br><br></em></font></dl><li>void <a class="doxy_el" href="$(doxygen_html_classDGD_1_1channel)#a22">space_chars</a> (const char *spc=&quot;\t&quot;) <dl class="doxy_el"><dd><font size="-1"><em>Change space characters.</em> <a href="#a22"></a><em><br><br></em></font></dl><li>std::string <a class="doxy_el" href="$(doxygen_html_classDGD_1_1channel)#a23">space_chars</a> () const <dl class="doxy_el"><dd><font size="-1"><em>Return space characters.</em> <a href="#a23"></a><em><br><br></em></font></dl><li>virtual void <a class="doxy_el" href="$(doxygen_html_classDGD_1_1channel)#a24">header</a> () <dl class="doxy_el"><dd><font size="-1"><em>Dump header information into the channel.</em> <a href="#a24"></a><em><br><br></em></font></dl></ul>
<h2>Private Attributes</h2>
<ul><li>bool <a class="doxy_el" href="$(doxygen_html_classDGD_1_1channel)#o0">m_is_open</a><li>std::string <a class="doxy_el" href="$(doxygen_html_classDGD_1_1channel)#o1">m_name</a><li><a class="doxy_el" href="$(doxygen_html_classDGD_1_1channelbuf)">channelbuf</a> <a class="doxy_el" href="$(doxygen_html_classDGD_1_1channel)#o2">m_buffer</a><li><a class="doxy_el" href="$(doxygen_html_classDGD_1_1channelbuf)">channelbuf</a> <a class="doxy_el" href="$(doxygen_html_classDGD_1_1channel)#o3">m_tmp_buffer</a></ul>
<hr>
<a name="_details"></a>
<h2>Detailed Description</h2>
 Simple debug channel. <p> This class is a std::ostream with extended functionality. Terminology: <ul><li> Stream input -- a set of characters pushed into the stream for later output. <li> Line -- a set of characters on a single line of output, or alternatively, set of characters between two '\n' or '\r'. <li> Line width -- the length of the line excluding '\n' or '\r'. </ul> DGD::channel treats the input as sequence of lines. Similarly to std::ostream it has a set of format flags and other parameters defining how the sequence is formatted. The following formatting options are available: <ul><li> Character wrap. Controlled by void <a class="doxy_el" href="$(doxygen_html_classDGD_1_1channel)#a18">channel::wrap</a>(bool) method. State is received by bool <a class="doxy_el" href="$(doxygen_html_classDGD_1_1channel)#a19">channel::wrap</a>() const method. <p> DGD::channel can have character wrapping enabled or disabled. When disabled, DGD::channel discards maximum line width, allowing virtually infinite lines. <p> If the character wrapping is enabled DGD::channel tracks maximum line width. Line longer then maximum width (indentation spaces at the beginning of line are considered as part of the line!) is broken into two lines. The first one has at most maximum width. See word wrapping section for more info. The second one is processed in a recursive manner. <p><li> Maximum line width. Controlled by void <a class="doxy_el" href="$(doxygen_html_classDGD_1_1channel)#a16">channel::max_width</a>(unsigned int). State is received by unsigned int <a class="doxy_el" href="$(doxygen_html_classDGD_1_1channel)#a17">channel::max_width</a>() const method. <p> Usually it is good idea to limit the log width. For example log with 79 characters width limit can be nicely viewed in standard 80x24 terminal, default emacs window, etc..., without need for window resizing. <p><li> Minimum line width. Controlled by void <a class="doxy_el" href="$(doxygen_html_classDGD_1_1channel)#a14">channel::min_width</a>(unsigned int). State is received by unsigned int <a class="doxy_el" href="$(doxygen_html_classDGD_1_1channel)#a15">channel::min_width</a>() const method. <p> This parameter controls maximum indent level. Maximum indent column is calculated as minimum between current indent value and maximum line width minus minimum line width. This is true even if character wrapping is disabled. <p><li> Word wrap. Controlled by void <a class="doxy_el" href="$(doxygen_html_classDGD_1_1channel)#a20">channel::word_wrap</a>(bool) method. State is received by bool <a class="doxy_el" href="$(doxygen_html_classDGD_1_1channel)#a21">channel::word_wrap</a>() const method. <p> Word wrapping takes place only if character wrapping is enabled. <p> If word wrapping is disabled the line longer then maximum width will be broken in two and the first line of the pair will have exactly maximum width. Otherwise word wrapping takes place. If the line can't be broken into words the character wrapping is performed (if enabled ). The word wrapping is controlled also by space characters set, see void <a class="doxy_el" href="$(doxygen_html_classDGD_1_1channel)#a22">channel::space_chars</a>(const char*) method. <p><li> Indentation level, indentation step. Controlled by <ul><li> void <a class="doxy_el" href="$(doxygen_html_classDGD_1_1channel)#a8">indent_step</a>( unsigned int step ); <li> void <a class="doxy_el" href="$(doxygen_html_classDGD_1_1channel)#a10">incr_indent</a>(); <li> void <a class="doxy_el" href="$(doxygen_html_classDGD_1_1channel)#a11">decr_indent</a>(); <li> void <a class="doxy_el" href="$(doxygen_html_classDGD_1_1channel)#a12">indent</a>( unsigned int val ); </ul> State is received by: <ul><li> unsigned int <a class="doxy_el" href="$(doxygen_html_classDGD_1_1channel)#a9">indent_step</a>() const; <li> unsigned int <a class="doxy_el" href="$(doxygen_html_classDGD_1_1channel)#a13">indent</a>() const; </ul> Indentation level determines amount of leading spaces for each line of output. This amount is considered as part of the line width. <p> Indentation level can be set directly by <a class="doxy_el" href="$(doxygen_html_classDGD_1_1channel)#a12">indent</a>(unsigned int) method, or by incrementing/decrementing using <a class="doxy_el" href="$(doxygen_html_classDGD_1_1channel)#a10">incr_indent</a>() and <a class="doxy_el" href="$(doxygen_html_classDGD_1_1channel)#a11">decr_indent</a>() methods. In the later case it is changed by indent step value. </ul> Each channel has string name. Generally it need not be unique, but <a class="doxy_el" href="$(doxygen_html_classDGD_1_1Debug)">DGD::Debug</a> factory accepts only unique names for channels. 
<p> By default the channel is created in closed state. Closed channel will produce no output. Use <a class="doxy_el" href="$(doxygen_html_classDGD_1_1channel)#a1">open</a>() and <a class="doxy_el" href="$(doxygen_html_classDGD_1_1channel)#a2">close</a>() methods to open channel. 
<p> By default channel acts as a simple memory buffer. To make the channel act as a multiplexor for any number of std::ostream you will need to call <a class="doxy_el" href="$(doxygen_html_namespaceDGD)#a6">assoc</a>(std::ostream* ,channel&amp;) function. In other words you can associate the channel with any number of files or other std::ostream derivatives. The output from the channel will be copied to all the associated files. 
<p><hr>
<h2>Member Typedef Documentation</h2>
<a doxytag="DGD::channel::Parent" name="s0"></a>
<p><table border=0 cellpadding=2 cellspacing=0 width="100%"><tr><td class="doxy_md"><table border=0 cellpadding=0 cellspacing=0><tr><td class="doxy_md" nowrap valign="top"> typedef std::ostream DGD::channel::Parent </td></tr></table></td></tr></table><table border=0 cellpadding=0 cellspacing=5><tr><td> &nbsp; </td><td><p></td></tr></table><hr>
<h2>Constructor &amp; Destructor Documentation</h2>
<a doxytag="DGD::channel::channel" name="a0"></a>
<p><table border=0 cellpadding=2 cellspacing=0 width="100%"><tr><td class="doxy_md"><table border=0 cellpadding=0 cellspacing=0><tr><td class="doxy_md" nowrap valign="top"> DGD::channel::channel </td><td class="doxy_md" valign="top">(&nbsp;</td><td class="doxy_md" nowrap valign="top">const std::string &amp;&nbsp;</td><td class="doxy_mdname1" nowrap valign="top">&nbsp; <em>name</em></td><td class="doxy_md" valign="top">)&nbsp;</td><td class="doxy_md" nowrap></td></tr></table></td></tr></table><table border=0 cellpadding=0 cellspacing=5><tr><td> &nbsp; </td><td><p> channel constructor. <p> This one solves the chicken and egg problem of stream and streambuf construction. It calls std::ostream::init() with NULL pointer, effectively disabling the channel. Use <a class="doxy_el" href="$(doxygen_html_classDGD_1_1channel)#a1">open</a>() method to enable it. </td></tr></table><hr>
<h2>Member Function Documentation</h2>
<a doxytag="DGD::channel::open" name="a1"></a>
<p><table border=0 cellpadding=2 cellspacing=0 width="100%"><tr><td class="doxy_md"><table border=0 cellpadding=0 cellspacing=0><tr><td class="doxy_md" nowrap valign="top"> void DGD::channel::open </td><td class="doxy_md" valign="top">(&nbsp;</td><td class="doxy_mdname1" nowrap valign="top">&nbsp; </td><td class="doxy_md" valign="top">)&nbsp;</td><td class="doxy_md" nowrap></td></tr></table></td></tr></table><table border=0 cellpadding=0 cellspacing=5><tr><td> &nbsp; </td><td><p> Open and effectively initialize the channel. <p> This method calls std::ostream::init() with pointer to m_buffer. Note that m_buffer is not affected by <a class="doxy_el" href="$(doxygen_html_classDGD_1_1channel)#a2">close</a>(), this enables multiple <a class="doxy_el" href="$(doxygen_html_classDGD_1_1channel)#a2">close</a>() and <a class="doxy_el" href="$(doxygen_html_classDGD_1_1channel)#a1">open</a>() operations on the channel. </td></tr></table><a doxytag="DGD::channel::close" name="a2"></a>
<p><table border=0 cellpadding=2 cellspacing=0 width="100%"><tr><td class="doxy_md"><table border=0 cellpadding=0 cellspacing=0><tr><td class="doxy_md" nowrap valign="top"> void DGD::channel::close </td><td class="doxy_md" valign="top">(&nbsp;</td><td class="doxy_mdname1" nowrap valign="top">&nbsp; </td><td class="doxy_md" valign="top">)&nbsp;</td><td class="doxy_md" nowrap></td></tr></table></td></tr></table><table border=0 cellpadding=0 cellspacing=5><tr><td> &nbsp; </td><td><p> Close and effectively disable the channel. <p></td></tr></table><a doxytag="DGD::channel::is_open" name="a3"></a>
<p><table border=0 cellpadding=2 cellspacing=0 width="100%"><tr><td class="doxy_md"><table border=0 cellpadding=0 cellspacing=0><tr><td class="doxy_md" nowrap valign="top"> bool DGD::channel::is_open </td><td class="doxy_md" valign="top">(&nbsp;</td><td class="doxy_mdname1" nowrap valign="top">&nbsp; </td><td class="doxy_md" valign="top">)&nbsp;</td><td class="doxy_md" nowrap> const</td></tr></table></td></tr></table><table border=0 cellpadding=0 cellspacing=5><tr><td> &nbsp; </td><td><p> Return channel open/close status. <p></td></tr></table><a doxytag="DGD::channel::operator bool" name="a4"></a>
<p><table border=0 cellpadding=2 cellspacing=0 width="100%"><tr><td class="doxy_md"><table border=0 cellpadding=0 cellspacing=0><tr><td class="doxy_md" nowrap valign="top"> DGD::channel::operator bool </td><td class="doxy_md" valign="top">(&nbsp;</td><td class="doxy_mdname1" nowrap valign="top">&nbsp; </td><td class="doxy_md" valign="top">)&nbsp;</td><td class="doxy_md" nowrap> const</td></tr></table></td></tr></table><table border=0 cellpadding=0 cellspacing=5><tr><td> &nbsp; </td><td><p> Return channel open/close status. <p> This operator is used for <div class="doxy_fragment"><pre> <span class="doxy_keywordflow">if</span>( channel ) { .... }
</pre></div> expressions. </td></tr></table><a doxytag="DGD::channel::name" name="a5"></a>
<p><table border=0 cellpadding=2 cellspacing=0 width="100%"><tr><td class="doxy_md"><table border=0 cellpadding=0 cellspacing=0><tr><td class="doxy_md" nowrap valign="top"> const std::string &amp; DGD::channel::name </td><td class="doxy_md" valign="top">(&nbsp;</td><td class="doxy_mdname1" nowrap valign="top">&nbsp; </td><td class="doxy_md" valign="top">)&nbsp;</td><td class="doxy_md" nowrap> const</td></tr></table></td></tr></table><table border=0 cellpadding=0 cellspacing=5><tr><td> &nbsp; </td><td><p> Return channel name. <p></td></tr></table><a doxytag="DGD::channel::rdbuf" name="a6"></a>
<p><table border=0 cellpadding=2 cellspacing=0 width="100%"><tr><td class="doxy_md"><table border=0 cellpadding=0 cellspacing=0><tr><td class="doxy_md" nowrap valign="top"><a class="doxy_el" href="$(doxygen_html_classDGD_1_1channelbuf)">channelbuf</a> * DGD::channel::rdbuf </td><td class="doxy_md" valign="top">(&nbsp;</td><td class="doxy_mdname1" nowrap valign="top">&nbsp; </td><td class="doxy_md" valign="top">)&nbsp;</td><td class="doxy_md" nowrap> const</td></tr></table></td></tr></table><table border=0 cellpadding=0 cellspacing=5><tr><td> &nbsp; </td><td><p> Return pointer to channel buffer. <p> See <a class="doxy_el" href="$(doxygen_html_classDGD_1_1channelbuf)">DGD::channelbuf</a> for more info. This method is const so preventing non-const methods on the channel buffer. Use <a class="doxy_el" href="$(doxygen_html_classDGD_1_1channel)#a7">channel::rdbuf</a>() for changing channel buffer directly. </td></tr></table><a doxytag="DGD::channel::rdbuf" name="a7"></a>
<p><table border=0 cellpadding=2 cellspacing=0 width="100%"><tr><td class="doxy_md"><table border=0 cellpadding=0 cellspacing=0><tr><td class="doxy_md" nowrap valign="top"><a class="doxy_el" href="$(doxygen_html_classDGD_1_1channelbuf)">channelbuf</a> &amp; DGD::channel::rdbuf </td><td class="doxy_md" valign="top">(&nbsp;</td><td class="doxy_mdname1" nowrap valign="top">&nbsp; </td><td class="doxy_md" valign="top">)&nbsp;</td><td class="doxy_md" nowrap></td></tr></table></td></tr></table><table border=0 cellpadding=0 cellspacing=5><tr><td> &nbsp; </td><td><p> Return the channel buffer. <p> This method allows direct access to the channel buffer. See <a class="doxy_el" href="$(doxygen_html_classDGD_1_1channelbuf)">DGD::channelbuf</a> for more info. <dl compact><dt><b>Note: </b><dd> This method must be used carefully since direct access to the channel buffer can cause unexpected results. </dl></td></tr></table><a doxytag="DGD::channel::indent_step" name="a8"></a>
<p><table border=0 cellpadding=2 cellspacing=0 width="100%"><tr><td class="doxy_md"><table border=0 cellpadding=0 cellspacing=0><tr><td class="doxy_md" nowrap valign="top"> void DGD::channel::indent_step </td><td class="doxy_md" valign="top">(&nbsp;</td><td class="doxy_md" nowrap valign="top">unsigned int&nbsp;</td><td class="doxy_mdname1" nowrap valign="top">&nbsp; <em>step</em></td><td class="doxy_md" valign="top">)&nbsp;</td><td class="doxy_md" nowrap></td></tr></table></td></tr></table><table border=0 cellpadding=0 cellspacing=5><tr><td> &nbsp; </td><td><p> Change indentation step. <p><dl compact><dt><b>Note: </b><dd> This method does not affect the indentation level itself. </dl><dl compact><dt><b>See also: </b><dd><a class="doxy_el" href="$(doxygen_html_classDGD_1_1channelbuf)#a7">channelbuf::indent_step</a>(unsigned int) </dl></td></tr></table><a doxytag="DGD::channel::indent_step" name="a9"></a>
<p><table border=0 cellpadding=2 cellspacing=0 width="100%"><tr><td class="doxy_md"><table border=0 cellpadding=0 cellspacing=0><tr><td class="doxy_md" nowrap valign="top"> unsigned int DGD::channel::indent_step </td><td class="doxy_md" valign="top">(&nbsp;</td><td class="doxy_mdname1" nowrap valign="top">&nbsp; </td><td class="doxy_md" valign="top">)&nbsp;</td><td class="doxy_md" nowrap> const</td></tr></table></td></tr></table><table border=0 cellpadding=0 cellspacing=5><tr><td> &nbsp; </td><td><p> Return indentation step. <p><dl compact><dt><b>See also: </b><dd><a class="doxy_el" href="$(doxygen_html_classDGD_1_1channelbuf)#a8">channelbuf::indent_step</a>() const </dl></td></tr></table><a doxytag="DGD::channel::incr_indent" name="a10"></a>
<p><table border=0 cellpadding=2 cellspacing=0 width="100%"><tr><td class="doxy_md"><table border=0 cellpadding=0 cellspacing=0><tr><td class="doxy_md" nowrap valign="top"> void DGD::channel::incr_indent </td><td class="doxy_md" valign="top">(&nbsp;</td><td class="doxy_mdname1" nowrap valign="top">&nbsp; </td><td class="doxy_md" valign="top">)&nbsp;</td><td class="doxy_md" nowrap></td></tr></table></td></tr></table><table border=0 cellpadding=0 cellspacing=5><tr><td> &nbsp; </td><td><p> Increment indentation level by indentation step. <p><dl compact><dt><b>See also: </b><dd><a class="doxy_el" href="$(doxygen_html_classDGD_1_1channelbuf)#a9">channelbuf::incr_indent</a>() </dl></td></tr></table><a doxytag="DGD::channel::decr_indent" name="a11"></a>
<p><table border=0 cellpadding=2 cellspacing=0 width="100%"><tr><td class="doxy_md"><table border=0 cellpadding=0 cellspacing=0><tr><td class="doxy_md" nowrap valign="top"> void DGD::channel::decr_indent </td><td class="doxy_md" valign="top">(&nbsp;</td><td class="doxy_mdname1" nowrap valign="top">&nbsp; </td><td class="doxy_md" valign="top">)&nbsp;</td><td class="doxy_md" nowrap></td></tr></table></td></tr></table><table border=0 cellpadding=0 cellspacing=5><tr><td> &nbsp; </td><td><p> Decrement indentation level by indentation step. <p><dl compact><dt><b>See also: </b><dd><a class="doxy_el" href="$(doxygen_html_classDGD_1_1channelbuf)#a10">channelbuf::decr_indent</a>() </dl></td></tr></table><a doxytag="DGD::channel::indent" name="a12"></a>
<p><table border=0 cellpadding=2 cellspacing=0 width="100%"><tr><td class="doxy_md"><table border=0 cellpadding=0 cellspacing=0><tr><td class="doxy_md" nowrap valign="top"> void DGD::channel::indent </td><td class="doxy_md" valign="top">(&nbsp;</td><td class="doxy_md" nowrap valign="top">unsigned int&nbsp;</td><td class="doxy_mdname1" nowrap valign="top">&nbsp; <em>val</em></td><td class="doxy_md" valign="top">)&nbsp;</td><td class="doxy_md" nowrap></td></tr></table></td></tr></table><table border=0 cellpadding=0 cellspacing=5><tr><td> &nbsp; </td><td><p> Change indentation level. <p><dl compact><dt><b>Note: </b><dd> The parameter need not to be multiple of the indentation level. </dl><dl compact><dt><b>See also: </b><dd><a class="doxy_el" href="$(doxygen_html_classDGD_1_1channelbuf)#a11">channelbuf::indent</a>(unsigned int) </dl></td></tr></table><a doxytag="DGD::channel::indent" name="a13"></a>
<p><table border=0 cellpadding=2 cellspacing=0 width="100%"><tr><td class="doxy_md"><table border=0 cellpadding=0 cellspacing=0><tr><td class="doxy_md" nowrap valign="top"> unsigned int DGD::channel::indent </td><td class="doxy_md" valign="top">(&nbsp;</td><td class="doxy_mdname1" nowrap valign="top">&nbsp; </td><td class="doxy_md" valign="top">)&nbsp;</td><td class="doxy_md" nowrap> const</td></tr></table></td></tr></table><table border=0 cellpadding=0 cellspacing=5><tr><td> &nbsp; </td><td><p> Return indentation level. <p><dl compact><dt><b>See also: </b><dd><a class="doxy_el" href="$(doxygen_html_classDGD_1_1channelbuf)#a12">channelbuf::indent</a>() const </dl></td></tr></table><a doxytag="DGD::channel::min_width" name="a14"></a>
<p><table border=0 cellpadding=2 cellspacing=0 width="100%"><tr><td class="doxy_md"><table border=0 cellpadding=0 cellspacing=0><tr><td class="doxy_md" nowrap valign="top"> void DGD::channel::min_width </td><td class="doxy_md" valign="top">(&nbsp;</td><td class="doxy_md" nowrap valign="top">unsigned int&nbsp;</td><td class="doxy_mdname1" nowrap valign="top">&nbsp; <em>width</em></td><td class="doxy_md" valign="top">)&nbsp;</td><td class="doxy_md" nowrap></td></tr></table></td></tr></table><table border=0 cellpadding=0 cellspacing=5><tr><td> &nbsp; </td><td><p> Change minimum line width. <p> The effective indentation level is determined as <div class="doxy_fragment"><pre>
 * elevel = min( indentation level, max_width()-min_width() );
 * </pre></div><dl compact><dt><b>See also: </b><dd><a class="doxy_el" href="$(doxygen_html_classDGD_1_1channelbuf)#a13">channelbuf::min_width</a>(unsigned int) </dl></td></tr></table><a doxytag="DGD::channel::min_width" name="a15"></a>
<p><table border=0 cellpadding=2 cellspacing=0 width="100%"><tr><td class="doxy_md"><table border=0 cellpadding=0 cellspacing=0><tr><td class="doxy_md" nowrap valign="top"> unsigned int DGD::channel::min_width </td><td class="doxy_md" valign="top">(&nbsp;</td><td class="doxy_mdname1" nowrap valign="top">&nbsp; </td><td class="doxy_md" valign="top">)&nbsp;</td><td class="doxy_md" nowrap> const</td></tr></table></td></tr></table><table border=0 cellpadding=0 cellspacing=5><tr><td> &nbsp; </td><td><p> Return minimum line width. <p><dl compact><dt><b>See also: </b><dd><a class="doxy_el" href="$(doxygen_html_classDGD_1_1channelbuf)#a14">channelbuf::min_width</a>() const </dl></td></tr></table><a doxytag="DGD::channel::max_width" name="a16"></a>
<p><table border=0 cellpadding=2 cellspacing=0 width="100%"><tr><td class="doxy_md"><table border=0 cellpadding=0 cellspacing=0><tr><td class="doxy_md" nowrap valign="top"> void DGD::channel::max_width </td><td class="doxy_md" valign="top">(&nbsp;</td><td class="doxy_md" nowrap valign="top">unsigned int&nbsp;</td><td class="doxy_mdname1" nowrap valign="top">&nbsp; <em>width</em></td><td class="doxy_md" valign="top">)&nbsp;</td><td class="doxy_md" nowrap></td></tr></table></td></tr></table><table border=0 cellpadding=0 cellspacing=5><tr><td> &nbsp; </td><td><p> Change maximum line width. <p><dl compact><dt><b>See also: </b><dd><a class="doxy_el" href="$(doxygen_html_classDGD_1_1channelbuf)#a15">channelbuf::max_width</a>(unsigned int) </dl></td></tr></table><a doxytag="DGD::channel::max_width" name="a17"></a>
<p><table border=0 cellpadding=2 cellspacing=0 width="100%"><tr><td class="doxy_md"><table border=0 cellpadding=0 cellspacing=0><tr><td class="doxy_md" nowrap valign="top"> unsigned int DGD::channel::max_width </td><td class="doxy_md" valign="top">(&nbsp;</td><td class="doxy_mdname1" nowrap valign="top">&nbsp; </td><td class="doxy_md" valign="top">)&nbsp;</td><td class="doxy_md" nowrap> const</td></tr></table></td></tr></table><table border=0 cellpadding=0 cellspacing=5><tr><td> &nbsp; </td><td><p> Return maximum line width. <p><dl compact><dt><b>See also: </b><dd><a class="doxy_el" href="$(doxygen_html_classDGD_1_1channelbuf)#a16">channelbuf::max_width</a>() const </dl></td></tr></table><a doxytag="DGD::channel::wrap" name="a18"></a>
<p><table border=0 cellpadding=2 cellspacing=0 width="100%"><tr><td class="doxy_md"><table border=0 cellpadding=0 cellspacing=0><tr><td class="doxy_md" nowrap valign="top"> void DGD::channel::wrap </td><td class="doxy_md" valign="top">(&nbsp;</td><td class="doxy_md" nowrap valign="top">bool&nbsp;</td><td class="doxy_mdname1" nowrap valign="top">&nbsp; <em>allow</em></td><td class="doxy_md" valign="top">)&nbsp;</td><td class="doxy_md" nowrap></td></tr></table></td></tr></table><table border=0 cellpadding=0 cellspacing=5><tr><td> &nbsp; </td><td><p> Disable or enable character wrapping. <p><dl compact><dt><b>See also: </b><dd><a class="doxy_el" href="$(doxygen_html_classDGD_1_1channelbuf)#a17">channelbuf::wrap</a>(bool) </dl></td></tr></table><a doxytag="DGD::channel::wrap" name="a19"></a>
<p><table border=0 cellpadding=2 cellspacing=0 width="100%"><tr><td class="doxy_md"><table border=0 cellpadding=0 cellspacing=0><tr><td class="doxy_md" nowrap valign="top"> bool DGD::channel::wrap </td><td class="doxy_md" valign="top">(&nbsp;</td><td class="doxy_mdname1" nowrap valign="top">&nbsp; </td><td class="doxy_md" valign="top">)&nbsp;</td><td class="doxy_md" nowrap> const</td></tr></table></td></tr></table><table border=0 cellpadding=0 cellspacing=5><tr><td> &nbsp; </td><td><p> Return character wrapping flag. <p><dl compact><dt><b>See also: </b><dd><a class="doxy_el" href="$(doxygen_html_classDGD_1_1channelbuf)#a18">channelbuf::wrap</a>() const </dl></td></tr></table><a doxytag="DGD::channel::word_wrap" name="a20"></a>
<p><table border=0 cellpadding=2 cellspacing=0 width="100%"><tr><td class="doxy_md"><table border=0 cellpadding=0 cellspacing=0><tr><td class="doxy_md" nowrap valign="top"> void DGD::channel::word_wrap </td><td class="doxy_md" valign="top">(&nbsp;</td><td class="doxy_md" nowrap valign="top">bool&nbsp;</td><td class="doxy_mdname1" nowrap valign="top">&nbsp; <em>allow</em></td><td class="doxy_md" valign="top">)&nbsp;</td><td class="doxy_md" nowrap></td></tr></table></td></tr></table><table border=0 cellpadding=0 cellspacing=5><tr><td> &nbsp; </td><td><p> Disable or enable word wrapping. <p><dl compact><dt><b>See also: </b><dd><a class="doxy_el" href="$(doxygen_html_classDGD_1_1channelbuf)#a19">channelbuf::word_wrap</a>(bool) </dl></td></tr></table><a doxytag="DGD::channel::word_wrap" name="a21"></a>
<p><table border=0 cellpadding=2 cellspacing=0 width="100%"><tr><td class="doxy_md"><table border=0 cellpadding=0 cellspacing=0><tr><td class="doxy_md" nowrap valign="top"> bool DGD::channel::word_wrap </td><td class="doxy_md" valign="top">(&nbsp;</td><td class="doxy_mdname1" nowrap valign="top">&nbsp; </td><td class="doxy_md" valign="top">)&nbsp;</td><td class="doxy_md" nowrap> const</td></tr></table></td></tr></table><table border=0 cellpadding=0 cellspacing=5><tr><td> &nbsp; </td><td><p> Return character wrapping flag. <p><dl compact><dt><b>See also: </b><dd><a class="doxy_el" href="$(doxygen_html_classDGD_1_1channelbuf)#a20">channelbuf::word_wrap</a>() const </dl></td></tr></table><a doxytag="DGD::channel::space_chars" name="a22"></a>
<p><table border=0 cellpadding=2 cellspacing=0 width="100%"><tr><td class="doxy_md"><table border=0 cellpadding=0 cellspacing=0><tr><td class="doxy_md" nowrap valign="top"> void DGD::channel::space_chars </td><td class="doxy_md" valign="top">(&nbsp;</td><td class="doxy_md" nowrap valign="top">const char *&nbsp;</td><td class="doxy_mdname1" nowrap valign="top">&nbsp; <em>spc</em> = &quot; \t&quot; </td><td class="doxy_md" valign="top">)&nbsp;</td><td class="doxy_md" nowrap></td></tr></table></td></tr></table><table border=0 cellpadding=0 cellspacing=5><tr><td> &nbsp; </td><td><p> Change space characters. <p> This method accepts a null-terminated character string. Each character in the string will be considering like a space between words during word wrapping. <dl compact><dt><b>See also: </b><dd><a class="doxy_el" href="$(doxygen_html_classDGD_1_1channelbuf)#a21">channelbuf::space_chars</a>(const char*) </dl></td></tr></table><a doxytag="DGD::channel::space_chars" name="a23"></a>
<p><table border=0 cellpadding=2 cellspacing=0 width="100%"><tr><td class="doxy_md"><table border=0 cellpadding=0 cellspacing=0><tr><td class="doxy_md" nowrap valign="top"> std::string DGD::channel::space_chars </td><td class="doxy_md" valign="top">(&nbsp;</td><td class="doxy_mdname1" nowrap valign="top">&nbsp; </td><td class="doxy_md" valign="top">)&nbsp;</td><td class="doxy_md" nowrap> const</td></tr></table></td></tr></table><table border=0 cellpadding=0 cellspacing=5><tr><td> &nbsp; </td><td><p> Return space characters. <p><dl compact><dt><b>See also: </b><dd><a class="doxy_el" href="$(doxygen_html_classDGD_1_1channelbuf)#a22">channelbuf::space_chars</a>() const </dl></td></tr></table><a doxytag="DGD::channel::header" name="a24"></a>
<p><table border=0 cellpadding=2 cellspacing=0 width="100%"><tr><td class="doxy_md"><table border=0 cellpadding=0 cellspacing=0><tr><td class="doxy_md" nowrap valign="top"> void DGD::channel::header </td><td class="doxy_md" valign="top">(&nbsp;</td><td class="doxy_mdname1" nowrap valign="top">&nbsp; </td><td class="doxy_md" valign="top">)&nbsp;</td><td class="doxy_md" nowrap><code> [virtual]</code></td></tr></table></td></tr></table><table border=0 cellpadding=0 cellspacing=5><tr><td> &nbsp; </td><td><p> Dump header information into the channel. <p> Normally this method is invoked by <a class="doxy_el" href="$(doxygen_html_namespaceDGD)#a6">assoc</a>(), but it can be called in any other places. </td></tr></table><hr>
<h2>Member Data Documentation</h2>
<a doxytag="DGD::channel::m_is_open" name="o0"></a>
<p><table border=0 cellpadding=2 cellspacing=0 width="100%"><tr><td class="doxy_md"><table border=0 cellpadding=0 cellspacing=0><tr><td class="doxy_md" nowrap valign="top"> bool DGD::channel::m_is_open<code> [private]</code></td></tr></table></td></tr></table><table border=0 cellpadding=0 cellspacing=5><tr><td> &nbsp; </td><td><p></td></tr></table><a doxytag="DGD::channel::m_name" name="o1"></a>
<p><table border=0 cellpadding=2 cellspacing=0 width="100%"><tr><td class="doxy_md"><table border=0 cellpadding=0 cellspacing=0><tr><td class="doxy_md" nowrap valign="top"> std::string DGD::channel::m_name<code> [private]</code></td></tr></table></td></tr></table><table border=0 cellpadding=0 cellspacing=5><tr><td> &nbsp; </td><td><p></td></tr></table><a doxytag="DGD::channel::m_buffer" name="o2"></a>
<p><table border=0 cellpadding=2 cellspacing=0 width="100%"><tr><td class="doxy_md"><table border=0 cellpadding=0 cellspacing=0><tr><td class="doxy_md" nowrap valign="top"><a class="doxy_el" href="$(doxygen_html_classDGD_1_1channelbuf)">channelbuf</a> DGD::channel::m_buffer<code> [private]</code></td></tr></table></td></tr></table><table border=0 cellpadding=0 cellspacing=5><tr><td> &nbsp; </td><td><p></td></tr></table><a doxytag="DGD::channel::m_tmp_buffer" name="o3"></a>
<p><table border=0 cellpadding=2 cellspacing=0 width="100%"><tr><td class="doxy_md"><table border=0 cellpadding=0 cellspacing=0><tr><td class="doxy_md" nowrap valign="top"><a class="doxy_el" href="$(doxygen_html_classDGD_1_1channelbuf)">channelbuf</a> DGD::channel::m_tmp_buffer<code> [private]</code></td></tr></table></td></tr></table><table border=0 cellpadding=0 cellspacing=5><tr><td> &nbsp; </td><td><p></td></tr></table><hr>The documentation for this class was generated from the following files:<ul><li><a class="doxy_el" href="$(doxygen_html_dgChannel_8h-source)">dgChannel.h</a><li><a class="doxy_el" href="$(doxygen_html_dgChannel_8cpp)">dgChannel.cpp</a></ul><hr><address style="align: right;"><small>Generated on Mon Dec 9 18:30:02 2002 for Depression Glass Debug Library by <a href="http://www.doxygen.org/index.html"> <img align="middle" alt="doxygen" border=0 height=53 src="$(doxygen)" width=110></a>1.2.17 </small></address>
</content>

<content name="doxygen_html_classDGD_1_1channel__manip-members" format="text/html">
<wmmeta name="title" value="Member List" />
<h1>DGD::channel_manip&lt; Arg_type &gt; Member List</h1>
This is the complete list of members for <a class="doxy_el" href="$(doxygen_html_classDGD_1_1channel__manip)">DGD::channel_manip&lt; Arg_type &gt;</a>
, including all inherited members.<table><tr bgcolor="#f0f0f0"><td><a class="doxy_el" href="$(doxygen_html_classDGD_1_1channel__manip)#a0">channel_manip</a>(method_type method, Arg_type arg)</td><td><a class="doxy_el" href="$(doxygen_html_classDGD_1_1channel__manip)">DGD::channel_manip&lt; Arg_type &gt;</a></td><td><code> [inline, explicit]</code></td></tr><tr bgcolor="#f0f0f0"><td><a class="doxy_el" href="$(doxygen_html_classDGD_1_1channel__manip)#m1">m_argument</a></td><td><a class="doxy_el" href="$(doxygen_html_classDGD_1_1channel__manip)">DGD::channel_manip&lt; Arg_type &gt;</a></td><td></td></tr><tr bgcolor="#f0f0f0"><td><a class="doxy_el" href="$(doxygen_html_classDGD_1_1channel__manip)#m0">m_method</a></td><td><a class="doxy_el" href="$(doxygen_html_classDGD_1_1channel__manip)">DGD::channel_manip&lt; Arg_type &gt;</a></td><td></td></tr><tr bgcolor="#f0f0f0"><td><a class="doxy_el" href="$(doxygen_html_classDGD_1_1channel__manip)#s0">method_type</a> typedef</td><td><a class="doxy_el" href="$(doxygen_html_classDGD_1_1channel__manip)">DGD::channel_manip&lt; Arg_type &gt;</a></td><td></td></tr></table>
<hr>
<address style="align: right;"><small>Generated on Mon Dec 9 18:30:03 2002 for Depression Glass Debug Library by <a href="http://www.doxygen.org/index.html"> <img align="middle" alt="doxygen" border=0 height=53 src="$(doxygen)" width=110></a>1.2.17 </small></address>
</content>

<content name="doxygen_html_classDGD_1_1channel__manip" format="text/html">
<wmmeta name="title" value=" TemplateDGD::channel_manip class Reference" />
<h1>DGD::channel_manip&lt; Arg_type &gt; Class Template Reference</h1>
Channel manipulator with a single argument. <a href="#_details">More...</a>
<p><code>#include &lt;<a class="doxy_el" href="$(doxygen_html_dgChannelManip_8h-source)">dgChannelManip.h</a>&gt;</code>
<p> Collaboration diagram for DGD::channel_manip&lt; Arg_type &gt;:
<p><center><img alt="Collaboration graph" border=0 src="$(classDGD_1_1channel__manip__coll__graph)" usemap="#DGD_1_1channel__manip_3_01Arg__type_01_4__coll__map"></center><center><font size=2>[<a href="$(doxygen_html_graph_legend)">legend</a>]</font></center><a href="$(doxygen_html_classDGD_1_1channel__manip-members)">List of all members.</a>
<h2>Public Types</h2>
<ul><li>typedef void(channel::* <a class="doxy_el" href="$(doxygen_html_classDGD_1_1channel__manip)#s0">method_type</a> )(Arg_type) </ul>
<h2>Public Methods</h2>
<ul><li><a class="doxy_el" href="$(doxygen_html_classDGD_1_1channel__manip)#a0">channel_manip</a> (<a class="doxy_el" href="$(doxygen_html_classDGD_1_1channel__manip)#s0">method_type</a> method, Arg_type arg) </ul>
<h2>Public Attributes</h2>
<ul><li><a class="doxy_el" href="$(doxygen_html_classDGD_1_1channel__manip)#s0">method_type</a> <a class="doxy_el" href="$(doxygen_html_classDGD_1_1channel__manip)#m0">m_method</a><li>Arg_type <a class="doxy_el" href="$(doxygen_html_classDGD_1_1channel__manip)#m1">m_argument</a></ul>
<hr>
<a name="_details"></a>
<h2>Detailed Description</h2>
<h3>template&lt;class Arg_type&gt;<br> class DGD::channel_manip&lt; Arg_type &gt;</h3>
 Channel manipulator with a single argument. <p> This is a simple class which acts as binder for a channel method with a single argument. Once object of this class used by output operator the method is called. <dl compact><dt><b>See also: </b><dd><a class="doxy_el" href="$(doxygen_html_classDGD_1_1channel__manip__void)">channel_manip_void</a> , <a class="doxy_el" href="$(doxygen_html_classDGD_1_1channel__manip__nop)">channel_manip_nop</a> , <a class="doxy_el" href="$(doxygen_html_namespaceDGD)#a0">channel_manip_bool</a> , <a class="doxy_el" href="$(doxygen_html_namespaceDGD)#a1">channel_manip_uint</a></dl>
<p><hr>
<h2>Member Typedef Documentation</h2>
<a doxytag="DGD::channel_manip::method_type" name="s0"></a>
<p><table border=0 cellpadding=2 cellspacing=0 width="100%"><tr><td class="doxy_md"><table border=0 cellpadding=0 cellspacing=0><tr><td class="doxy_md" colspan=4> template&lt;class Arg_type&gt; </td></tr><tr><td class="doxy_md" nowrap valign="top"> typedef void(channel::* DGD::channel_manip&lt; Arg_type &gt;::method_type)( Arg_type ) </td></tr></table></td></tr></table><table border=0 cellpadding=0 cellspacing=5><tr><td> &nbsp; </td><td><p></td></tr></table><hr>
<h2>Constructor &amp; Destructor Documentation</h2>
<a doxytag="DGD::channel_manip::channel_manip" name="a0"></a>
<p><table border=0 cellpadding=2 cellspacing=0 width="100%"><tr><td class="doxy_md"><table border=0 cellpadding=0 cellspacing=0><tr><td class="doxy_md" colspan=4> template&lt;class Arg_type&gt; </td></tr><tr><td class="doxy_md" nowrap valign="top"> DGD::channel_manip&lt; Arg_type &gt;::channel_manip </td><td class="doxy_md" valign="top">(&nbsp;</td><td class="doxy_md" nowrap valign="top"><a class="doxy_el" href="$(doxygen_html_classDGD_1_1channel__manip)#s0">method_type</a>&nbsp;</td><td class="doxy_mdname" nowrap>&nbsp; <em>method</em>, </td></tr><tr><td></td><td></td><td class="doxy_md" nowrap>Arg_type&nbsp;</td><td class="doxy_mdname" nowrap>&nbsp; <em>arg</em></td></tr><tr><td></td><td class="doxy_md">)&nbsp;</td><td class="doxy_md" colspan=2><code> [inline, explicit]</code></td></tr></table></td></tr></table><table border=0 cellpadding=0 cellspacing=5><tr><td> &nbsp; </td><td><p></td></tr></table><hr>
<h2>Member Data Documentation</h2>
<a doxytag="DGD::channel_manip::m_method" name="m0"></a>
<p><table border=0 cellpadding=2 cellspacing=0 width="100%"><tr><td class="doxy_md"><table border=0 cellpadding=0 cellspacing=0><tr><td class="doxy_md" colspan=4> template&lt;class Arg_type&gt; </td></tr><tr><td class="doxy_md" nowrap valign="top"><a class="doxy_el" href="$(doxygen_html_classDGD_1_1channel__manip)#s0">method_type</a> DGD::channel_manip&lt; Arg_type &gt;::m_method </td></tr></table></td></tr></table><table border=0 cellpadding=0 cellspacing=5><tr><td> &nbsp; </td><td><p></td></tr></table><a doxytag="DGD::channel_manip::m_argument" name="m1"></a>
<p><table border=0 cellpadding=2 cellspacing=0 width="100%"><tr><td class="doxy_md"><table border=0 cellpadding=0 cellspacing=0><tr><td class="doxy_md" colspan=4> template&lt;class Arg_type&gt; </td></tr><tr><td class="doxy_md" nowrap valign="top"> Arg_type DGD::channel_manip&lt; Arg_type &gt;::m_argument </td></tr></table></td></tr></table><table border=0 cellpadding=0 cellspacing=5><tr><td> &nbsp; </td><td><p></td></tr></table><hr>The documentation for this class was generated from the following file:<ul><li><a class="doxy_el" href="$(doxygen_html_dgChannelManip_8h-source)">dgChannelManip.h</a></ul><hr><address style="align: right;"><small>Generated on Mon Dec 9 18:30:03 2002 for Depression Glass Debug Library by <a href="http://www.doxygen.org/index.html"> <img align="middle" alt="doxygen" border=0 height=53 src="$(doxygen)" width=110></a>1.2.17 </small></address>
</content>

<content name="doxygen_html_classDGD_1_1channel__manip__nop-members" format="text/html">
<wmmeta name="title" value="Member List" />
<h1>DGD::channel_manip_nop Member List</h1>
This is the complete list of members for <a class="doxy_el" href="$(doxygen_html_classDGD_1_1channel__manip__nop)">DGD::channel_manip_nop</a>
, including all inherited members.<table><tr bgcolor="#f0f0f0"><td><a class="doxy_el" href="$(doxygen_html_classDGD_1_1channel__manip__nop)#a0">channel_manip_nop</a>()</td><td><a class="doxy_el" href="$(doxygen_html_classDGD_1_1channel__manip__nop)">DGD::channel_manip_nop</a></td><td><code> [inline]</code></td></tr></table>
<hr>
<address style="align: right;"><small>Generated on Mon Dec 9 18:30:03 2002 for Depression Glass Debug Library by <a href="http://www.doxygen.org/index.html"> <img align="middle" alt="doxygen" border=0 height=53 src="$(doxygen)" width=110></a>1.2.17 </small></address>
</content>

<content name="doxygen_html_classDGD_1_1channel__manip__nop" format="text/html">
<wmmeta name="title" value="DGD::channel_manip_nop class Reference" />
<h1>DGD::channel_manip_nop Class Reference</h1>
Channel manipulator without arguments. <a href="#_details">More...</a>
<p><code>#include &lt;<a class="doxy_el" href="$(doxygen_html_dgChannelManip_8h-source)">dgChannelManip.h</a>&gt;</code>
<p><a href="$(doxygen_html_classDGD_1_1channel__manip__nop-members)">List of all members.</a>
<h2>Public Methods</h2>
<ul><li><a class="doxy_el" href="$(doxygen_html_classDGD_1_1channel__manip__nop)#a0">channel_manip_nop</a> () </ul>
<hr>
<a name="_details"></a>
<h2>Detailed Description</h2>
 Channel manipulator without arguments. <p> This is a specialization of <a class="doxy_el" href="$(doxygen_html_classDGD_1_1channel__manip)">DGD::channel_manip</a>&lt;Arg_type&gt;, when Arg_type is void and no channel method is called. <dl compact><dt><b>See also: </b><dd><a class="doxy_el" href="$(doxygen_html_classDGD_1_1channel__manip__void)">channel_manip_void</a> , <a class="doxy_el" href="$(doxygen_html_classDGD_1_1channel__manip__nop)">channel_manip_nop</a> , <a class="doxy_el" href="$(doxygen_html_namespaceDGD)#a0">channel_manip_bool</a> , <a class="doxy_el" href="$(doxygen_html_namespaceDGD)#a1">channel_manip_uint</a></dl>
<p><hr>
<h2>Constructor &amp; Destructor Documentation</h2>
<a doxytag="DGD::channel_manip_nop::channel_manip_nop" name="a0"></a>
<p><table border=0 cellpadding=2 cellspacing=0 width="100%"><tr><td class="doxy_md"><table border=0 cellpadding=0 cellspacing=0><tr><td class="doxy_md" nowrap valign="top"> DGD::channel_manip_nop::channel_manip_nop </td><td class="doxy_md" valign="top">(&nbsp;</td><td class="doxy_mdname1" nowrap valign="top">&nbsp; </td><td class="doxy_md" valign="top">)&nbsp;</td><td class="doxy_md" nowrap><code> [inline]</code></td></tr></table></td></tr></table><table border=0 cellpadding=0 cellspacing=5><tr><td> &nbsp; </td><td><p></td></tr></table><hr>The documentation for this class was generated from the following file:<ul><li><a class="doxy_el" href="$(doxygen_html_dgChannelManip_8h-source)">dgChannelManip.h</a></ul><hr><address style="align: right;"><small>Generated on Mon Dec 9 18:30:03 2002 for Depression Glass Debug Library by <a href="http://www.doxygen.org/index.html"> <img align="middle" alt="doxygen" border=0 height=53 src="$(doxygen)" width=110></a>1.2.17 </small></address>
</content>

<content name="doxygen_html_classDGD_1_1channel__manip__void-members" format="text/html">
<wmmeta name="title" value="Member List" />
<h1>DGD::channel_manip_void Member List</h1>
This is the complete list of members for <a class="doxy_el" href="$(doxygen_html_classDGD_1_1channel__manip__void)">DGD::channel_manip_void</a>
, including all inherited members.<table><tr bgcolor="#f0f0f0"><td><a class="doxy_el" href="$(doxygen_html_classDGD_1_1channel__manip__void)#a0">channel_manip_void</a>(method_type m)</td><td><a class="doxy_el" href="$(doxygen_html_classDGD_1_1channel__manip__void)">DGD::channel_manip_void</a></td><td><code> [inline, explicit]</code></td></tr><tr bgcolor="#f0f0f0"><td><a class="doxy_el" href="$(doxygen_html_classDGD_1_1channel__manip__void)#m0">m_method</a></td><td><a class="doxy_el" href="$(doxygen_html_classDGD_1_1channel__manip__void)">DGD::channel_manip_void</a></td><td></td></tr><tr bgcolor="#f0f0f0"><td><a class="doxy_el" href="$(doxygen_html_classDGD_1_1channel__manip__void)#s0">method_type</a> typedef</td><td><a class="doxy_el" href="$(doxygen_html_classDGD_1_1channel__manip__void)">DGD::channel_manip_void</a></td><td></td></tr></table>
<hr>
<address style="align: right;"><small>Generated on Mon Dec 9 18:30:03 2002 for Depression Glass Debug Library by <a href="http://www.doxygen.org/index.html"> <img align="middle" alt="doxygen" border=0 height=53 src="$(doxygen)" width=110></a>1.2.17 </small></address>
</content>

<content name="doxygen_html_classDGD_1_1channel__manip__void" format="text/html">
<wmmeta name="title" value="DGD::channel_manip_void class Reference" />
<h1>DGD::channel_manip_void Class Reference</h1>
Channel manipulator without arguments. <a href="#_details">More...</a>
<p><code>#include &lt;<a class="doxy_el" href="$(doxygen_html_dgChannelManip_8h-source)">dgChannelManip.h</a>&gt;</code>
<p><a href="$(doxygen_html_classDGD_1_1channel__manip__void-members)">List of all members.</a>
<h2>Public Types</h2>
<ul><li>typedef void(channel::* <a class="doxy_el" href="$(doxygen_html_classDGD_1_1channel__manip__void)#s0">method_type</a> )() </ul>
<h2>Public Methods</h2>
<ul><li><a class="doxy_el" href="$(doxygen_html_classDGD_1_1channel__manip__void)#a0">channel_manip_void</a> (<a class="doxy_el" href="$(doxygen_html_classDGD_1_1channel__manip__void)#s0">method_type</a> m) </ul>
<h2>Public Attributes</h2>
<ul><li><a class="doxy_el" href="$(doxygen_html_classDGD_1_1channel__manip__void)#s0">method_type</a> <a class="doxy_el" href="$(doxygen_html_classDGD_1_1channel__manip__void)#m0">m_method</a></ul>
<hr>
<a name="_details"></a>
<h2>Detailed Description</h2>
 Channel manipulator without arguments. <p> This is a specialization of <a class="doxy_el" href="$(doxygen_html_classDGD_1_1channel__manip)">DGD::channel_manip</a>&lt;Arg_type&gt;, when Arg_type is void. <dl compact><dt><b>See also: </b><dd><a class="doxy_el" href="$(doxygen_html_classDGD_1_1channel__manip)">channel_manip</a> , <a class="doxy_el" href="$(doxygen_html_classDGD_1_1channel__manip__nop)">channel_manip_nop</a> , <a class="doxy_el" href="$(doxygen_html_namespaceDGD)#a0">channel_manip_bool</a> , <a class="doxy_el" href="$(doxygen_html_namespaceDGD)#a1">channel_manip_uint</a></dl>
<p><hr>
<h2>Member Typedef Documentation</h2>
<a doxytag="DGD::channel_manip_void::method_type" name="s0"></a>
<p><table border=0 cellpadding=2 cellspacing=0 width="100%"><tr><td class="doxy_md"><table border=0 cellpadding=0 cellspacing=0><tr><td class="doxy_md" nowrap valign="top"> typedef void(channel::* DGD::channel_manip_void::method_type)() </td></tr></table></td></tr></table><table border=0 cellpadding=0 cellspacing=5><tr><td> &nbsp; </td><td><p></td></tr></table><hr>
<h2>Constructor &amp; Destructor Documentation</h2>
<a doxytag="DGD::channel_manip_void::channel_manip_void" name="a0"></a>
<p><table border=0 cellpadding=2 cellspacing=0 width="100%"><tr><td class="doxy_md"><table border=0 cellpadding=0 cellspacing=0><tr><td class="doxy_md" nowrap valign="top"> DGD::channel_manip_void::channel_manip_void </td><td class="doxy_md" valign="top">(&nbsp;</td><td class="doxy_md" nowrap valign="top"><a class="doxy_el" href="$(doxygen_html_classDGD_1_1channel__manip__void)#s0">method_type</a>&nbsp;</td><td class="doxy_mdname1" nowrap valign="top">&nbsp; <em>m</em></td><td class="doxy_md" valign="top">)&nbsp;</td><td class="doxy_md" nowrap><code> [inline, explicit]</code></td></tr></table></td></tr></table><table border=0 cellpadding=0 cellspacing=5><tr><td> &nbsp; </td><td><p></td></tr></table><hr>
<h2>Member Data Documentation</h2>
<a doxytag="DGD::channel_manip_void::m_method" name="m0"></a>
<p><table border=0 cellpadding=2 cellspacing=0 width="100%"><tr><td class="doxy_md"><table border=0 cellpadding=0 cellspacing=0><tr><td class="doxy_md" nowrap valign="top"><a class="doxy_el" href="$(doxygen_html_classDGD_1_1channel__manip__void)#s0">method_type</a> DGD::channel_manip_void::m_method </td></tr></table></td></tr></table><table border=0 cellpadding=0 cellspacing=5><tr><td> &nbsp; </td><td><p></td></tr></table><hr>The documentation for this class was generated from the following file:<ul><li><a class="doxy_el" href="$(doxygen_html_dgChannelManip_8h-source)">dgChannelManip.h</a></ul><hr><address style="align: right;"><small>Generated on Mon Dec 9 18:30:03 2002 for Depression Glass Debug Library by <a href="http://www.doxygen.org/index.html"> <img align="middle" alt="doxygen" border=0 height=53 src="$(doxygen)" width=110></a>1.2.17 </small></address>
</content>

<content name="doxygen_html_classDGD_1_1channelbuf-members" format="text/html">
<wmmeta name="title" value="Member List" />
<h1>DGD::channelbuf Member List</h1>
This is the complete list of members for <a class="doxy_el" href="$(doxygen_html_classDGD_1_1channelbuf)">DGD::channelbuf</a>
, including all inherited members.<table><tr bgcolor="#f0f0f0"><td><a class="doxy_el" href="$(doxygen_html_classDGD_1_1channelbuf)#a2">assoc</a>(std::ostream *)</td><td><a class="doxy_el" href="$(doxygen_html_classDGD_1_1channelbuf)">DGD::channelbuf</a></td><td></td></tr><tr bgcolor="#f0f0f0"><td><a class="doxy_el" href="$(doxygen_html_classDGD_1_1channelbuf)#t0">Assoc_list</a> typedef</td><td><a class="doxy_el" href="$(doxygen_html_classDGD_1_1channelbuf)">DGD::channelbuf</a></td><td><code> [protected]</code></td></tr><tr bgcolor="#f0f0f0"><td><a class="doxy_el" href="$(doxygen_html_classDGD_1_1channelbuf)#a24">bytes_written</a>() const</td><td><a class="doxy_el" href="$(doxygen_html_classDGD_1_1channelbuf)">DGD::channelbuf</a></td><td></td></tr><tr bgcolor="#f0f0f0"><td><a class="doxy_el" href="$(doxygen_html_classDGD_1_1channelbuf)#a0">channelbuf</a>()</td><td><a class="doxy_el" href="$(doxygen_html_classDGD_1_1channelbuf)">DGD::channelbuf</a></td><td></td></tr><tr bgcolor="#f0f0f0"><td><a class="doxy_el" href="$(doxygen_html_classDGD_1_1channelbuf)#a6">column</a>() const</td><td><a class="doxy_el" href="$(doxygen_html_classDGD_1_1channelbuf)">DGD::channelbuf</a></td><td></td></tr><tr bgcolor="#f0f0f0"><td><a class="doxy_el" href="$(doxygen_html_classDGD_1_1channelbuf)#a3">dassoc</a>(std::ostream *)</td><td><a class="doxy_el" href="$(doxygen_html_classDGD_1_1channelbuf)">DGD::channelbuf</a></td><td></td></tr><tr bgcolor="#f0f0f0"><td><a class="doxy_el" href="$(doxygen_html_classDGD_1_1channelbuf)#a4">dassoc</a>()</td><td><a class="doxy_el" href="$(doxygen_html_classDGD_1_1channelbuf)">DGD::channelbuf</a></td><td></td></tr><tr bgcolor="#f0f0f0"><td><a class="doxy_el" href="$(doxygen_html_classDGD_1_1channelbuf)#a10">decr_indent</a>()</td><td><a class="doxy_el" href="$(doxygen_html_classDGD_1_1channelbuf)">DGD::channelbuf</a></td><td></td></tr><tr bgcolor="#f0f0f0"><td><a class="doxy_el" href="$(doxygen_html_classDGD_1_1channelbuf)#s6s2">DefaultBufferSize</a> enum value</td><td><a class="doxy_el" href="$(doxygen_html_classDGD_1_1channelbuf)">DGD::channelbuf</a></td><td></td></tr><tr bgcolor="#f0f0f0"><td><a class="doxy_el" href="$(doxygen_html_classDGD_1_1channelbuf)#s6s5">DefaultIndentStep</a> enum value</td><td><a class="doxy_el" href="$(doxygen_html_classDGD_1_1channelbuf)">DGD::channelbuf</a></td><td></td></tr><tr bgcolor="#f0f0f0"><td><a class="doxy_el" href="$(doxygen_html_classDGD_1_1channelbuf)#s6s3">DefaultMaxWidth</a> enum value</td><td><a class="doxy_el" href="$(doxygen_html_classDGD_1_1channelbuf)">DGD::channelbuf</a></td><td></td></tr><tr bgcolor="#f0f0f0"><td><a class="doxy_el" href="$(doxygen_html_classDGD_1_1channelbuf)#s6s4">DefaultMinWidth</a> enum value</td><td><a class="doxy_el" href="$(doxygen_html_classDGD_1_1channelbuf)">DGD::channelbuf</a></td><td></td></tr><tr bgcolor="#f0f0f0"><td><a class="doxy_el" href="$(doxygen_html_classDGD_1_1channelbuf)#s6">DefaultValues</a> enum name</td><td><a class="doxy_el" href="$(doxygen_html_classDGD_1_1channelbuf)">DGD::channelbuf</a></td><td></td></tr><tr bgcolor="#f0f0f0"><td><a class="doxy_el" href="$(doxygen_html_classDGD_1_1channelbuf)#b3">find_one_of</a>(const char_type *s, const unsigned int n, const char_type *c_set) const</td><td><a class="doxy_el" href="$(doxygen_html_classDGD_1_1channelbuf)">DGD::channelbuf</a></td><td><code> [protected]</code></td></tr><tr bgcolor="#f0f0f0"><td><a class="doxy_el" href="$(doxygen_html_classDGD_1_1channelbuf)#a9">incr_indent</a>()</td><td><a class="doxy_el" href="$(doxygen_html_classDGD_1_1channelbuf)">DGD::channelbuf</a></td><td></td></tr><tr bgcolor="#f0f0f0"><td><a class="doxy_el" href="$(doxygen_html_classDGD_1_1channelbuf)#a11">indent</a>(const unsigned int)</td><td><a class="doxy_el" href="$(doxygen_html_classDGD_1_1channelbuf)">DGD::channelbuf</a></td><td></td></tr><tr bgcolor="#f0f0f0"><td><a class="doxy_el" href="$(doxygen_html_classDGD_1_1channelbuf)#a12">indent</a>() const</td><td><a class="doxy_el" href="$(doxygen_html_classDGD_1_1channelbuf)">DGD::channelbuf</a></td><td></td></tr><tr bgcolor="#f0f0f0"><td><a class="doxy_el" href="$(doxygen_html_classDGD_1_1channelbuf)#a7">indent_step</a>(unsigned int step)</td><td><a class="doxy_el" href="$(doxygen_html_classDGD_1_1channelbuf)">DGD::channelbuf</a></td><td></td></tr><tr bgcolor="#f0f0f0"><td><a class="doxy_el" href="$(doxygen_html_classDGD_1_1channelbuf)#a8">indent_step</a>() const</td><td><a class="doxy_el" href="$(doxygen_html_classDGD_1_1channelbuf)">DGD::channelbuf</a></td><td></td></tr><tr bgcolor="#f0f0f0"><td><a class="doxy_el" href="$(doxygen_html_classDGD_1_1channelbuf)#b4">is_dos_eol</a>(const char_type *p) const</td><td><a class="doxy_el" href="$(doxygen_html_classDGD_1_1channelbuf)">DGD::channelbuf</a></td><td><code> [protected]</code></td></tr><tr bgcolor="#f0f0f0"><td><a class="doxy_el" href="$(doxygen_html_classDGD_1_1channelbuf)#a5">line</a>() const</td><td><a class="doxy_el" href="$(doxygen_html_classDGD_1_1channelbuf)">DGD::channelbuf</a></td><td></td></tr><tr bgcolor="#f0f0f0"><td><a class="doxy_el" href="$(doxygen_html_classDGD_1_1channelbuf)#o0">m_assoc</a></td><td><a class="doxy_el" href="$(doxygen_html_classDGD_1_1channelbuf)">DGD::channelbuf</a></td><td><code> [private]</code></td></tr><tr bgcolor="#f0f0f0"><td><a class="doxy_el" href="$(doxygen_html_classDGD_1_1channelbuf)#o11">m_bytes</a></td><td><a class="doxy_el" href="$(doxygen_html_classDGD_1_1channelbuf)">DGD::channelbuf</a></td><td><code> [private]</code></td></tr><tr bgcolor="#f0f0f0"><td><a class="doxy_el" href="$(doxygen_html_classDGD_1_1channelbuf)#o2">m_column</a></td><td><a class="doxy_el" href="$(doxygen_html_classDGD_1_1channelbuf)">DGD::channelbuf</a></td><td><code> [private]</code></td></tr><tr bgcolor="#f0f0f0"><td><a class="doxy_el" href="$(doxygen_html_classDGD_1_1channelbuf)#o3">m_indent</a></td><td><a class="doxy_el" href="$(doxygen_html_classDGD_1_1channelbuf)">DGD::channelbuf</a></td><td><code> [private]</code></td></tr><tr bgcolor="#f0f0f0"><td><a class="doxy_el" href="$(doxygen_html_classDGD_1_1channelbuf)#o4">m_indent_step</a></td><td><a class="doxy_el" href="$(doxygen_html_classDGD_1_1channelbuf)">DGD::channelbuf</a></td><td><code> [private]</code></td></tr><tr bgcolor="#f0f0f0"><td><a class="doxy_el" href="$(doxygen_html_classDGD_1_1channelbuf)#o1">m_line</a></td><td><a class="doxy_el" href="$(doxygen_html_classDGD_1_1channelbuf)">DGD::channelbuf</a></td><td><code> [private]</code></td></tr><tr bgcolor="#f0f0f0"><td><a class="doxy_el" href="$(doxygen_html_classDGD_1_1channelbuf)#o6">m_max_width</a></td><td><a class="doxy_el" href="$(doxygen_html_classDGD_1_1channelbuf)">DGD::channelbuf</a></td><td><code> [private]</code></td></tr><tr bgcolor="#f0f0f0"><td><a class="doxy_el" href="$(doxygen_html_classDGD_1_1channelbuf)#o5">m_min_width</a></td><td><a class="doxy_el" href="$(doxygen_html_classDGD_1_1channelbuf)">DGD::channelbuf</a></td><td><code> [private]</code></td></tr><tr bgcolor="#f0f0f0"><td><a class="doxy_el" href="$(doxygen_html_classDGD_1_1channelbuf)#o10">m_spaces</a></td><td><a class="doxy_el" href="$(doxygen_html_classDGD_1_1channelbuf)">DGD::channelbuf</a></td><td><code> [private]</code></td></tr><tr bgcolor="#f0f0f0"><td><a class="doxy_el" href="$(doxygen_html_classDGD_1_1channelbuf)#o9">m_word_pos</a></td><td><a class="doxy_el" href="$(doxygen_html_classDGD_1_1channelbuf)">DGD::channelbuf</a></td><td><code> [private]</code></td></tr><tr bgcolor="#f0f0f0"><td><a class="doxy_el" href="$(doxygen_html_classDGD_1_1channelbuf)#o8">m_word_wrap</a></td><td><a class="doxy_el" href="$(doxygen_html_classDGD_1_1channelbuf)">DGD::channelbuf</a></td><td><code> [private]</code></td></tr><tr bgcolor="#f0f0f0"><td><a class="doxy_el" href="$(doxygen_html_classDGD_1_1channelbuf)#o7">m_wrap</a></td><td><a class="doxy_el" href="$(doxygen_html_classDGD_1_1channelbuf)">DGD::channelbuf</a></td><td><code> [private]</code></td></tr><tr bgcolor="#f0f0f0"><td><a class="doxy_el" href="$(doxygen_html_classDGD_1_1channelbuf)#a15">max_width</a>(unsigned int width)</td><td><a class="doxy_el" href="$(doxygen_html_classDGD_1_1channelbuf)">DGD::channelbuf</a></td><td></td></tr><tr bgcolor="#f0f0f0"><td><a class="doxy_el" href="$(doxygen_html_classDGD_1_1channelbuf)#a16">max_width</a>() const</td><td><a class="doxy_el" href="$(doxygen_html_classDGD_1_1channelbuf)">DGD::channelbuf</a></td><td></td></tr><tr bgcolor="#f0f0f0"><td><a class="doxy_el" href="$(doxygen_html_classDGD_1_1channelbuf)#a13">min_width</a>(unsigned int width)</td><td><a class="doxy_el" href="$(doxygen_html_classDGD_1_1channelbuf)">DGD::channelbuf</a></td><td></td></tr><tr bgcolor="#f0f0f0"><td><a class="doxy_el" href="$(doxygen_html_classDGD_1_1channelbuf)#a14">min_width</a>() const</td><td><a class="doxy_el" href="$(doxygen_html_classDGD_1_1channelbuf)">DGD::channelbuf</a></td><td></td></tr><tr bgcolor="#f0f0f0"><td><a class="doxy_el" href="$(doxygen_html_classDGD_1_1channelbuf)#z0_2">overflow</a>(int_type=traits_type::eof())</td><td><a class="doxy_el" href="$(doxygen_html_classDGD_1_1channelbuf)">DGD::channelbuf</a></td><td><code> [protected, virtual]</code></td></tr><tr bgcolor="#f0f0f0"><td><a class="doxy_el" href="$(doxygen_html_classDGD_1_1channelbuf)#s0">Parent</a> typedef</td><td><a class="doxy_el" href="$(doxygen_html_classDGD_1_1channelbuf)">DGD::channelbuf</a></td><td></td></tr><tr bgcolor="#f0f0f0"><td><a class="doxy_el" href="$(doxygen_html_classDGD_1_1channelbuf)#a23">position</a>() const</td><td><a class="doxy_el" href="$(doxygen_html_classDGD_1_1channelbuf)">DGD::channelbuf</a></td><td></td></tr><tr bgcolor="#f0f0f0"><td><a class="doxy_el" href="$(doxygen_html_classDGD_1_1channelbuf)#s1">position_type</a> typedef</td><td><a class="doxy_el" href="$(doxygen_html_classDGD_1_1channelbuf)">DGD::channelbuf</a></td><td></td></tr><tr bgcolor="#f0f0f0"><td><a class="doxy_el" href="$(doxygen_html_classDGD_1_1channelbuf)#b2">post_process</a>()</td><td><a class="doxy_el" href="$(doxygen_html_classDGD_1_1channelbuf)">DGD::channelbuf</a></td><td><code> [protected, virtual]</code></td></tr><tr bgcolor="#f0f0f0"><td><a class="doxy_el" href="$(doxygen_html_classDGD_1_1channelbuf)#b0">propagate</a>(const char_type *begin, const char_type *end)</td><td><a class="doxy_el" href="$(doxygen_html_classDGD_1_1channelbuf)">DGD::channelbuf</a></td><td><code> [protected, virtual]</code></td></tr><tr bgcolor="#f0f0f0"><td><a class="doxy_el" href="$(doxygen_html_classDGD_1_1channelbuf)#b1">propagate</a>(const char_type ch, std::streamsize size)</td><td><a class="doxy_el" href="$(doxygen_html_classDGD_1_1channelbuf)">DGD::channelbuf</a></td><td><code> [protected, virtual]</code></td></tr><tr bgcolor="#f0f0f0"><td><a class="doxy_el" href="$(doxygen_html_classDGD_1_1channelbuf)#z0_0">setbuf</a>(char_type *, std::streamsize)</td><td><a class="doxy_el" href="$(doxygen_html_classDGD_1_1channelbuf)">DGD::channelbuf</a></td><td><code> [protected, virtual]</code></td></tr><tr bgcolor="#f0f0f0"><td><a class="doxy_el" href="$(doxygen_html_classDGD_1_1channelbuf)#a21">space_chars</a>(const char *spc=&quot;\t&quot;)</td><td><a class="doxy_el" href="$(doxygen_html_classDGD_1_1channelbuf)">DGD::channelbuf</a></td><td></td></tr><tr bgcolor="#f0f0f0"><td><a class="doxy_el" href="$(doxygen_html_classDGD_1_1channelbuf)#a22">space_chars</a>() const</td><td><a class="doxy_el" href="$(doxygen_html_classDGD_1_1channelbuf)">DGD::channelbuf</a></td><td></td></tr><tr bgcolor="#f0f0f0"><td><a class="doxy_el" href="$(doxygen_html_classDGD_1_1channelbuf)#z0_1">sync</a>()</td><td><a class="doxy_el" href="$(doxygen_html_classDGD_1_1channelbuf)">DGD::channelbuf</a></td><td><code> [protected, virtual]</code></td></tr><tr bgcolor="#f0f0f0"><td><a class="doxy_el" href="$(doxygen_html_classDGD_1_1channelbuf)#a19">word_wrap</a>(bool allow)</td><td><a class="doxy_el" href="$(doxygen_html_classDGD_1_1channelbuf)">DGD::channelbuf</a></td><td></td></tr><tr bgcolor="#f0f0f0"><td><a class="doxy_el" href="$(doxygen_html_classDGD_1_1channelbuf)#a20">word_wrap</a>() const</td><td><a class="doxy_el" href="$(doxygen_html_classDGD_1_1channelbuf)">DGD::channelbuf</a></td><td></td></tr><tr bgcolor="#f0f0f0"><td><a class="doxy_el" href="$(doxygen_html_classDGD_1_1channelbuf)#a17">wrap</a>(bool allow)</td><td><a class="doxy_el" href="$(doxygen_html_classDGD_1_1channelbuf)">DGD::channelbuf</a></td><td></td></tr><tr bgcolor="#f0f0f0"><td><a class="doxy_el" href="$(doxygen_html_classDGD_1_1channelbuf)#a18">wrap</a>() const</td><td><a class="doxy_el" href="$(doxygen_html_classDGD_1_1channelbuf)">DGD::channelbuf</a></td><td></td></tr><tr bgcolor="#f0f0f0"><td><a class="doxy_el" href="$(doxygen_html_classDGD_1_1channelbuf)#a1">~channelbuf</a>()</td><td><a class="doxy_el" href="$(doxygen_html_classDGD_1_1channelbuf)">DGD::channelbuf</a></td><td></td></tr></table>
<hr>
<address style="align: right;"><small>Generated on Mon Dec 9 18:30:03 2002 for Depression Glass Debug Library by <a href="http://www.doxygen.org/index.html"> <img align="middle" alt="doxygen" border=0 height=53 src="$(doxygen)" width=110></a>1.2.17 </small></address>
</content>

<content name="doxygen_html_classDGD_1_1channelbuf" format="text/html">
<wmmeta name="title" value="DGD::channelbuf class Reference" />
<h1>DGD::channelbuf Class Reference</h1>
Simple formatting std::streambuf. <a href="#_details">More...</a>
<p><code>#include &lt;<a class="doxy_el" href="$(doxygen_html_dgChannelBuf_8h-source)">dgChannelBuf.h</a>&gt;</code>
<p> Inheritance diagram for DGD::channelbuf:
<p><center><img alt="Inheritance graph" border=0 src="$(classDGD_1_1channelbuf__inherit__graph)" usemap="#DGD_1_1channelbuf__inherit__map"></center><map name="DGD_1_1channelbuf__inherit__map"><area alt="" coords="3,66,104,85" href="$(doxygen_html_classDGD_1_1funnelbuf)" shape="rect"></map><center><font size=2>[<a href="$(doxygen_html_graph_legend)">legend</a>]</font></center><a href="$(doxygen_html_classDGD_1_1channelbuf-members)">List of all members.</a>
<h2>Public Types</h2>
<ul><li>typedef std::streambuf <a class="doxy_el" href="$(doxygen_html_classDGD_1_1channelbuf)#s0">Parent</a><li>typedef std::pair&lt; unsigned,<br> unsigned &gt; <a class="doxy_el" href="$(doxygen_html_classDGD_1_1channelbuf)#s1">position_type</a><li>enum <a class="doxy_el" href="$(doxygen_html_classDGD_1_1channelbuf)#s6">DefaultValues</a> { <a class="doxy_el" href="$(doxygen_html_classDGD_1_1channelbuf)#s6s2">DefaultBufferSize</a> = 100, <a class="doxy_el" href="$(doxygen_html_classDGD_1_1channelbuf)#s6s3">DefaultMaxWidth</a> = 79, <a class="doxy_el" href="$(doxygen_html_classDGD_1_1channelbuf)#s6s4">DefaultMinWidth</a> = 20, <a class="doxy_el" href="$(doxygen_html_classDGD_1_1channelbuf)#s6s5">DefaultIndentStep</a> = 8 } </ul>
<h2>Public Methods</h2>
<ul><li><a class="doxy_el" href="$(doxygen_html_classDGD_1_1channelbuf)#a0">channelbuf</a> () <dl class="doxy_el"><dd><font size="-1"><em>Default constructor.</em> <a href="#a0"></a><em><br><br></em></font></dl><li><a class="doxy_el" href="$(doxygen_html_classDGD_1_1channelbuf)#a1">~channelbuf</a> () <dl class="doxy_el"><dd><font size="-1"><em>Destructor.</em> <a href="#a1"></a><em><br><br></em></font></dl><li>void <a class="doxy_el" href="$(doxygen_html_classDGD_1_1channelbuf)#a2">assoc</a> (std::ostream *) <dl class="doxy_el"><dd><font size="-1"><em>Append the given stream to the association list.</em> <a href="#a2"></a><em><br><br></em></font></dl><li>bool <a class="doxy_el" href="$(doxygen_html_classDGD_1_1channelbuf)#a3">dassoc</a> (std::ostream *) <dl class="doxy_el"><dd><font size="-1"><em>Remove the specified stream from the association list.</em> <a href="#a3"></a><em><br><br></em></font></dl><li>void <a class="doxy_el" href="$(doxygen_html_classDGD_1_1channelbuf)#a4">dassoc</a> () <dl class="doxy_el"><dd><font size="-1"><em>Clean the association list.</em> <a href="#a4"></a><em><br><br></em></font></dl><li>unsigned int <a class="doxy_el" href="$(doxygen_html_classDGD_1_1channelbuf)#a5">line</a> () const <dl class="doxy_el"><dd><font size="-1"><em>Return current channel line.</em> <a href="#a5"></a><em><br><br></em></font></dl><li>unsigned int <a class="doxy_el" href="$(doxygen_html_classDGD_1_1channelbuf)#a6">column</a> () const <dl class="doxy_el"><dd><font size="-1"><em>Return current channel column.</em> <a href="#a6"></a><em><br><br></em></font></dl><li>void <a class="doxy_el" href="$(doxygen_html_classDGD_1_1channelbuf)#a7">indent_step</a> (unsigned int step) <dl class="doxy_el"><dd><font size="-1"><em>Change indentation step.</em> <a href="#a7"></a><em><br><br></em></font></dl><li>unsigned int <a class="doxy_el" href="$(doxygen_html_classDGD_1_1channelbuf)#a8">indent_step</a> () const <dl class="doxy_el"><dd><font size="-1"><em>Return indentation step value.</em> <a href="#a8"></a><em><br><br></em></font></dl><li>void <a class="doxy_el" href="$(doxygen_html_classDGD_1_1channelbuf)#a9">incr_indent</a> () <dl class="doxy_el"><dd><font size="-1"><em>Increment indentation level by value of indentation step.</em> <a href="#a9"></a><em><br><br></em></font></dl><li>void <a class="doxy_el" href="$(doxygen_html_classDGD_1_1channelbuf)#a10">decr_indent</a> () <dl class="doxy_el"><dd><font size="-1"><em>Decrement indentation level by value of indentation step.</em> <a href="#a10"></a><em><br><br></em></font></dl><li>void <a class="doxy_el" href="$(doxygen_html_classDGD_1_1channelbuf)#a11">indent</a> (const unsigned int) <dl class="doxy_el"><dd><font size="-1"><em>Change indentation level directly.</em> <a href="#a11"></a><em><br><br></em></font></dl><li>unsigned int <a class="doxy_el" href="$(doxygen_html_classDGD_1_1channelbuf)#a12">indent</a> () const <dl class="doxy_el"><dd><font size="-1"><em>Return indentation level value.</em> <a href="#a12"></a><em><br><br></em></font></dl><li>void <a class="doxy_el" href="$(doxygen_html_classDGD_1_1channelbuf)#a13">min_width</a> (unsigned int width) <dl class="doxy_el"><dd><font size="-1"><em>Change minimum line width.</em> <a href="#a13"></a><em><br><br></em></font></dl><li>unsigned int <a class="doxy_el" href="$(doxygen_html_classDGD_1_1channelbuf)#a14">min_width</a> () const <dl class="doxy_el"><dd><font size="-1"><em>Return minimum line width value.</em> <a href="#a14"></a><em><br><br></em></font></dl><li>void <a class="doxy_el" href="$(doxygen_html_classDGD_1_1channelbuf)#a15">max_width</a> (unsigned int width) <dl class="doxy_el"><dd><font size="-1"><em>Change maximum line width.</em> <a href="#a15"></a><em><br><br></em></font></dl><li>unsigned int <a class="doxy_el" href="$(doxygen_html_classDGD_1_1channelbuf)#a16">max_width</a> () const <dl class="doxy_el"><dd><font size="-1"><em>Return maximum line width value.</em> <a href="#a16"></a><em><br><br></em></font></dl><li>void <a class="doxy_el" href="$(doxygen_html_classDGD_1_1channelbuf)#a17">wrap</a> (bool allow) <dl class="doxy_el"><dd><font size="-1"><em>Set character wrapping.</em> <a href="#a17"></a><em><br><br></em></font></dl><li>bool <a class="doxy_el" href="$(doxygen_html_classDGD_1_1channelbuf)#a18">wrap</a> () const <dl class="doxy_el"><dd><font size="-1"><em>Return character wrapping state.</em> <a href="#a18"></a><em><br><br></em></font></dl><li>void <a class="doxy_el" href="$(doxygen_html_classDGD_1_1channelbuf)#a19">word_wrap</a> (bool allow) <dl class="doxy_el"><dd><font size="-1"><em>Set word wrapping.</em> <a href="#a19"></a><em><br><br></em></font></dl><li>bool <a class="doxy_el" href="$(doxygen_html_classDGD_1_1channelbuf)#a20">word_wrap</a> () const <dl class="doxy_el"><dd><font size="-1"><em>Return word wrapping state.</em> <a href="#a20"></a><em><br><br></em></font></dl><li>void <a class="doxy_el" href="$(doxygen_html_classDGD_1_1channelbuf)#a21">space_chars</a> (const char *spc=&quot;\t&quot;) <dl class="doxy_el"><dd><font size="-1"><em>Set space character set.</em> <a href="#a21"></a><em><br><br></em></font></dl><li>std::string <a class="doxy_el" href="$(doxygen_html_classDGD_1_1channelbuf)#a22">space_chars</a> () const <dl class="doxy_el"><dd><font size="-1"><em>Return space characters set.</em> <a href="#a22"></a><em><br><br></em></font></dl><li><a class="doxy_el" href="$(doxygen_html_classDGD_1_1channelbuf)#s1">position_type</a> <a class="doxy_el" href="$(doxygen_html_classDGD_1_1channelbuf)#a23">position</a> () const <dl class="doxy_el"><dd><font size="-1"><em>Return current channel line and column.</em> <a href="#a23"></a><em><br><br></em></font></dl><li>unsigned long <a class="doxy_el" href="$(doxygen_html_classDGD_1_1channelbuf)#a24">bytes_written</a> () const <dl class="doxy_el"><dd><font size="-1"><em>Return amount of bytes written to the output stream.</em> <a href="#a24"></a><em><br><br></em></font></dl></ul>
<h2>Protected Types</h2>
<ul><li>typedef std::list&lt; std::ostream * &gt; <a class="doxy_el" href="$(doxygen_html_classDGD_1_1channelbuf)#t0">Assoc_list</a></ul>
<h2>Protected Methods</h2>
<ul><li>virtual void <a class="doxy_el" href="$(doxygen_html_classDGD_1_1channelbuf)#b0">propagate</a> (const char_type *begin, const char_type *end) <dl class="doxy_el"><dd><font size="-1"><em>Propagate character string to associated streams.</em> <a href="#b0"></a><em><br><br></em></font></dl><li>virtual void <a class="doxy_el" href="$(doxygen_html_classDGD_1_1channelbuf)#b1">propagate</a> (const char_type ch, std::streamsize size) <dl class="doxy_el"><dd><font size="-1"><em>Propagate given character to associated streams.</em> <a href="#b1"></a><em><br><br></em></font></dl><li>virtual void <a class="doxy_el" href="$(doxygen_html_classDGD_1_1channelbuf)#b2">post_process</a> () <dl class="doxy_el"><dd><font size="-1"><em>This is a virtual callback.</em> <a href="#b2"></a><em><br><br></em></font></dl><li>char_type * <a class="doxy_el" href="$(doxygen_html_classDGD_1_1channelbuf)#b3">find_one_of</a> (const char_type *s, const unsigned int n, const char_type *c_set) const <dl class="doxy_el"><dd><font size="-1"><em>strchr() equivalent.</em> <a href="#b3"></a><em><br><br></em></font></dl><li>bool <a class="doxy_el" href="$(doxygen_html_classDGD_1_1channelbuf)#b4">is_dos_eol</a> (const char_type *p) const </ul>
<table><tr><td colspan=2><div class="doxy_groupHeader"></div></td></tr><tr><td><ul><li>virtual <a class="doxy_el" href="$(doxygen_html_classDGD_1_1channelbuf)#s0">Parent</a> * <a class="doxy_el" href="$(doxygen_html_classDGD_1_1channelbuf)#z0_0">setbuf</a> (char_type *, std::streamsize) <dl class="doxy_el"><dd><font size="-1"><em>Sets or resets channelbuf internal buffer.</em> <a href="#z0_0"></a><em><br><br></em></font></dl><li>virtual int <a class="doxy_el" href="$(doxygen_html_classDGD_1_1channelbuf)#z0_1">sync</a> () <dl class="doxy_el"><dd><font size="-1"><em>Synchronizes (i.e.</em> <a href="#z0_1"></a><em><br><br></em></font></dl><li>virtual int_type <a class="doxy_el" href="$(doxygen_html_classDGD_1_1channelbuf)#z0_2">overflow</a> (int_type=traits_type::eof()) <dl class="doxy_el"><dd><font size="-1"><em>Called when there is no write position.</em> <a href="#z0_2"></a><em><br><br></em></font></dl></ul><h2>Private Attributes</h2><ul><li><a class="doxy_el" href="$(doxygen_html_classDGD_1_1channelbuf)#t0">Assoc_list</a> <a class="doxy_el" href="$(doxygen_html_classDGD_1_1channelbuf)#o0">m_assoc</a><li>unsigned int <a class="doxy_el" href="$(doxygen_html_classDGD_1_1channelbuf)#o1">m_line</a><li>unsigned int <a class="doxy_el" href="$(doxygen_html_classDGD_1_1channelbuf)#o2">m_column</a><li>unsigned int <a class="doxy_el" href="$(doxygen_html_classDGD_1_1channelbuf)#o3">m_indent</a><li>unsigned int <a class="doxy_el" href="$(doxygen_html_classDGD_1_1channelbuf)#o4">m_indent_step</a><li>unsigned int <a class="doxy_el" href="$(doxygen_html_classDGD_1_1channelbuf)#o5">m_min_width</a><li>unsigned int <a class="doxy_el" href="$(doxygen_html_classDGD_1_1channelbuf)#o6">m_max_width</a><li>bool <a class="doxy_el" href="$(doxygen_html_classDGD_1_1channelbuf)#o7">m_wrap</a><li>bool <a class="doxy_el" href="$(doxygen_html_classDGD_1_1channelbuf)#o8">m_word_wrap</a><li>const char_type * <a class="doxy_el" href="$(doxygen_html_classDGD_1_1channelbuf)#o9">m_word_pos</a><li>std::string <a class="doxy_el" href="$(doxygen_html_classDGD_1_1channelbuf)#o10">m_spaces</a><li>unsigned long <a class="doxy_el" href="$(doxygen_html_classDGD_1_1channelbuf)#o11">m_bytes</a></ul><hr><a name="_details"></a><h2>Detailed Description</h2> Simple formatting std::streambuf. <p> This is a core class of <a class="doxy_el" href="$(doxygen_html_namespaceDGD)">DGD</a>. Here actual output formatting takes place. Please refer to <a class="doxy_el" href="$(doxygen_html_classDGD_1_1channel)">DGD::channel</a> for general explanation on the channel formatting capabilities. The discussion below is focused on technical aspects of the formatting. <p> DGD::channelbuf has it's own memory buffer which can be controlled by <a class="doxy_el" href="$(doxygen_html_classDGD_1_1channelbuf)#z0_0">channelbuf::setbuf</a>(char_type*,std::streamsize) method. All channel input (see <a class="doxy_el" href="$(doxygen_html_classDGD_1_1channel)">DGD::channel</a> for the terminology) formatted by std::ostream operators is put into it. DGD::channelbuf scans the buffer (see <a class="doxy_el" href="$(doxygen_html_classDGD_1_1channelbuf)#z0_2">channelbuf::overflow</a>(int_type)) and makes the additional formatting. <p> DGD::channelbuf acts as a stream multiplexor. It maintains a list of <a class="doxy_el" href="$(doxygen_html_namespaceDGD)#a5">DGD::stream</a> objects which are &quot;associated&quot; with this channel buffer (see <a class="doxy_el" href="$(doxygen_html_classDGD_1_1channelbuf)#a2">channelbuf::assoc</a>(std::ostream*)). If the list is empty no output is produced. The channelbuf output is copied to all objects on the list when it is ready. <p> std::ostream object can be associated with DGD::channelbuf by calling <a class="doxy_el" href="$(doxygen_html_classDGD_1_1channelbuf)#a2">channelbuf::assoc</a>(std::ostream*) method, but it is more appropriate to use <a class="doxy_el" href="$(doxygen_html_namespaceDGD)#a6">DGD::assoc</a>(std::ostream*,channel&amp;) or <a class="doxy_el" href="$(doxygen_html_namespaceDGD)#a8">assoc</a>(std::ostream*,const std::string&amp;) functions. <p> Since channelbuf usually can't figure out whether its input contains a complete line or only part of it, channelbuf does not flush the entire buffer, but only part of it. To keep track of current state of the output it has m_line and m_column variables which can be queried using <a class="doxy_el" href="$(doxygen_html_classDGD_1_1channelbuf)#a23">channelbuf::position</a>() method. <p><hr><h2>Member Typedef Documentation</h2><a doxytag="DGD::channelbuf::Parent" name="s0"></a><p><table border=0 cellpadding=2 cellspacing=0 width="100%"><tr><td class="doxy_md"><table border=0 cellpadding=0 cellspacing=0><tr><td class="doxy_md" nowrap valign="top"> typedef std::streambuf DGD::channelbuf::Parent </td></tr></table></td></tr></table><table border=0 cellpadding=0 cellspacing=5><tr><td> &nbsp; </td><td><p></td></tr></table><a doxytag="DGD::channelbuf::position_type" name="s1"></a><p><table border=0 cellpadding=2 cellspacing=0 width="100%"><tr><td class="doxy_md"><table border=0 cellpadding=0 cellspacing=0><tr><td class="doxy_md" nowrap valign="top"> typedef std::pair&lt;unsigned,unsigned&gt; DGD::channelbuf::position_type </td></tr></table></td></tr></table><table border=0 cellpadding=0 cellspacing=5><tr><td> &nbsp; </td><td><p></td></tr></table><a doxytag="DGD::channelbuf::Assoc_list" name="t0"></a><p><table border=0 cellpadding=2 cellspacing=0 width="100%"><tr><td class="doxy_md"><table border=0 cellpadding=0 cellspacing=0><tr><td class="doxy_md" nowrap valign="top"> typedef std::list&lt; std::ostream* &gt; DGD::channelbuf::Assoc_list<code> [protected]</code></td></tr></table></td></tr></table><table border=0 cellpadding=0 cellspacing=5><tr><td> &nbsp; </td><td><p></td></tr></table><hr><h2>Member Enumeration Documentation</h2><a doxytag="DGD::channelbuf::DefaultValues" name="s6"></a><p><table border=0 cellpadding=2 cellspacing=0 width="100%"><tr><td class="doxy_md"><table border=0 cellpadding=0 cellspacing=0><tr><td class="doxy_md" nowrap valign="top"> enum DGD::channelbuf::DefaultValues </td></tr></table></td></tr></table><table border=0 cellpadding=0 cellspacing=5><tr><td> &nbsp; </td><td><p><dl compact><dt><b>Enumeration values: </b><dd><table border=0 cellpadding=0 cellspacing=2><tr><td valign="top"><em><a doxytag="DefaultBufferSize" name="s6s2"></a><em>DefaultBufferSize</em></em>&nbsp;</td><td></td></tr><tr><td valign="top"><em><a doxytag="DefaultMaxWidth" name="s6s3"></a><em>DefaultMaxWidth</em></em>&nbsp;</td><td></td></tr><tr><td valign="top"><em><a doxytag="DefaultMinWidth" name="s6s4"></a><em>DefaultMinWidth</em></em>&nbsp;</td><td></td></tr><tr><td valign="top"><em><a doxytag="DefaultIndentStep" name="s6s5"></a><em>DefaultIndentStep</em></em>&nbsp;</td><td></td></tr></table></dl></td></tr></table><hr><h2>Constructor &amp; Destructor Documentation</h2><a doxytag="DGD::channelbuf::channelbuf" name="a0"></a><p><table border=0 cellpadding=2 cellspacing=0 width="100%"><tr><td class="doxy_md"><table border=0 cellpadding=0 cellspacing=0><tr><td class="doxy_md" nowrap valign="top"> DGD::channelbuf::channelbuf </td><td class="doxy_md" valign="top">(&nbsp;</td><td class="doxy_mdname1" nowrap valign="top">&nbsp; </td><td class="doxy_md" valign="top">)&nbsp;</td><td class="doxy_md" nowrap></td></tr></table></td></tr></table><table border=0 cellpadding=0 cellspacing=5><tr><td> &nbsp; </td><td><p> Default constructor. <p></td></tr></table><a doxytag="DGD::channelbuf::~channelbuf" name="a1"></a><p><table border=0 cellpadding=2 cellspacing=0 width="100%"><tr><td class="doxy_md"><table border=0 cellpadding=0 cellspacing=0><tr><td class="doxy_md" nowrap valign="top"> DGD::channelbuf::~channelbuf </td><td class="doxy_md" valign="top">(&nbsp;</td><td class="doxy_mdname1" nowrap valign="top">&nbsp; </td><td class="doxy_md" valign="top">)&nbsp;</td><td class="doxy_md" nowrap></td></tr></table></td></tr></table><table border=0 cellpadding=0 cellspacing=5><tr><td> &nbsp; </td><td><p> Destructor. <p> Note that channelbuf tries to sync itself before being destructed. </td></tr></table><hr><h2>Member Function Documentation</h2><a doxytag="DGD::channelbuf::setbuf" name="z0_0"></a><p><table border=0 cellpadding=2 cellspacing=0 width="100%"><tr><td class="doxy_md"><table border=0 cellpadding=0 cellspacing=0><tr><td class="doxy_md" nowrap valign="top"><a class="doxy_el" href="$(doxygen_html_classDGD_1_1channelbuf)#s0">channelbuf::Parent</a> * DGD::channelbuf::setbuf </td><td class="doxy_md" valign="top">(&nbsp;</td><td class="doxy_md" nowrap valign="top">char_type *&nbsp;</td><td class="doxy_mdname" nowrap>&nbsp; <em>ptr</em>, </td></tr><tr><td></td><td></td><td class="doxy_md" nowrap>std::streamsize&nbsp;</td><td class="doxy_mdname" nowrap>&nbsp; <em>size</em></td></tr><tr><td></td><td class="doxy_md">)&nbsp;</td><td class="doxy_md" colspan=2><code> [protected, virtual]</code></td></tr></table></td></tr></table><table border=0 cellpadding=0 cellspacing=5><tr><td> &nbsp; </td><td><p> Sets or resets channelbuf internal buffer. <p><dl compact><dt><b>Parameters: </b><dd><table border=0 cellpadding=0 cellspacing=2><tr><td valign="top"><em>ptr</em>&nbsp;</td><td> - if NULL causes automatic buffer allocation. </td></tr><tr><td valign="top"><em>size</em>&nbsp;</td><td> - if zero DefaultBufferSize is used. Otherwise defines the allocated buffer size. </td></tr></table></dl></td></tr></table><a doxytag="DGD::channelbuf::sync" name="z0_1"></a><p><table border=0 cellpadding=2 cellspacing=0 width="100%"><tr><td class="doxy_md"><table border=0 cellpadding=0 cellspacing=0><tr><td class="doxy_md" nowrap valign="top"> int DGD::channelbuf::sync </td><td class="doxy_md" valign="top">(&nbsp;</td><td class="doxy_mdname1" nowrap valign="top">&nbsp; </td><td class="doxy_md" valign="top">)&nbsp;</td><td class="doxy_md" nowrap><code> [protected, virtual]</code></td></tr></table></td></tr></table><table border=0 cellpadding=0 cellspacing=5><tr><td> &nbsp; </td><td><p> Synchronizes (i.e. <p> flushes) the buffer. <dl compact><dt><b>Returns :</b><dd> always 0 </dl></td></tr></table><a doxytag="DGD::channelbuf::overflow" name="z0_2"></a><p><table border=0 cellpadding=2 cellspacing=0 width="100%"><tr><td class="doxy_md"><table border=0 cellpadding=0 cellspacing=0><tr><td class="doxy_md" nowrap valign="top"> channelbuf::int_type DGD::channelbuf::overflow </td><td class="doxy_md" valign="top">(&nbsp;</td><td class="doxy_md" nowrap valign="top">int_type&nbsp;</td><td class="doxy_mdname1" nowrap valign="top">&nbsp; <em>ch</em> = traits_type::eof() </td><td class="doxy_md" valign="top">)&nbsp;</td><td class="doxy_md" nowrap><code> [protected, virtual]</code></td></tr></table></td></tr></table><table border=0 cellpadding=0 cellspacing=5><tr><td> &nbsp; </td><td><p> Called when there is no write position. <p> This function overrides the same function in std::streambuf. This function is called every time there is no enough space in the internal buffer. <p> Once called, this function processes the content of the buffer, makes formatting decisions and then propagates the formatted output to associated streams.<dl compact><dt><b>Parameters: </b><dd><table border=0 cellpadding=0 cellspacing=2><tr><td valign="top"><em>ch</em>&nbsp;</td><td> - character which failed to be pushed into stream. could be set to char_traits::eof value to indicate empty value.</td></tr></table></dl><dl compact><dt><b>Returns :</b><dd> always 0 </dl><dl compact><dt><b>See also: </b><dd><a class="doxy_el" href="$(doxygen_html_classDGD_1_1channel)">DGD::channel</a></dl></td></tr></table><a doxytag="DGD::channelbuf::propagate" name="b0"></a><p><table border=0 cellpadding=2 cellspacing=0 width="100%"><tr><td class="doxy_md"><table border=0 cellpadding=0 cellspacing=0><tr><td class="doxy_md" nowrap valign="top"> void DGD::channelbuf::propagate </td><td class="doxy_md" valign="top">(&nbsp;</td><td class="doxy_md" nowrap valign="top">const char_type *&nbsp;</td><td class="doxy_mdname" nowrap>&nbsp; <em>begin</em>, </td></tr><tr><td></td><td></td><td class="doxy_md" nowrap>const char_type *&nbsp;</td><td class="doxy_mdname" nowrap>&nbsp; <em>end</em></td></tr><tr><td></td><td class="doxy_md">)&nbsp;</td><td class="doxy_md" colspan=2><code> [protected, virtual]</code></td></tr></table></td></tr></table><table border=0 cellpadding=0 cellspacing=5><tr><td> &nbsp; </td><td><p> Propagate character string to associated streams. <p><dl compact><dt><b>Parameters: </b><dd><table border=0 cellpadding=0 cellspacing=2><tr><td valign="top"><em>begin</em>&nbsp;</td><td> - pointer to beginning of propagated string </td></tr><tr><td valign="top"><em>end</em>&nbsp;</td><td> - pointer to the end of the propagated string (one character after the end!) </td></tr></table></dl></td></tr></table><a doxytag="DGD::channelbuf::propagate" name="b1"></a><p><table border=0 cellpadding=2 cellspacing=0 width="100%"><tr><td class="doxy_md"><table border=0 cellpadding=0 cellspacing=0><tr><td class="doxy_md" nowrap valign="top"> void DGD::channelbuf::propagate </td><td class="doxy_md" valign="top">(&nbsp;</td><td class="doxy_md" nowrap valign="top">const char_type&nbsp;</td><td class="doxy_mdname" nowrap>&nbsp; <em>ch</em>, </td></tr><tr><td></td><td></td><td class="doxy_md" nowrap>std::streamsize&nbsp;</td><td class="doxy_mdname" nowrap>&nbsp; <em>size</em></td></tr><tr><td></td><td class="doxy_md">)&nbsp;</td><td class="doxy_md" colspan=2><code> [protected, virtual]</code></td></tr></table></td></tr></table><table border=0 cellpadding=0 cellspacing=5><tr><td> &nbsp; </td><td><p> Propagate given character to associated streams. <p><dl compact><dt><b>Parameters: </b><dd><table border=0 cellpadding=0 cellspacing=2><tr><td valign="top"><em>ch</em>&nbsp;</td><td> - character to propagate </td></tr><tr><td valign="top"><em>size</em>&nbsp;</td><td> - number of duplications. </td></tr></table></dl></td></tr></table><a doxytag="DGD::channelbuf::post_process" name="b2"></a><p><table border=0 cellpadding=2 cellspacing=0 width="100%"><tr><td class="doxy_md"><table border=0 cellpadding=0 cellspacing=0><tr><td class="doxy_md" nowrap valign="top"> void DGD::channelbuf::post_process </td><td class="doxy_md" valign="top">(&nbsp;</td><td class="doxy_mdname1" nowrap valign="top">&nbsp; </td><td class="doxy_md" valign="top">)&nbsp;</td><td class="doxy_md" nowrap><code> [protected, virtual]</code></td></tr></table></td></tr></table><table border=0 cellpadding=0 cellspacing=5><tr><td> &nbsp; </td><td><p> This is a virtual callback. <p> This function is called every time <a class="doxy_el" href="$(doxygen_html_classDGD_1_1channelbuf)#z0_2">overflow</a>() or <a class="doxy_el" href="$(doxygen_html_classDGD_1_1channelbuf)#z0_1">sync</a>() finished their work, so the channelbuf is in consistent state. Subclasses can overload this function in order to add functionality. <p><dl compact><dt><b>See also: </b><dd><a class="doxy_el" href="$(doxygen_html_classDGD_1_1channelbuf)#z0_2">overflow</a>() , <a class="doxy_el" href="$(doxygen_html_classDGD_1_1channelbuf)#z0_1">sync</a>() </dl><p> Reimplemented in <a class="doxy_el" href="$(doxygen_html_classDGD_1_1funnelbuf)#c0">DGD::funnelbuf</a>. </td></tr></table><a doxytag="DGD::channelbuf::assoc" name="a2"></a><p><table border=0 cellpadding=2 cellspacing=0 width="100%"><tr><td class="doxy_md"><table border=0 cellpadding=0 cellspacing=0><tr><td class="doxy_md" nowrap valign="top"> void DGD::channelbuf::assoc </td><td class="doxy_md" valign="top">(&nbsp;</td><td class="doxy_md" nowrap valign="top">std::ostream *&nbsp;</td><td class="doxy_mdname1" nowrap valign="top">&nbsp; <em>dgs</em></td><td class="doxy_md" valign="top">)&nbsp;</td><td class="doxy_md" nowrap></td></tr></table></td></tr></table><table border=0 cellpadding=0 cellspacing=5><tr><td> &nbsp; </td><td><p> Append the given stream to the association list. <p><dl compact><dt><b>See also: </b><dd><a class="doxy_el" href="$(doxygen_html_classDGD_1_1channel)">DGD::channel</a></dl><p> Reimplemented in <a class="doxy_el" href="$(doxygen_html_classDGD_1_1funnelbuf)#c1">DGD::funnelbuf</a>. </td></tr></table><a doxytag="DGD::channelbuf::dassoc" name="a3"></a><p><table border=0 cellpadding=2 cellspacing=0 width="100%"><tr><td class="doxy_md"><table border=0 cellpadding=0 cellspacing=0><tr><td class="doxy_md" nowrap valign="top"> bool DGD::channelbuf::dassoc </td><td class="doxy_md" valign="top">(&nbsp;</td><td class="doxy_md" nowrap valign="top">std::ostream *&nbsp;</td><td class="doxy_mdname1" nowrap valign="top">&nbsp; <em>dgs</em></td><td class="doxy_md" valign="top">)&nbsp;</td><td class="doxy_md" nowrap></td></tr></table></td></tr></table><table border=0 cellpadding=0 cellspacing=5><tr><td> &nbsp; </td><td><p> Remove the specified stream from the association list. <p> If there is a number of same pointers on the list <a class="doxy_el" href="$(doxygen_html_classDGD_1_1channelbuf)#a3">dassoc</a>(std::ostream*) must be called again. <p><dl compact><dt><b>See also: </b><dd><a class="doxy_el" href="$(doxygen_html_classDGD_1_1channelbuf)#a2">assoc</a>(std::ostream*) , <a class="doxy_el" href="$(doxygen_html_classDGD_1_1channelbuf)#a4">dassoc</a>() </dl></td></tr></table><a doxytag="DGD::channelbuf::dassoc" name="a4"></a><p><table border=0 cellpadding=2 cellspacing=0 width="100%"><tr><td class="doxy_md"><table border=0 cellpadding=0 cellspacing=0><tr><td class="doxy_md" nowrap valign="top"> void DGD::channelbuf::dassoc </td><td class="doxy_md" valign="top">(&nbsp;</td><td class="doxy_mdname1" nowrap valign="top">&nbsp; </td><td class="doxy_md" valign="top">)&nbsp;</td><td class="doxy_md" nowrap></td></tr></table></td></tr></table><table border=0 cellpadding=0 cellspacing=5><tr><td> &nbsp; </td><td><p> Clean the association list. <p><dl compact><dt><b>See also: </b><dd><a class="doxy_el" href="$(doxygen_html_classDGD_1_1channelbuf)#a2">assoc</a>(std::ostream*) , <a class="doxy_el" href="$(doxygen_html_classDGD_1_1channelbuf)#a3">dassoc</a>(std::ostream*) </dl></td></tr></table><a doxytag="DGD::channelbuf::line" name="a5"></a><p><table border=0 cellpadding=2 cellspacing=0 width="100%"><tr><td class="doxy_md"><table border=0 cellpadding=0 cellspacing=0><tr><td class="doxy_md" nowrap valign="top"> unsigned int DGD::channelbuf::line </td><td class="doxy_md" valign="top">(&nbsp;</td><td class="doxy_mdname1" nowrap valign="top">&nbsp; </td><td class="doxy_md" valign="top">)&nbsp;</td><td class="doxy_md" nowrap> const</td></tr></table></td></tr></table><table border=0 cellpadding=0 cellspacing=5><tr><td> &nbsp; </td><td><p> Return current channel line. <p></td></tr></table><a doxytag="DGD::channelbuf::column" name="a6"></a><p><table border=0 cellpadding=2 cellspacing=0 width="100%"><tr><td class="doxy_md"><table border=0 cellpadding=0 cellspacing=0><tr><td class="doxy_md" nowrap valign="top"> unsigned int DGD::channelbuf::column </td><td class="doxy_md" valign="top">(&nbsp;</td><td class="doxy_mdname1" nowrap valign="top">&nbsp; </td><td class="doxy_md" valign="top">)&nbsp;</td><td class="doxy_md" nowrap> const</td></tr></table></td></tr></table><table border=0 cellpadding=0 cellspacing=5><tr><td> &nbsp; </td><td><p> Return current channel column. <p></td></tr></table><a doxytag="DGD::channelbuf::indent_step" name="a7"></a><p><table border=0 cellpadding=2 cellspacing=0 width="100%"><tr><td class="doxy_md"><table border=0 cellpadding=0 cellspacing=0><tr><td class="doxy_md" nowrap valign="top"> void DGD::channelbuf::indent_step </td><td class="doxy_md" valign="top">(&nbsp;</td><td class="doxy_md" nowrap valign="top">unsigned int&nbsp;</td><td class="doxy_mdname1" nowrap valign="top">&nbsp; <em>step</em></td><td class="doxy_md" valign="top">)&nbsp;</td><td class="doxy_md" nowrap></td></tr></table></td></tr></table><table border=0 cellpadding=0 cellspacing=5><tr><td> &nbsp; </td><td><p> Change indentation step. <p><dl compact><dt><b>Note: </b><dd><a class="doxy_el" href="$(doxygen_html_classDGD_1_1channelbuf)#z0_1">sync</a>() is called before the value is actually changed. So this operation affects only future input. </dl><dl compact><dt><b>See also: </b><dd><a class="doxy_el" href="$(doxygen_html_classDGD_1_1channel)#a8">channel::indent_step</a>(unsigned int) </dl></td></tr></table><a doxytag="DGD::channelbuf::indent_step" name="a8"></a><p><table border=0 cellpadding=2 cellspacing=0 width="100%"><tr><td class="doxy_md"><table border=0 cellpadding=0 cellspacing=0><tr><td class="doxy_md" nowrap valign="top"> unsigned int DGD::channelbuf::indent_step </td><td class="doxy_md" valign="top">(&nbsp;</td><td class="doxy_mdname1" nowrap valign="top">&nbsp; </td><td class="doxy_md" valign="top">)&nbsp;</td><td class="doxy_md" nowrap> const</td></tr></table></td></tr></table><table border=0 cellpadding=0 cellspacing=5><tr><td> &nbsp; </td><td><p> Return indentation step value. <p><dl compact><dt><b>See also: </b><dd><a class="doxy_el" href="$(doxygen_html_classDGD_1_1channel)#a9">channel::indent_step</a>() const </dl></td></tr></table><a doxytag="DGD::channelbuf::incr_indent" name="a9"></a><p><table border=0 cellpadding=2 cellspacing=0 width="100%"><tr><td class="doxy_md"><table border=0 cellpadding=0 cellspacing=0><tr><td class="doxy_md" nowrap valign="top"> void DGD::channelbuf::incr_indent </td><td class="doxy_md" valign="top">(&nbsp;</td><td class="doxy_mdname1" nowrap valign="top">&nbsp; </td><td class="doxy_md" valign="top">)&nbsp;</td><td class="doxy_md" nowrap></td></tr></table></td></tr></table><table border=0 cellpadding=0 cellspacing=5><tr><td> &nbsp; </td><td><p> Increment indentation level by value of indentation step. <p><dl compact><dt><b>Note: </b><dd><a class="doxy_el" href="$(doxygen_html_classDGD_1_1channelbuf)#z0_1">sync</a>() is called before the value is actually changed. So this operation affects only future input. </dl><dl compact><dt><b>See also: </b><dd><a class="doxy_el" href="$(doxygen_html_classDGD_1_1channel)#a10">channel::incr_indent</a>() </dl></td></tr></table><a doxytag="DGD::channelbuf::decr_indent" name="a10"></a><p><table border=0 cellpadding=2 cellspacing=0 width="100%"><tr><td class="doxy_md"><table border=0 cellpadding=0 cellspacing=0><tr><td class="doxy_md" nowrap valign="top"> void DGD::channelbuf::decr_indent </td><td class="doxy_md" valign="top">(&nbsp;</td><td class="doxy_mdname1" nowrap valign="top">&nbsp; </td><td class="doxy_md" valign="top">)&nbsp;</td><td class="doxy_md" nowrap></td></tr></table></td></tr></table><table border=0 cellpadding=0 cellspacing=5><tr><td> &nbsp; </td><td><p> Decrement indentation level by value of indentation step. <p><dl compact><dt><b>Note: </b><dd><a class="doxy_el" href="$(doxygen_html_classDGD_1_1channelbuf)#z0_1">sync</a>() is called before the value is actually changed. So this operation affects only future input. </dl><dl compact><dt><b>See also: </b><dd> channel::decr::indent() </dl></td></tr></table><a doxytag="DGD::channelbuf::indent" name="a11"></a><p><table border=0 cellpadding=2 cellspacing=0 width="100%"><tr><td class="doxy_md"><table border=0 cellpadding=0 cellspacing=0><tr><td class="doxy_md" nowrap valign="top"> void DGD::channelbuf::indent </td><td class="doxy_md" valign="top">(&nbsp;</td><td class="doxy_md" nowrap valign="top">const unsigned int&nbsp;</td><td class="doxy_mdname1" nowrap valign="top">&nbsp; <em>val</em></td><td class="doxy_md" valign="top">)&nbsp;</td><td class="doxy_md" nowrap></td></tr></table></td></tr></table><table border=0 cellpadding=0 cellspacing=5><tr><td> &nbsp; </td><td><p> Change indentation level directly. <p><dl compact><dt><b>Note: </b><dd><a class="doxy_el" href="$(doxygen_html_classDGD_1_1channelbuf)#z0_1">sync</a>() is called before the value is actually changed. So this operation affects only future input. </dl><dl compact><dt><b>See also: </b><dd><a class="doxy_el" href="$(doxygen_html_classDGD_1_1channel)#a12">channel::indent</a>(const unsigned int) </dl></td></tr></table><a doxytag="DGD::channelbuf::indent" name="a12"></a><p><table border=0 cellpadding=2 cellspacing=0 width="100%"><tr><td class="doxy_md"><table border=0 cellpadding=0 cellspacing=0><tr><td class="doxy_md" nowrap valign="top"> unsigned int DGD::channelbuf::indent </td><td class="doxy_md" valign="top">(&nbsp;</td><td class="doxy_mdname1" nowrap valign="top">&nbsp; </td><td class="doxy_md" valign="top">)&nbsp;</td><td class="doxy_md" nowrap> const</td></tr></table></td></tr></table><table border=0 cellpadding=0 cellspacing=5><tr><td> &nbsp; </td><td><p> Return indentation level value. <p><dl compact><dt><b>See also: </b><dd><a class="doxy_el" href="$(doxygen_html_classDGD_1_1channel)#a13">channel::indent</a>() const </dl></td></tr></table><a doxytag="DGD::channelbuf::min_width" name="a13"></a><p><table border=0 cellpadding=2 cellspacing=0 width="100%"><tr><td class="doxy_md"><table border=0 cellpadding=0 cellspacing=0><tr><td class="doxy_md" nowrap valign="top"> void DGD::channelbuf::min_width </td><td class="doxy_md" valign="top">(&nbsp;</td><td class="doxy_md" nowrap valign="top">unsigned int&nbsp;</td><td class="doxy_mdname1" nowrap valign="top">&nbsp; <em>width</em></td><td class="doxy_md" valign="top">)&nbsp;</td><td class="doxy_md" nowrap></td></tr></table></td></tr></table><table border=0 cellpadding=0 cellspacing=5><tr><td> &nbsp; </td><td><p> Change minimum line width. <p><dl compact><dt><b>Note: </b><dd><a class="doxy_el" href="$(doxygen_html_classDGD_1_1channelbuf)#z0_1">sync</a>() is called before the value is actually changed. So this operation affects only future input. </dl><dl compact><dt><b>See also: </b><dd><a class="doxy_el" href="$(doxygen_html_classDGD_1_1channel)#a14">channel::min_width</a>(unsigned int) </dl></td></tr></table><a doxytag="DGD::channelbuf::min_width" name="a14"></a><p><table border=0 cellpadding=2 cellspacing=0 width="100%"><tr><td class="doxy_md"><table border=0 cellpadding=0 cellspacing=0><tr><td class="doxy_md" nowrap valign="top"> unsigned int DGD::channelbuf::min_width </td><td class="doxy_md" valign="top">(&nbsp;</td><td class="doxy_mdname1" nowrap valign="top">&nbsp; </td><td class="doxy_md" valign="top">)&nbsp;</td><td class="doxy_md" nowrap> const</td></tr></table></td></tr></table><table border=0 cellpadding=0 cellspacing=5><tr><td> &nbsp; </td><td><p> Return minimum line width value. <p><dl compact><dt><b>See also: </b><dd><a class="doxy_el" href="$(doxygen_html_classDGD_1_1channel)#a15">channel::min_width</a>() const </dl></td></tr></table><a doxytag="DGD::channelbuf::max_width" name="a15"></a><p><table border=0 cellpadding=2 cellspacing=0 width="100%"><tr><td class="doxy_md"><table border=0 cellpadding=0 cellspacing=0><tr><td class="doxy_md" nowrap valign="top"> void DGD::channelbuf::max_width </td><td class="doxy_md" valign="top">(&nbsp;</td><td class="doxy_md" nowrap valign="top">unsigned int&nbsp;</td><td class="doxy_mdname1" nowrap valign="top">&nbsp; <em>width</em></td><td class="doxy_md" valign="top">)&nbsp;</td><td class="doxy_md" nowrap></td></tr></table></td></tr></table><table border=0 cellpadding=0 cellspacing=5><tr><td> &nbsp; </td><td><p> Change maximum line width. <p><dl compact><dt><b>Note: </b><dd><a class="doxy_el" href="$(doxygen_html_classDGD_1_1channelbuf)#z0_1">sync</a>() is called before the value is actually changed. So this operation affects only future input. </dl><dl compact><dt><b>See also: </b><dd><a class="doxy_el" href="$(doxygen_html_classDGD_1_1channel)#a16">channel::max_width</a>(unsigned int) </dl></td></tr></table><a doxytag="DGD::channelbuf::max_width" name="a16"></a><p><table border=0 cellpadding=2 cellspacing=0 width="100%"><tr><td class="doxy_md"><table border=0 cellpadding=0 cellspacing=0><tr><td class="doxy_md" nowrap valign="top"> unsigned int DGD::channelbuf::max_width </td><td class="doxy_md" valign="top">(&nbsp;</td><td class="doxy_mdname1" nowrap valign="top">&nbsp; </td><td class="doxy_md" valign="top">)&nbsp;</td><td class="doxy_md" nowrap> const</td></tr></table></td></tr></table><table border=0 cellpadding=0 cellspacing=5><tr><td> &nbsp; </td><td><p> Return maximum line width value. <p><dl compact><dt><b>See also: </b><dd><a class="doxy_el" href="$(doxygen_html_classDGD_1_1channel)#a17">channel::max_width</a>() const </dl></td></tr></table><a doxytag="DGD::channelbuf::wrap" name="a17"></a><p><table border=0 cellpadding=2 cellspacing=0 width="100%"><tr><td class="doxy_md"><table border=0 cellpadding=0 cellspacing=0><tr><td class="doxy_md" nowrap valign="top"> void DGD::channelbuf::wrap </td><td class="doxy_md" valign="top">(&nbsp;</td><td class="doxy_md" nowrap valign="top">bool&nbsp;</td><td class="doxy_mdname1" nowrap valign="top">&nbsp; <em>allow</em></td><td class="doxy_md" valign="top">)&nbsp;</td><td class="doxy_md" nowrap></td></tr></table></td></tr></table><table border=0 cellpadding=0 cellspacing=5><tr><td> &nbsp; </td><td><p> Set character wrapping. <p><dl compact><dt><b>Note: </b><dd><a class="doxy_el" href="$(doxygen_html_classDGD_1_1channelbuf)#z0_1">sync</a>() is called before the value is actually changed. So this operation affects only future input. </dl><dl compact><dt><b>See also: </b><dd><a class="doxy_el" href="$(doxygen_html_classDGD_1_1channel)#a18">channel::wrap</a>(bool) </dl></td></tr></table><a doxytag="DGD::channelbuf::wrap" name="a18"></a><p><table border=0 cellpadding=2 cellspacing=0 width="100%"><tr><td class="doxy_md"><table border=0 cellpadding=0 cellspacing=0><tr><td class="doxy_md" nowrap valign="top"> bool DGD::channelbuf::wrap </td><td class="doxy_md" valign="top">(&nbsp;</td><td class="doxy_mdname1" nowrap valign="top">&nbsp; </td><td class="doxy_md" valign="top">)&nbsp;</td><td class="doxy_md" nowrap> const</td></tr></table></td></tr></table><table border=0 cellpadding=0 cellspacing=5><tr><td> &nbsp; </td><td><p> Return character wrapping state. <p><dl compact><dt><b>See also: </b><dd><a class="doxy_el" href="$(doxygen_html_classDGD_1_1channel)#a19">channel::wrap</a>() const </dl></td></tr></table><a doxytag="DGD::channelbuf::word_wrap" name="a19"></a><p><table border=0 cellpadding=2 cellspacing=0 width="100%"><tr><td class="doxy_md"><table border=0 cellpadding=0 cellspacing=0><tr><td class="doxy_md" nowrap valign="top"> void DGD::channelbuf::word_wrap </td><td class="doxy_md" valign="top">(&nbsp;</td><td class="doxy_md" nowrap valign="top">bool&nbsp;</td><td class="doxy_mdname1" nowrap valign="top">&nbsp; <em>allow</em></td><td class="doxy_md" valign="top">)&nbsp;</td><td class="doxy_md" nowrap></td></tr></table></td></tr></table><table border=0 cellpadding=0 cellspacing=5><tr><td> &nbsp; </td><td><p> Set word wrapping. <p><dl compact><dt><b>Note: </b><dd><a class="doxy_el" href="$(doxygen_html_classDGD_1_1channelbuf)#z0_1">sync</a>() is called before the value is actually changed. So this operation affects only future input. </dl><dl compact><dt><b>See also: </b><dd><a class="doxy_el" href="$(doxygen_html_classDGD_1_1channel)#a20">channel::word_wrap</a>(bool) </dl></td></tr></table><a doxytag="DGD::channelbuf::word_wrap" name="a20"></a><p><table border=0 cellpadding=2 cellspacing=0 width="100%"><tr><td class="doxy_md"><table border=0 cellpadding=0 cellspacing=0><tr><td class="doxy_md" nowrap valign="top"> bool DGD::channelbuf::word_wrap </td><td class="doxy_md" valign="top">(&nbsp;</td><td class="doxy_mdname1" nowrap valign="top">&nbsp; </td><td class="doxy_md" valign="top">)&nbsp;</td><td class="doxy_md" nowrap> const</td></tr></table></td></tr></table><table border=0 cellpadding=0 cellspacing=5><tr><td> &nbsp; </td><td><p> Return word wrapping state. <p><dl compact><dt><b>See also: </b><dd><a class="doxy_el" href="$(doxygen_html_classDGD_1_1channel)#a21">channel::word_wrap</a>() const </dl></td></tr></table><a doxytag="DGD::channelbuf::space_chars" name="a21"></a><p><table border=0 cellpadding=2 cellspacing=0 width="100%"><tr><td class="doxy_md"><table border=0 cellpadding=0 cellspacing=0><tr><td class="doxy_md" nowrap valign="top"> void DGD::channelbuf::space_chars </td><td class="doxy_md" valign="top">(&nbsp;</td><td class="doxy_md" nowrap valign="top">const char *&nbsp;</td><td class="doxy_mdname1" nowrap valign="top">&nbsp; <em>spc</em> = &quot; \t&quot; </td><td class="doxy_md" valign="top">)&nbsp;</td><td class="doxy_md" nowrap></td></tr></table></td></tr></table><table border=0 cellpadding=0 cellspacing=5><tr><td> &nbsp; </td><td><p> Set space character set. <p><dl compact><dt><b>Note: </b><dd><a class="doxy_el" href="$(doxygen_html_classDGD_1_1channelbuf)#z0_1">sync</a>() is called before the value is actually changed. So this operation affects only future input. </dl><dl compact><dt><b>See also: </b><dd><a class="doxy_el" href="$(doxygen_html_classDGD_1_1channel)#a22">channel::space_chars</a>(const char*) </dl></td></tr></table><a doxytag="DGD::channelbuf::space_chars" name="a22"></a><p><table border=0 cellpadding=2 cellspacing=0 width="100%"><tr><td class="doxy_md"><table border=0 cellpadding=0 cellspacing=0><tr><td class="doxy_md" nowrap valign="top"> std::string DGD::channelbuf::space_chars </td><td class="doxy_md" valign="top">(&nbsp;</td><td class="doxy_mdname1" nowrap valign="top">&nbsp; </td><td class="doxy_md" valign="top">)&nbsp;</td><td class="doxy_md" nowrap> const</td></tr></table></td></tr></table><table border=0 cellpadding=0 cellspacing=5><tr><td> &nbsp; </td><td><p> Return space characters set. <p><dl compact><dt><b>See also: </b><dd><a class="doxy_el" href="$(doxygen_html_classDGD_1_1channel)#a23">channel::space_chars</a>() const </dl></td></tr></table><a doxytag="DGD::channelbuf::position" name="a23"></a><p><table border=0 cellpadding=2 cellspacing=0 width="100%"><tr><td class="doxy_md"><table border=0 cellpadding=0 cellspacing=0><tr><td class="doxy_md" nowrap valign="top"><a class="doxy_el" href="$(doxygen_html_classDGD_1_1channelbuf)#s1">channelbuf::position_type</a> DGD::channelbuf::position </td><td class="doxy_md" valign="top">(&nbsp;</td><td class="doxy_mdname1" nowrap valign="top">&nbsp; </td><td class="doxy_md" valign="top">)&nbsp;</td><td class="doxy_md" nowrap> const</td></tr></table></td></tr></table><table border=0 cellpadding=0 cellspacing=5><tr><td> &nbsp; </td><td><p> Return current channel line and column. <p></td></tr></table><a doxytag="DGD::channelbuf::bytes_written" name="a24"></a><p><table border=0 cellpadding=2 cellspacing=0 width="100%"><tr><td class="doxy_md"><table border=0 cellpadding=0 cellspacing=0><tr><td class="doxy_md" nowrap valign="top"> unsigned long DGD::channelbuf::bytes_written </td><td class="doxy_md" valign="top">(&nbsp;</td><td class="doxy_mdname1" nowrap valign="top">&nbsp; </td><td class="doxy_md" valign="top">)&nbsp;</td><td class="doxy_md" nowrap> const</td></tr></table></td></tr></table><table border=0 cellpadding=0 cellspacing=5><tr><td> &nbsp; </td><td><p> Return amount of bytes written to the output stream. <p></td></tr></table><a doxytag="DGD::channelbuf::find_one_of" name="b3"></a><p><table border=0 cellpadding=2 cellspacing=0 width="100%"><tr><td class="doxy_md"><table border=0 cellpadding=0 cellspacing=0><tr><td class="doxy_md" nowrap valign="top"> channelbuf::char_type * DGD::channelbuf::find_one_of </td><td class="doxy_md" valign="top">(&nbsp;</td><td class="doxy_md" nowrap valign="top">const char_type *&nbsp;</td><td class="doxy_mdname" nowrap>&nbsp; <em>s</em>, </td></tr><tr><td></td><td></td><td class="doxy_md" nowrap>const unsigned int&nbsp;</td><td class="doxy_mdname" nowrap>&nbsp; <em>n</em>, </td></tr><tr><td></td><td></td><td class="doxy_md" nowrap>const char_type *&nbsp;</td><td class="doxy_mdname" nowrap>&nbsp; <em>c_set</em></td></tr><tr><td></td><td class="doxy_md">)&nbsp;</td><td class="doxy_md" colspan=2> const<code> [protected]</code></td></tr></table></td></tr></table><table border=0 cellpadding=0 cellspacing=5><tr><td> &nbsp; </td><td><p> strchr() equivalent. <p> Given string s with length n, finds a first occurrence of any character found in null-terminated string c_set. </td></tr></table><a doxytag="DGD::channelbuf::is_dos_eol" name="b4"></a><p><table border=0 cellpadding=2 cellspacing=0 width="100%"><tr><td class="doxy_md"><table border=0 cellpadding=0 cellspacing=0><tr><td class="doxy_md" nowrap valign="top"> bool DGD::channelbuf::is_dos_eol </td><td class="doxy_md" valign="top">(&nbsp;</td><td class="doxy_md" nowrap valign="top">const char_type *&nbsp;</td><td class="doxy_mdname1" nowrap valign="top">&nbsp; <em>p</em></td><td class="doxy_md" valign="top">)&nbsp;</td><td class="doxy_md" nowrap> const<code> [protected]</code></td></tr></table></td></tr></table><table border=0 cellpadding=0 cellspacing=5><tr><td> &nbsp; </td><td><p></td></tr></table><hr><h2>Member Data Documentation</h2><a doxytag="DGD::channelbuf::m_assoc" name="o0"></a><p><table border=0 cellpadding=2 cellspacing=0 width="100%"><tr><td class="doxy_md"><table border=0 cellpadding=0 cellspacing=0><tr><td class="doxy_md" nowrap valign="top"><a class="doxy_el" href="$(doxygen_html_classDGD_1_1channelbuf)#t0">Assoc_list</a> DGD::channelbuf::m_assoc<code> [private]</code></td></tr></table></td></tr></table><table border=0 cellpadding=0 cellspacing=5><tr><td> &nbsp; </td><td><p></td></tr></table><a doxytag="DGD::channelbuf::m_line" name="o1"></a><p><table border=0 cellpadding=2 cellspacing=0 width="100%"><tr><td class="doxy_md"><table border=0 cellpadding=0 cellspacing=0><tr><td class="doxy_md" nowrap valign="top"> unsigned int DGD::channelbuf::m_line<code> [private]</code></td></tr></table></td></tr></table><table border=0 cellpadding=0 cellspacing=5><tr><td> &nbsp; </td><td><p></td></tr></table><a doxytag="DGD::channelbuf::m_column" name="o2"></a><p><table border=0 cellpadding=2 cellspacing=0 width="100%"><tr><td class="doxy_md"><table border=0 cellpadding=0 cellspacing=0><tr><td class="doxy_md" nowrap valign="top"> unsigned int DGD::channelbuf::m_column<code> [private]</code></td></tr></table></td></tr></table><table border=0 cellpadding=0 cellspacing=5><tr><td> &nbsp; </td><td><p></td></tr></table><a doxytag="DGD::channelbuf::m_indent" name="o3"></a><p><table border=0 cellpadding=2 cellspacing=0 width="100%"><tr><td class="doxy_md"><table border=0 cellpadding=0 cellspacing=0><tr><td class="doxy_md" nowrap valign="top"> unsigned int DGD::channelbuf::m_indent<code> [private]</code></td></tr></table></td></tr></table><table border=0 cellpadding=0 cellspacing=5><tr><td> &nbsp; </td><td><p></td></tr></table><a doxytag="DGD::channelbuf::m_indent_step" name="o4"></a><p><table border=0 cellpadding=2 cellspacing=0 width="100%"><tr><td class="doxy_md"><table border=0 cellpadding=0 cellspacing=0><tr><td class="doxy_md" nowrap valign="top"> unsigned int DGD::channelbuf::m_indent_step<code> [private]</code></td></tr></table></td></tr></table><table border=0 cellpadding=0 cellspacing=5><tr><td> &nbsp; </td><td><p></td></tr></table><a doxytag="DGD::channelbuf::m_min_width" name="o5"></a><p><table border=0 cellpadding=2 cellspacing=0 width="100%"><tr><td class="doxy_md"><table border=0 cellpadding=0 cellspacing=0><tr><td class="doxy_md" nowrap valign="top"> unsigned int DGD::channelbuf::m_min_width<code> [private]</code></td></tr></table></td></tr></table><table border=0 cellpadding=0 cellspacing=5><tr><td> &nbsp; </td><td><p></td></tr></table><a doxytag="DGD::channelbuf::m_max_width" name="o6"></a><p><table border=0 cellpadding=2 cellspacing=0 width="100%"><tr><td class="doxy_md"><table border=0 cellpadding=0 cellspacing=0><tr><td class="doxy_md" nowrap valign="top"> unsigned int DGD::channelbuf::m_max_width<code> [private]</code></td></tr></table></td></tr></table><table border=0 cellpadding=0 cellspacing=5><tr><td> &nbsp; </td><td><p></td></tr></table><a doxytag="DGD::channelbuf::m_wrap" name="o7"></a><p><table border=0 cellpadding=2 cellspacing=0 width="100%"><tr><td class="doxy_md"><table border=0 cellpadding=0 cellspacing=0><tr><td class="doxy_md" nowrap valign="top"> bool DGD::channelbuf::m_wrap<code> [private]</code></td></tr></table></td></tr></table><table border=0 cellpadding=0 cellspacing=5><tr><td> &nbsp; </td><td><p></td></tr></table><a doxytag="DGD::channelbuf::m_word_wrap" name="o8"></a><p><table border=0 cellpadding=2 cellspacing=0 width="100%"><tr><td class="doxy_md"><table border=0 cellpadding=0 cellspacing=0><tr><td class="doxy_md" nowrap valign="top"> bool DGD::channelbuf::m_word_wrap<code> [private]</code></td></tr></table></td></tr></table><table border=0 cellpadding=0 cellspacing=5><tr><td> &nbsp; </td><td><p></td></tr></table><a doxytag="DGD::channelbuf::m_word_pos" name="o9"></a><p><table border=0 cellpadding=2 cellspacing=0 width="100%"><tr><td class="doxy_md"><table border=0 cellpadding=0 cellspacing=0><tr><td class="doxy_md" nowrap valign="top"> const char_type* DGD::channelbuf::m_word_pos<code> [private]</code></td></tr></table></td></tr></table><table border=0 cellpadding=0 cellspacing=5><tr><td> &nbsp; </td><td><p></td></tr></table><a doxytag="DGD::channelbuf::m_spaces" name="o10"></a><p><table border=0 cellpadding=2 cellspacing=0 width="100%"><tr><td class="doxy_md"><table border=0 cellpadding=0 cellspacing=0><tr><td class="doxy_md" nowrap valign="top"> std::string DGD::channelbuf::m_spaces<code> [private]</code></td></tr></table></td></tr></table><table border=0 cellpadding=0 cellspacing=5><tr><td> &nbsp; </td><td><p></td></tr></table><a doxytag="DGD::channelbuf::m_bytes" name="o11"></a><p><table border=0 cellpadding=2 cellspacing=0 width="100%"><tr><td class="doxy_md"><table border=0 cellpadding=0 cellspacing=0><tr><td class="doxy_md" nowrap valign="top"> unsigned long DGD::channelbuf::m_bytes<code> [private]</code></td></tr></table></td></tr></table><table border=0 cellpadding=0 cellspacing=5><tr><td> &nbsp; </td><td><p></td></tr></table><hr>The documentation for this class was generated from the following files:<ul><li><a class="doxy_el" href="$(doxygen_html_dgChannelBuf_8h-source)">dgChannelBuf.h</a><li><a class="doxy_el" href="$(doxygen_html_dgChannelBuf_8cpp)">dgChannelBuf.cpp</a></ul><hr><address style="align: right;"><small>Generated on Mon Dec 9 18:30:03 2002 for Depression Glass Debug Library by <a href="http://www.doxygen.org/index.html"> <img align="middle" alt="doxygen" border=0 height=53 src="$(doxygen)" width=110></a>1.2.17 </small></address></td></tr></table>
</content>

<content name="doxygen_html_classDGD_1_1Debug-members" format="text/html">
<wmmeta name="title" value="Member List" />
<h1>DGD::Debug Member List</h1>
This is the complete list of members for <a class="doxy_el" href="$(doxygen_html_classDGD_1_1Debug)">DGD::Debug</a>
, including all inherited members.<table><tr bgcolor="#f0f0f0"><td><a class="doxy_el" href="$(doxygen_html_classDGD_1_1Debug)#a4">append_file</a>(const stream &amp;file)</td><td><a class="doxy_el" href="$(doxygen_html_classDGD_1_1Debug)">DGD::Debug</a></td><td></td></tr><tr bgcolor="#f0f0f0"><td><a class="doxy_el" href="$(doxygen_html_classDGD_1_1Debug)#b0">apply_options</a>(channel_ptr &amp;chnl)</td><td><a class="doxy_el" href="$(doxygen_html_classDGD_1_1Debug)">DGD::Debug</a></td><td><code> [protected]</code></td></tr><tr bgcolor="#f0f0f0"><td><a class="doxy_el" href="$(doxygen_html_classDGD_1_1Debug)#t1">Channel_iterator</a> typedef</td><td><a class="doxy_el" href="$(doxygen_html_classDGD_1_1Debug)">DGD::Debug</a></td><td><code> [protected]</code></td></tr><tr bgcolor="#f0f0f0"><td><a class="doxy_el" href="$(doxygen_html_classDGD_1_1Debug)#t0">Channel_list</a> typedef</td><td><a class="doxy_el" href="$(doxygen_html_classDGD_1_1Debug)">DGD::Debug</a></td><td><code> [protected]</code></td></tr><tr bgcolor="#f0f0f0"><td><a class="doxy_el" href="$(doxygen_html_classDGD_1_1Debug)#s2">channel_ptr</a> typedef</td><td><a class="doxy_el" href="$(doxygen_html_classDGD_1_1Debug)">DGD::Debug</a></td><td></td></tr><tr bgcolor="#f0f0f0"><td><a class="doxy_el" href="$(doxygen_html_classDGD_1_1Debug)#s0">channel_ref</a> typedef</td><td><a class="doxy_el" href="$(doxygen_html_classDGD_1_1Debug)">DGD::Debug</a></td><td></td></tr><tr bgcolor="#f0f0f0"><td><a class="doxy_el" href="$(doxygen_html_classDGD_1_1Debug)#a6">create_channel</a>(const std::string &amp;name)</td><td><a class="doxy_el" href="$(doxygen_html_classDGD_1_1Debug)">DGD::Debug</a></td><td></td></tr><tr bgcolor="#f0f0f0"><td><a class="doxy_el" href="$(doxygen_html_classDGD_1_1Debug)#d1">create_factory</a>(int argc, char **argv)</td><td><a class="doxy_el" href="$(doxygen_html_classDGD_1_1Debug)">DGD::Debug</a></td><td><code> [static]</code></td></tr><tr bgcolor="#f0f0f0"><td><a class="doxy_el" href="$(doxygen_html_classDGD_1_1Debug)#a3">create_file</a>(const std::string &amp;name)</td><td><a class="doxy_el" href="$(doxygen_html_classDGD_1_1Debug)">DGD::Debug</a></td><td></td></tr><tr bgcolor="#f0f0f0"><td><a class="doxy_el" href="$(doxygen_html_classDGD_1_1Debug)#a9">current</a>(const std::string &amp;name)</td><td><a class="doxy_el" href="$(doxygen_html_classDGD_1_1Debug)">DGD::Debug</a></td><td></td></tr><tr bgcolor="#f0f0f0"><td><a class="doxy_el" href="$(doxygen_html_classDGD_1_1Debug)#a10">current</a>() const</td><td><a class="doxy_el" href="$(doxygen_html_classDGD_1_1Debug)">DGD::Debug</a></td><td></td></tr><tr bgcolor="#f0f0f0"><td><a class="doxy_el" href="$(doxygen_html_classDGD_1_1Debug)#a0">Debug</a>()</td><td><a class="doxy_el" href="$(doxygen_html_classDGD_1_1Debug)">DGD::Debug</a></td><td></td></tr><tr bgcolor="#f0f0f0"><td><a class="doxy_el" href="$(doxygen_html_classDGD_1_1Debug)#p0">debug_factory</a></td><td><a class="doxy_el" href="$(doxygen_html_classDGD_1_1Debug)">DGD::Debug</a></td><td><code> [static]</code></td></tr><tr bgcolor="#f0f0f0"><td><a class="doxy_el" href="$(doxygen_html_classDGD_1_1Debug)#s1">debug_factory_ref</a> typedef</td><td><a class="doxy_el" href="$(doxygen_html_classDGD_1_1Debug)">DGD::Debug</a></td><td></td></tr><tr bgcolor="#f0f0f0"><td><a class="doxy_el" href="$(doxygen_html_classDGD_1_1Debug)#d0">factory</a>()</td><td><a class="doxy_el" href="$(doxygen_html_classDGD_1_1Debug)">DGD::Debug</a></td><td><code> [static]</code></td></tr><tr bgcolor="#f0f0f0"><td><a class="doxy_el" href="$(doxygen_html_classDGD_1_1Debug)#t2">File_list</a> typedef</td><td><a class="doxy_el" href="$(doxygen_html_classDGD_1_1Debug)">DGD::Debug</a></td><td><code> [protected]</code></td></tr><tr bgcolor="#f0f0f0"><td><a class="doxy_el" href="$(doxygen_html_classDGD_1_1Debug)#o4">m_args_info</a></td><td><a class="doxy_el" href="$(doxygen_html_classDGD_1_1Debug)">DGD::Debug</a></td><td><code> [private]</code></td></tr><tr bgcolor="#f0f0f0"><td><a class="doxy_el" href="$(doxygen_html_classDGD_1_1Debug)#o0">m_channels</a></td><td><a class="doxy_el" href="$(doxygen_html_classDGD_1_1Debug)">DGD::Debug</a></td><td><code> [private]</code></td></tr><tr bgcolor="#f0f0f0"><td><a class="doxy_el" href="$(doxygen_html_classDGD_1_1Debug)#o1">m_current_channel</a></td><td><a class="doxy_el" href="$(doxygen_html_classDGD_1_1Debug)">DGD::Debug</a></td><td><code> [private]</code></td></tr><tr bgcolor="#f0f0f0"><td><a class="doxy_el" href="$(doxygen_html_classDGD_1_1Debug)#o2">m_files</a></td><td><a class="doxy_el" href="$(doxygen_html_classDGD_1_1Debug)">DGD::Debug</a></td><td><code> [private]</code></td></tr><tr bgcolor="#f0f0f0"><td><a class="doxy_el" href="$(doxygen_html_classDGD_1_1Debug)#o3">m_main_file</a></td><td><a class="doxy_el" href="$(doxygen_html_classDGD_1_1Debug)">DGD::Debug</a></td><td><code> [private]</code></td></tr><tr bgcolor="#f0f0f0"><td><a class="doxy_el" href="$(doxygen_html_classDGD_1_1Debug)#a5">main_file</a>() const</td><td><a class="doxy_el" href="$(doxygen_html_classDGD_1_1Debug)">DGD::Debug</a></td><td></td></tr><tr bgcolor="#f0f0f0"><td><a class="doxy_el" href="$(doxygen_html_classDGD_1_1Debug)#a7">operator channel_ref</a>() const</td><td><a class="doxy_el" href="$(doxygen_html_classDGD_1_1Debug)">DGD::Debug</a></td><td></td></tr><tr bgcolor="#f0f0f0"><td><a class="doxy_el" href="$(doxygen_html_classDGD_1_1Debug)#a8">operator[]</a>(const std::string &amp;name)</td><td><a class="doxy_el" href="$(doxygen_html_classDGD_1_1Debug)">DGD::Debug</a></td><td></td></tr><tr bgcolor="#f0f0f0"><td><a class="doxy_el" href="$(doxygen_html_classDGD_1_1Debug)#a2">process_options</a>(int argc, char **argv)</td><td><a class="doxy_el" href="$(doxygen_html_classDGD_1_1Debug)">DGD::Debug</a></td><td></td></tr><tr bgcolor="#f0f0f0"><td><a class="doxy_el" href="$(doxygen_html_classDGD_1_1Debug)#a1">~Debug</a>()</td><td><a class="doxy_el" href="$(doxygen_html_classDGD_1_1Debug)">DGD::Debug</a></td><td></td></tr></table>
<hr>
<address style="align: right;"><small>Generated on Mon Dec 9 18:30:03 2002 for Depression Glass Debug Library by <a href="http://www.doxygen.org/index.html"> <img align="middle" alt="doxygen" border=0 height=53 src="$(doxygen)" width=110></a>1.2.17 </small></address>
</content>

<content name="doxygen_html_classDGD_1_1Debug" format="text/html">
<wmmeta name="title" value="DGD::Debug class Reference" />
<h1>DGD::Debug Class Reference</h1>
<a class="doxy_el" href="$(doxygen_html_namespaceDGD)">DGD</a>
 channel factory. <a href="#_details">More...</a>
<p><code>#include &lt;<a class="doxy_el" href="$(doxygen_html_dgDebug_8h-source)">dgDebug.h</a>&gt;</code>
<p> Collaboration diagram for DGD::Debug:
<p><center><img alt="Collaboration graph" border=0 src="$(classDGD_1_1Debug__coll__graph)" usemap="#DGD_1_1Debug__coll__map"></center><center><font size=2>[<a href="$(doxygen_html_graph_legend)">legend</a>]</font></center><a href="$(doxygen_html_classDGD_1_1Debug-members)">List of all members.</a>
<h2>Public Types</h2>
<ul><li>typedef <a class="doxy_el" href="$(doxygen_html_classDGD_1_1channel)">channel</a> &amp; <a class="doxy_el" href="$(doxygen_html_classDGD_1_1Debug)#s0">channel_ref</a><li>typedef boost::shared_ptr&lt;<br> Debug &gt; <a class="doxy_el" href="$(doxygen_html_classDGD_1_1Debug)#s1">debug_factory_ref</a><li>typedef boost::shared_ptr&lt;<br><a class="doxy_el" href="$(doxygen_html_classDGD_1_1channel)">channel</a> &gt; <a class="doxy_el" href="$(doxygen_html_classDGD_1_1Debug)#s2">channel_ptr</a></ul>
<h2>Public Methods</h2>
<ul><li><a class="doxy_el" href="$(doxygen_html_classDGD_1_1Debug)#a0">Debug</a> () <dl class="doxy_el"><dd><font size="-1"><em>Default constructor.</em> <a href="#a0"></a><em><br><br></em></font></dl><li><a class="doxy_el" href="$(doxygen_html_classDGD_1_1Debug)#a1">~Debug</a> () <dl class="doxy_el"><dd><font size="-1"><em>Destructor.</em> <a href="#a1"></a><em><br><br></em></font></dl><li>void <a class="doxy_el" href="$(doxygen_html_classDGD_1_1Debug)#a2">process_options</a> (int argc, char **argv) <dl class="doxy_el"><dd><font size="-1"><em>Process command line options.</em> <a href="#a2"></a><em><br><br></em></font></dl><li><a class="doxy_el" href="$(doxygen_html_namespaceDGD)#a5">stream</a> <a class="doxy_el" href="$(doxygen_html_classDGD_1_1Debug)#a3">create_file</a> (const std::string &amp;name) <dl class="doxy_el"><dd><font size="-1"><em>Create a file stream.</em> <a href="#a3"></a><em><br><br></em></font></dl><li><a class="doxy_el" href="$(doxygen_html_namespaceDGD)#a5">stream</a> <a class="doxy_el" href="$(doxygen_html_classDGD_1_1Debug)#a4">append_file</a> (const <a class="doxy_el" href="$(doxygen_html_namespaceDGD)#a5">stream</a> &amp;file) <dl class="doxy_el"><dd><font size="-1"><em>Append a file stream to the stream list.</em> <a href="#a4"></a><em><br><br></em></font></dl><li><a class="doxy_el" href="$(doxygen_html_namespaceDGD)#a5">stream</a> <a class="doxy_el" href="$(doxygen_html_classDGD_1_1Debug)#a5">main_file</a> () const <dl class="doxy_el"><dd><font size="-1"><em>Return main file stream.</em> <a href="#a5"></a><em><br><br></em></font></dl><li><a class="doxy_el" href="$(doxygen_html_classDGD_1_1channel)">channel</a> &amp; <a class="doxy_el" href="$(doxygen_html_classDGD_1_1Debug)#a6">create_channel</a> (const std::string &amp;name) <dl class="doxy_el"><dd><font size="-1"><em>Create channel.</em> <a href="#a6"></a><em><br><br></em></font></dl><li><a class="doxy_el" href="$(doxygen_html_classDGD_1_1Debug)#a7">operator channel_ref</a> () const <li><a class="doxy_el" href="$(doxygen_html_classDGD_1_1Debug)#s2">channel_ptr</a> <a class="doxy_el" href="$(doxygen_html_classDGD_1_1Debug)#a8">operator[]</a> (const std::string &amp;name) <dl class="doxy_el"><dd><font size="-1"><em>Get channel by name.</em> <a href="#a8"></a><em><br><br></em></font></dl><li>void <a class="doxy_el" href="$(doxygen_html_classDGD_1_1Debug)#a9">current</a> (const std::string &amp;name) <dl class="doxy_el"><dd><font size="-1"><em>Set current channel.</em> <a href="#a9"></a><em><br><br></em></font></dl><li><a class="doxy_el" href="$(doxygen_html_classDGD_1_1Debug)#s2">channel_ptr</a> <a class="doxy_el" href="$(doxygen_html_classDGD_1_1Debug)#a10">current</a> () const <dl class="doxy_el"><dd><font size="-1"><em>Return current channel.</em> <a href="#a10"></a><em><br><br></em></font></dl></ul>
<h2>Static Public Methods</h2>
<ul><li>Debug * <a class="doxy_el" href="$(doxygen_html_classDGD_1_1Debug)#d0">factory</a> () <dl class="doxy_el"><dd><font size="-1"><em>Return pointer to the global <a class="doxy_el" href="$(doxygen_html_classDGD_1_1Debug)">Debug</a> factory.</em> <a href="#d0"></a><em><br><br></em></font></dl><li><a class="doxy_el" href="$(doxygen_html_classDGD_1_1Debug)#s1">debug_factory_ref</a> <a class="doxy_el" href="$(doxygen_html_classDGD_1_1Debug)#d1">create_factory</a> (int argc, char **argv) <dl class="doxy_el"><dd><font size="-1"><em>Create global <a class="doxy_el" href="$(doxygen_html_classDGD_1_1Debug)">Debug</a> factory.</em> <a href="#d1"></a><em><br><br></em></font></dl></ul>
<h2>Static Public Attributes</h2>
<ul><li>Debug * <a class="doxy_el" href="$(doxygen_html_classDGD_1_1Debug)#p0">debug_factory</a> = NULL <dl class="doxy_el"><dd><font size="-1"><em>Global <a class="doxy_el" href="$(doxygen_html_classDGD_1_1Debug)">Debug</a> factory pointer .</em> <a href="#p0"></a><em><br><br></em></font></dl></ul>
<h2>Protected Types</h2>
<ul><li>typedef std::list&lt; <a class="doxy_el" href="$(doxygen_html_classDGD_1_1Debug)#s2">channel_ptr</a> &gt; <a class="doxy_el" href="$(doxygen_html_classDGD_1_1Debug)#t0">Channel_list</a><li>typedef Channel_list::iterator <a class="doxy_el" href="$(doxygen_html_classDGD_1_1Debug)#t1">Channel_iterator</a><li>typedef std::list&lt; <a class="doxy_el" href="$(doxygen_html_namespaceDGD)#a5">stream</a> &gt; <a class="doxy_el" href="$(doxygen_html_classDGD_1_1Debug)#t2">File_list</a></ul>
<h2>Protected Methods</h2>
<ul><li>void <a class="doxy_el" href="$(doxygen_html_classDGD_1_1Debug)#b0">apply_options</a> (<a class="doxy_el" href="$(doxygen_html_classDGD_1_1Debug)#s2">channel_ptr</a> &amp;chnl) <dl class="doxy_el"><dd><font size="-1"><em>Apply default channel-specific options on given channel.</em> <a href="#b0"></a><em><br><br></em></font></dl></ul>
<h2>Private Attributes</h2>
<ul><li><a class="doxy_el" href="$(doxygen_html_classDGD_1_1Debug)#t0">Channel_list</a> <a class="doxy_el" href="$(doxygen_html_classDGD_1_1Debug)#o0">m_channels</a><li><a class="doxy_el" href="$(doxygen_html_classDGD_1_1Debug)#t1">Channel_iterator</a> <a class="doxy_el" href="$(doxygen_html_classDGD_1_1Debug)#o1">m_current_channel</a><li><a class="doxy_el" href="$(doxygen_html_classDGD_1_1Debug)#t2">File_list</a> <a class="doxy_el" href="$(doxygen_html_classDGD_1_1Debug)#o2">m_files</a><li><a class="doxy_el" href="$(doxygen_html_namespaceDGD)#a5">stream</a> <a class="doxy_el" href="$(doxygen_html_classDGD_1_1Debug)#o3">m_main_file</a><li>dgd_gengetopt_args_info <a class="doxy_el" href="$(doxygen_html_classDGD_1_1Debug)#o4">m_args_info</a></ul>
<hr>
<a name="_details"></a>
<h2>Detailed Description</h2>
<a class="doxy_el" href="$(doxygen_html_namespaceDGD)">DGD</a>
 channel factory. <p> The factory is used to create channels and streams those channels can be associated with. Currently only file streams are supported. Use <a class="doxy_el" href="$(doxygen_html_classDGD_1_1Debug)#a3">Debug::create_file</a>(const std::string&amp;) to create a file stream and <a class="doxy_el" href="$(doxygen_html_classDGD_1_1Debug)#a6">Debug::create_channel</a>(const std::string&amp;) to create a channel. The channels can be accessed by name using <a class="doxy_el" href="$(doxygen_html_classDGD_1_1Debug)#a8">Debug::operator[]</a>. 
<p> There must be a single object of this class during the application lifetime. The best way to allocate this object is by calling static method <a class="doxy_el" href="$(doxygen_html_classDGD_1_1Debug)#d1">Debug::create_factory</a>(int,char**). The best way to get a pointer to the object is by calling static method <a class="doxy_el" href="$(doxygen_html_classDGD_1_1Debug)#d0">Debug::factory</a>(). You can also use static variable <a class="doxy_el" href="$(doxygen_html_classDGD_1_1Debug)#p0">Debug::debug_factory</a>, but this is less preferred way. 
<p> The factory is initialized with a channel called &quot;main&quot; it is not associated with any file by default. The main channel is opened by the factory. The factory creates no default file, but it can be created by specifying &quot;--debug-main-file&quot; option, see below. If the option has been specified, the main file stream will be created. Use <a class="doxy_el" href="$(doxygen_html_classDGD_1_1Debug)#a5">Debug::main_file</a>() to access that stream. 
<p> You can use notion of current channel to use the DGD::Debug object as a regular channel. By default main channel is a current channel, you can use <a class="doxy_el" href="$(doxygen_html_classDGD_1_1Debug)#a9">Debug::current</a>(const std::string&amp;) method to select the current channel, and <a class="doxy_el" href="$(doxygen_html_classDGD_1_1Debug)#a9">Debug::current</a>() method to explicitly query pointer to the current channel. Except that DGD::Debug can be casted to reference to channel, for example: <div class="doxy_fragment"><pre> <a class="doxy_code" href="$(doxygen_html_classDGD_1_1channel)">DGD::channel</a>&amp; chnl = (<a class="doxy_code" href="$(doxygen_html_classDGD_1_1channel)">DGD::channel</a>&amp;)(*Debug::factory());
 chnl &lt;&lt; <span class="doxy_stringliteral">&quot;Hello World&quot;</span> &lt;&lt; std::endl;
</pre></div>
<p> DGD::Debug can be controlled by command line options. Use <a class="doxy_el" href="$(doxygen_html_classDGD_1_1Debug)#a2">Debug::process_options</a>(int,char**) method to pass the options as received by main() function or use <a class="doxy_el" href="$(doxygen_html_classDGD_1_1option__filter)">DGD::option_filter</a> to create custom option sets. 
<p><hr>
<h2>Member Typedef Documentation</h2>
<a doxytag="DGD::Debug::channel_ref" name="s0"></a>
<p><table border=0 cellpadding=2 cellspacing=0 width="100%"><tr><td class="doxy_md"><table border=0 cellpadding=0 cellspacing=0><tr><td class="doxy_md" nowrap valign="top"> typedef <a class="doxy_el" href="$(doxygen_html_classDGD_1_1channel)">channel</a>&amp; DGD::Debug::channel_ref </td></tr></table></td></tr></table><table border=0 cellpadding=0 cellspacing=5><tr><td> &nbsp; </td><td><p></td></tr></table><a doxytag="DGD::Debug::debug_factory_ref" name="s1"></a>
<p><table border=0 cellpadding=2 cellspacing=0 width="100%"><tr><td class="doxy_md"><table border=0 cellpadding=0 cellspacing=0><tr><td class="doxy_md" nowrap valign="top"> typedef boost::shared_ptr&lt;Debug&gt; DGD::Debug::debug_factory_ref </td></tr></table></td></tr></table><table border=0 cellpadding=0 cellspacing=5><tr><td> &nbsp; </td><td><p></td></tr></table><a doxytag="DGD::Debug::channel_ptr" name="s2"></a>
<p><table border=0 cellpadding=2 cellspacing=0 width="100%"><tr><td class="doxy_md"><table border=0 cellpadding=0 cellspacing=0><tr><td class="doxy_md" nowrap valign="top"> typedef boost::shared_ptr&lt;<a class="doxy_el" href="$(doxygen_html_classDGD_1_1channel)">channel</a>&gt; DGD::Debug::channel_ptr </td></tr></table></td></tr></table><table border=0 cellpadding=0 cellspacing=5><tr><td> &nbsp; </td><td><p></td></tr></table><a doxytag="DGD::Debug::Channel_list" name="t0"></a>
<p><table border=0 cellpadding=2 cellspacing=0 width="100%"><tr><td class="doxy_md"><table border=0 cellpadding=0 cellspacing=0><tr><td class="doxy_md" nowrap valign="top"> typedef std::list&lt; <a class="doxy_el" href="$(doxygen_html_classDGD_1_1Debug)#s2">channel_ptr</a> &gt; DGD::Debug::Channel_list<code> [protected]</code></td></tr></table></td></tr></table><table border=0 cellpadding=0 cellspacing=5><tr><td> &nbsp; </td><td><p></td></tr></table><a doxytag="DGD::Debug::Channel_iterator" name="t1"></a>
<p><table border=0 cellpadding=2 cellspacing=0 width="100%"><tr><td class="doxy_md"><table border=0 cellpadding=0 cellspacing=0><tr><td class="doxy_md" nowrap valign="top"> typedef Channel_list::iterator DGD::Debug::Channel_iterator<code> [protected]</code></td></tr></table></td></tr></table><table border=0 cellpadding=0 cellspacing=5><tr><td> &nbsp; </td><td><p></td></tr></table><a doxytag="DGD::Debug::File_list" name="t2"></a>
<p><table border=0 cellpadding=2 cellspacing=0 width="100%"><tr><td class="doxy_md"><table border=0 cellpadding=0 cellspacing=0><tr><td class="doxy_md" nowrap valign="top"> typedef std::list&lt; <a class="doxy_el" href="$(doxygen_html_namespaceDGD)#a5">stream</a> &gt; DGD::Debug::File_list<code> [protected]</code></td></tr></table></td></tr></table><table border=0 cellpadding=0 cellspacing=5><tr><td> &nbsp; </td><td><p></td></tr></table><hr>
<h2>Constructor &amp; Destructor Documentation</h2>
<a doxytag="DGD::Debug::Debug" name="a0"></a>
<p><table border=0 cellpadding=2 cellspacing=0 width="100%"><tr><td class="doxy_md"><table border=0 cellpadding=0 cellspacing=0><tr><td class="doxy_md" nowrap valign="top"> DGD::Debug::Debug </td><td class="doxy_md" valign="top">(&nbsp;</td><td class="doxy_mdname1" nowrap valign="top">&nbsp; </td><td class="doxy_md" valign="top">)&nbsp;</td><td class="doxy_md" nowrap></td></tr></table></td></tr></table><table border=0 cellpadding=0 cellspacing=5><tr><td> &nbsp; </td><td><p> Default constructor. <p> Initializes the factory and opens the main channel. </td></tr></table><a doxytag="DGD::Debug::~Debug" name="a1"></a>
<p><table border=0 cellpadding=2 cellspacing=0 width="100%"><tr><td class="doxy_md"><table border=0 cellpadding=0 cellspacing=0><tr><td class="doxy_md" nowrap valign="top"> DGD::Debug::~Debug </td><td class="doxy_md" valign="top">(&nbsp;</td><td class="doxy_mdname1" nowrap valign="top">&nbsp; </td><td class="doxy_md" valign="top">)&nbsp;</td><td class="doxy_md" nowrap></td></tr></table></td></tr></table><table border=0 cellpadding=0 cellspacing=5><tr><td> &nbsp; </td><td><p> Destructor. <p> All memory is deallocated automatically by smart pointers. This destructor flushes all files and channels. <dl compact><dt><b>See also: </b><dd><a class="doxy_el" href="$(doxygen_html_classDGD_1_1Debug)#a0">Debug::Debug</a>() </dl></td></tr></table><hr>
<h2>Member Function Documentation</h2>
<a doxytag="DGD::Debug::process_options" name="a2"></a>
<p><table border=0 cellpadding=2 cellspacing=0 width="100%"><tr><td class="doxy_md"><table border=0 cellpadding=0 cellspacing=0><tr><td class="doxy_md" nowrap valign="top"> void DGD::Debug::process_options </td><td class="doxy_md" valign="top">(&nbsp;</td><td class="doxy_md" nowrap valign="top">int&nbsp;</td><td class="doxy_mdname" nowrap>&nbsp; <em>argc</em>, </td></tr><tr><td></td><td></td><td class="doxy_md" nowrap>char **&nbsp;</td><td class="doxy_mdname" nowrap>&nbsp; <em>argv</em></td></tr><tr><td></td><td class="doxy_md">)&nbsp;</td><td class="doxy_md" colspan=2></td></tr></table></td></tr></table><table border=0 cellpadding=0 cellspacing=5><tr><td> &nbsp; </td><td><p> Process command line options. <p> This method applies the command line options set on the DGD::Debug object and its channels. <p> The following options are accepted: <dl compact><dt>--debug-version <dd>Print <a class="doxy_el" href="$(doxygen_html_namespaceDGD)">DGD</a> version to std::cout and exit the application (actually throw <a class="doxy_el" href="$(doxygen_html_classDGD_1_1exit__required)">DGD::exit_required</a> exception). <dt>--debug-help <dd>Print <a class="doxy_el" href="$(doxygen_html_namespaceDGD)">DGD</a> help to std::cout and exit the application (actually throw <a class="doxy_el" href="$(doxygen_html_classDGD_1_1exit__required)">DGD::exit_required</a> exception). <dt>--debug-enable <dd>Enable debug. By default the debug logging is disabled. This command line option enables it. <a class="doxy_el" href="$(doxygen_html_classDGD_1_1Debug)#a2">Debug::process_options</a>(int,char**) will throw <a class="doxy_el" href="$(doxygen_html_classDGD_1_1debug__disabled)">debug_disabled</a> exception if this option is not specified on command line. <dt>--debug-main-file <dd>Create the main file. This option must be specified with a string argument which defines the main file name. The main file is created and its stream can be queried by <a class="doxy_el" href="$(doxygen_html_classDGD_1_1Debug)#a5">Debug::main_file</a>(). <dt>--debug-min-width <dd>Set default minimum line width for all existing and future channels. This option must be specified with an integer parameter which defines the default minimum line width. <dt>--debug-max-width <dd>Set default maximum line width for all existing and future channels. This option must be specified with an integer parameter which defines the default maximum line width. <dt>--debug-indent-step <dd>Set default indentation step for all existing and future channels. This option must be specified with an integer parameter which defines the default indentation step. <dt>--debug-allow-wrap <dd>Set default character wrapping policy for all existing and future channels. <dt>--debug-allow-word-wrap <dd>Set default word wrapping policy for all existing and future channels. <dt>--debug-space-characters <dd>Set default space character set for all existing and future channels. This option must be specified with a string parameter which defines the default space characters. <dt>--debug-turn-on <dd>Turn on (open) channels. This option must be specified with a string parameter which defines a GNU regular exception. This regexp is applied on the current channel list. All channels with names matching the regexp will be opened. <dt>--debug-turn-off <dd>Turn off (close) channels. This option must be specified with a string parameter which defines a GNU regular exception. This regexp is applied on the current channel list. All channels with names matching the regexp will be closed. </dl></td></tr></table><a doxytag="DGD::Debug::create_file" name="a3"></a>
<p><table border=0 cellpadding=2 cellspacing=0 width="100%"><tr><td class="doxy_md"><table border=0 cellpadding=0 cellspacing=0><tr><td class="doxy_md" nowrap valign="top"><a class="doxy_el" href="$(doxygen_html_namespaceDGD)#a5">stream</a> DGD::Debug::create_file </td><td class="doxy_md" valign="top">(&nbsp;</td><td class="doxy_md" nowrap valign="top">const std::string &amp;&nbsp;</td><td class="doxy_mdname1" nowrap valign="top">&nbsp; <em>name</em></td><td class="doxy_md" valign="top">)&nbsp;</td><td class="doxy_md" nowrap></td></tr></table></td></tr></table><table border=0 cellpadding=0 cellspacing=5><tr><td> &nbsp; </td><td><p> Create a file stream. <p> This method will return NULL stream if the file can't be created. </td></tr></table><a doxytag="DGD::Debug::append_file" name="a4"></a>
<p><table border=0 cellpadding=2 cellspacing=0 width="100%"><tr><td class="doxy_md"><table border=0 cellpadding=0 cellspacing=0><tr><td class="doxy_md" nowrap valign="top"><a class="doxy_el" href="$(doxygen_html_namespaceDGD)#a5">stream</a> DGD::Debug::append_file </td><td class="doxy_md" valign="top">(&nbsp;</td><td class="doxy_md" nowrap valign="top">const <a class="doxy_el" href="$(doxygen_html_namespaceDGD)#a5">stream</a> &amp;&nbsp;</td><td class="doxy_mdname1" nowrap valign="top">&nbsp; <em>file</em></td><td class="doxy_md" valign="top">)&nbsp;</td><td class="doxy_md" nowrap></td></tr></table></td></tr></table><table border=0 cellpadding=0 cellspacing=5><tr><td> &nbsp; </td><td><p> Append a file stream to the stream list. <p> This one is used when the application must create the stream by itself. Note that the stream will be deallocated by the smart pointer. </td></tr></table><a doxytag="DGD::Debug::main_file" name="a5"></a>
<p><table border=0 cellpadding=2 cellspacing=0 width="100%"><tr><td class="doxy_md"><table border=0 cellpadding=0 cellspacing=0><tr><td class="doxy_md" nowrap valign="top"><a class="doxy_el" href="$(doxygen_html_namespaceDGD)#a5">stream</a> DGD::Debug::main_file </td><td class="doxy_md" valign="top">(&nbsp;</td><td class="doxy_mdname1" nowrap valign="top">&nbsp; </td><td class="doxy_md" valign="top">)&nbsp;</td><td class="doxy_md" nowrap> const</td></tr></table></td></tr></table><table border=0 cellpadding=0 cellspacing=5><tr><td> &nbsp; </td><td><p> Return main file stream. <p></td></tr></table><a doxytag="DGD::Debug::create_channel" name="a6"></a>
<p><table border=0 cellpadding=2 cellspacing=0 width="100%"><tr><td class="doxy_md"><table border=0 cellpadding=0 cellspacing=0><tr><td class="doxy_md" nowrap valign="top"><a class="doxy_el" href="$(doxygen_html_classDGD_1_1channel)">channel</a> &amp; DGD::Debug::create_channel </td><td class="doxy_md" valign="top">(&nbsp;</td><td class="doxy_md" nowrap valign="top">const std::string &amp;&nbsp;</td><td class="doxy_mdname1" nowrap valign="top">&nbsp; <em>name</em></td><td class="doxy_md" valign="top">)&nbsp;</td><td class="doxy_md" nowrap></td></tr></table></td></tr></table><table border=0 cellpadding=0 cellspacing=5><tr><td> &nbsp; </td><td><p> Create channel. <p> This method creates a new channel if there is no channel with the given name in the channels list. If a channel with the given name does already exist it is returned. <dl compact><dt><b>See also: </b><dd><a class="doxy_el" href="$(doxygen_html_classDGD_1_1Debug)#a8">Debug::operator[]</a></dl></td></tr></table><a doxytag="DGD::Debug::operator channel_ref" name="a7"></a>
<p><table border=0 cellpadding=2 cellspacing=0 width="100%"><tr><td class="doxy_md"><table border=0 cellpadding=0 cellspacing=0><tr><td class="doxy_md" nowrap valign="top"> DGD::Debug::operator <a class="doxy_el" href="$(doxygen_html_classDGD_1_1Debug)#s0">channel_ref</a></td><td class="doxy_md" valign="top">(&nbsp;</td><td class="doxy_mdname1" nowrap valign="top">&nbsp; </td><td class="doxy_md" valign="top">)&nbsp;</td><td class="doxy_md" nowrap> const</td></tr></table></td></tr></table><table border=0 cellpadding=0 cellspacing=5><tr><td> &nbsp; </td><td><p></td></tr></table><a doxytag="DGD::Debug::operator[]" name="a8"></a>
<p><table border=0 cellpadding=2 cellspacing=0 width="100%"><tr><td class="doxy_md"><table border=0 cellpadding=0 cellspacing=0><tr><td class="doxy_md" nowrap valign="top"><a class="doxy_el" href="$(doxygen_html_classDGD_1_1Debug)#s2">Debug::channel_ptr</a> DGD::Debug::operator[] </td><td class="doxy_md" valign="top">(&nbsp;</td><td class="doxy_md" nowrap valign="top">const std::string &amp;&nbsp;</td><td class="doxy_mdname1" nowrap valign="top">&nbsp; <em>name</em></td><td class="doxy_md" valign="top">)&nbsp;</td><td class="doxy_md" nowrap></td></tr></table></td></tr></table><table border=0 cellpadding=0 cellspacing=5><tr><td> &nbsp; </td><td><p> Get channel by name. <p><dl compact><dt><b>Returns :</b><dd> Pointer to the channel with the given name or NULL. </dl><dl compact><dt><b>See also: </b><dd><a class="doxy_el" href="$(doxygen_html_classDGD_1_1Debug)#a6">Debug::create_channel</a>(const std::string&amp;) </dl></td></tr></table><a doxytag="DGD::Debug::current" name="a9"></a>
<p><table border=0 cellpadding=2 cellspacing=0 width="100%"><tr><td class="doxy_md"><table border=0 cellpadding=0 cellspacing=0><tr><td class="doxy_md" nowrap valign="top"> void DGD::Debug::current </td><td class="doxy_md" valign="top">(&nbsp;</td><td class="doxy_md" nowrap valign="top">const std::string &amp;&nbsp;</td><td class="doxy_mdname1" nowrap valign="top">&nbsp; <em>name</em></td><td class="doxy_md" valign="top">)&nbsp;</td><td class="doxy_md" nowrap></td></tr></table></td></tr></table><table border=0 cellpadding=0 cellspacing=5><tr><td> &nbsp; </td><td><p> Set current channel. <p><dl compact><dt><b>See also: </b><dd><a class="doxy_el" href="$(doxygen_html_classDGD_1_1Debug)#a9">Debug::current</a>() </dl></td></tr></table><a doxytag="DGD::Debug::current" name="a10"></a>
<p><table border=0 cellpadding=2 cellspacing=0 width="100%"><tr><td class="doxy_md"><table border=0 cellpadding=0 cellspacing=0><tr><td class="doxy_md" nowrap valign="top"><a class="doxy_el" href="$(doxygen_html_classDGD_1_1Debug)#s2">Debug::channel_ptr</a> DGD::Debug::current </td><td class="doxy_md" valign="top">(&nbsp;</td><td class="doxy_mdname1" nowrap valign="top">&nbsp; </td><td class="doxy_md" valign="top">)&nbsp;</td><td class="doxy_md" nowrap> const</td></tr></table></td></tr></table><table border=0 cellpadding=0 cellspacing=5><tr><td> &nbsp; </td><td><p> Return current channel. <p><dl compact><dt><b>See also: </b><dd><a class="doxy_el" href="$(doxygen_html_classDGD_1_1Debug)#a9">Debug::current</a>(const std::string&amp;) </dl></td></tr></table><a doxytag="DGD::Debug::factory" name="d0"></a>
<p><table border=0 cellpadding=2 cellspacing=0 width="100%"><tr><td class="doxy_md"><table border=0 cellpadding=0 cellspacing=0><tr><td class="doxy_md" nowrap valign="top"> Debug * DGD::Debug::factory </td><td class="doxy_md" valign="top">(&nbsp;</td><td class="doxy_mdname1" nowrap valign="top">&nbsp; </td><td class="doxy_md" valign="top">)&nbsp;</td><td class="doxy_md" nowrap><code> [static]</code></td></tr></table></td></tr></table><table border=0 cellpadding=0 cellspacing=5><tr><td> &nbsp; </td><td><p> Return pointer to the global <a class="doxy_el" href="$(doxygen_html_classDGD_1_1Debug)">Debug</a> factory. <p><dl compact><dt><b>See also: </b><dd><a class="doxy_el" href="$(doxygen_html_classDGD_1_1Debug)#d1">Debug::create_factory</a>(int,char**) </dl></td></tr></table><a doxytag="DGD::Debug::create_factory" name="d1"></a>
<p><table border=0 cellpadding=2 cellspacing=0 width="100%"><tr><td class="doxy_md"><table border=0 cellpadding=0 cellspacing=0><tr><td class="doxy_md" nowrap valign="top"><a class="doxy_el" href="$(doxygen_html_classDGD_1_1Debug)#s1">Debug::debug_factory_ref</a> DGD::Debug::create_factory </td><td class="doxy_md" valign="top">(&nbsp;</td><td class="doxy_md" nowrap valign="top">int&nbsp;</td><td class="doxy_mdname" nowrap>&nbsp; <em>argc</em>, </td></tr><tr><td></td><td></td><td class="doxy_md" nowrap>char **&nbsp;</td><td class="doxy_mdname" nowrap>&nbsp; <em>argv</em></td></tr><tr><td></td><td class="doxy_md">)&nbsp;</td><td class="doxy_md" colspan=2><code> [static]</code></td></tr></table></td></tr></table><table border=0 cellpadding=0 cellspacing=5><tr><td> &nbsp; </td><td><p> Create global <a class="doxy_el" href="$(doxygen_html_classDGD_1_1Debug)">Debug</a> factory. <p> This function must be called at most once during the application lifetime. It creates the factory and calls <a class="doxy_el" href="$(doxygen_html_classDGD_1_1Debug)#a2">Debug::process_options</a>(int,char**). <dl compact><dt><b>Returns :</b><dd> This method returns a smart pointer to the factory. This smart pointer <b>must</b> be used to ensure proper factory destruction, even when the application crashes. Usually you need only a single instance of the pointer: <div class="doxy_fragment"><pre> <span class="doxy_keywordtype">int</span> main( <span class="doxy_keywordtype">int</span> argc, <span class="doxy_keywordtype">char</span>** argv ) {
     <span class="doxy_keyword">using</span> <span class="doxy_keyword">namespace </span>DGD;
     <a class="doxy_code" href="$(doxygen_html_classDGD_1_1Debug)#s1">debug_factory_ref</a> <a class="doxy_code" href="$(doxygen_html_classDGD_1_1Debug)#d0">factory</a> = <a class="doxy_code" href="$(doxygen_html_classDGD_1_1Debug)#d1">create_factory</a>( argc, argv );
     ...
 }
</pre></div> Note that the 'factory' variable is destructed always when main() does exit. It will be destructed even if application crashes on unexpected exception. It is bad idea to make this variable global or static since not all compilers ensure that global variables are destructed on the crash (at least msvc6.0sp5 does not). </dl><dl compact><dt><b>See also: </b><dd><a class="doxy_el" href="$(doxygen_html_classDGD_1_1Debug)#p0">Debug::debug_factory</a> , <a class="doxy_el" href="$(doxygen_html_classDGD_1_1Debug)#d0">Debug::factory</a>() </dl></td></tr></table><a doxytag="DGD::Debug::apply_options" name="b0"></a>
<p><table border=0 cellpadding=2 cellspacing=0 width="100%"><tr><td class="doxy_md"><table border=0 cellpadding=0 cellspacing=0><tr><td class="doxy_md" nowrap valign="top"> void DGD::Debug::apply_options </td><td class="doxy_md" valign="top">(&nbsp;</td><td class="doxy_md" nowrap valign="top"><a class="doxy_el" href="$(doxygen_html_classDGD_1_1Debug)#s2">channel_ptr</a> &amp;&nbsp;</td><td class="doxy_mdname1" nowrap valign="top">&nbsp; <em>chnl</em></td><td class="doxy_md" valign="top">)&nbsp;</td><td class="doxy_md" nowrap><code> [protected]</code></td></tr></table></td></tr></table><table border=0 cellpadding=0 cellspacing=5><tr><td> &nbsp; </td><td><p> Apply default channel-specific options on given channel. <p><dl compact><dt><b>See also: </b><dd><a class="doxy_el" href="$(doxygen_html_classDGD_1_1Debug)#a2">Debug::process_options</a>(int,char**) </dl></td></tr></table><hr>
<h2>Member Data Documentation</h2>
<a doxytag="DGD::Debug::debug_factory" name="p0"></a>
<p><table border=0 cellpadding=2 cellspacing=0 width="100%"><tr><td class="doxy_md"><table border=0 cellpadding=0 cellspacing=0><tr><td class="doxy_md" nowrap valign="top"> Debug * DGD::Debug::debug_factory = NULL<code> [static]</code></td></tr></table></td></tr></table><table border=0 cellpadding=0 cellspacing=5><tr><td> &nbsp; </td><td><p> Global <a class="doxy_el" href="$(doxygen_html_classDGD_1_1Debug)">Debug</a> factory pointer . <p> Use this global static variable with care. It is initialized by <a class="doxy_el" href="$(doxygen_html_classDGD_1_1Debug)#d1">Debug::create_factory</a>(int,char**). This variable is not const, nor const pointer, but changing this variable directly is not recommended. <dl compact><dt><b>See also: </b><dd><a class="doxy_el" href="$(doxygen_html_classDGD_1_1Debug)#d1">Debug::create_factory</a>(int,char**) , <a class="doxy_el" href="$(doxygen_html_classDGD_1_1Debug)#d0">Debug::factory</a>() </dl></td></tr></table><a doxytag="DGD::Debug::m_channels" name="o0"></a>
<p><table border=0 cellpadding=2 cellspacing=0 width="100%"><tr><td class="doxy_md"><table border=0 cellpadding=0 cellspacing=0><tr><td class="doxy_md" nowrap valign="top"><a class="doxy_el" href="$(doxygen_html_classDGD_1_1Debug)#t0">Channel_list</a> DGD::Debug::m_channels<code> [private]</code></td></tr></table></td></tr></table><table border=0 cellpadding=0 cellspacing=5><tr><td> &nbsp; </td><td><p></td></tr></table><a doxytag="DGD::Debug::m_current_channel" name="o1"></a>
<p><table border=0 cellpadding=2 cellspacing=0 width="100%"><tr><td class="doxy_md"><table border=0 cellpadding=0 cellspacing=0><tr><td class="doxy_md" nowrap valign="top"><a class="doxy_el" href="$(doxygen_html_classDGD_1_1Debug)#t1">Channel_iterator</a> DGD::Debug::m_current_channel<code> [private]</code></td></tr></table></td></tr></table><table border=0 cellpadding=0 cellspacing=5><tr><td> &nbsp; </td><td><p></td></tr></table><a doxytag="DGD::Debug::m_files" name="o2"></a>
<p><table border=0 cellpadding=2 cellspacing=0 width="100%"><tr><td class="doxy_md"><table border=0 cellpadding=0 cellspacing=0><tr><td class="doxy_md" nowrap valign="top"><a class="doxy_el" href="$(doxygen_html_classDGD_1_1Debug)#t2">File_list</a> DGD::Debug::m_files<code> [private]</code></td></tr></table></td></tr></table><table border=0 cellpadding=0 cellspacing=5><tr><td> &nbsp; </td><td><p></td></tr></table><a doxytag="DGD::Debug::m_main_file" name="o3"></a>
<p><table border=0 cellpadding=2 cellspacing=0 width="100%"><tr><td class="doxy_md"><table border=0 cellpadding=0 cellspacing=0><tr><td class="doxy_md" nowrap valign="top"><a class="doxy_el" href="$(doxygen_html_namespaceDGD)#a5">stream</a> DGD::Debug::m_main_file<code> [private]</code></td></tr></table></td></tr></table><table border=0 cellpadding=0 cellspacing=5><tr><td> &nbsp; </td><td><p></td></tr></table><a doxytag="DGD::Debug::m_args_info" name="o4"></a>
<p><table border=0 cellpadding=2 cellspacing=0 width="100%"><tr><td class="doxy_md"><table border=0 cellpadding=0 cellspacing=0><tr><td class="doxy_md" nowrap valign="top"> dgd_gengetopt_args_info DGD::Debug::m_args_info<code> [private]</code></td></tr></table></td></tr></table><table border=0 cellpadding=0 cellspacing=5><tr><td> &nbsp; </td><td><p></td></tr></table><hr>The documentation for this class was generated from the following files:<ul><li><a class="doxy_el" href="$(doxygen_html_dgDebug_8h-source)">dgDebug.h</a><li><a class="doxy_el" href="$(doxygen_html_dgDebug_8cpp)">dgDebug.cpp</a></ul><hr><address style="align: right;"><small>Generated on Mon Dec 9 18:30:03 2002 for Depression Glass Debug Library by <a href="http://www.doxygen.org/index.html"> <img align="middle" alt="doxygen" border=0 height=53 src="$(doxygen)" width=110></a>1.2.17 </small></address>
</content>

<content name="doxygen_html_classDGD_1_1debug__disabled-members" format="text/html">
<wmmeta name="title" value="Member List" />
<h1>DGD::debug_disabled Member List</h1>
This is the complete list of members for <a class="doxy_el" href="$(doxygen_html_classDGD_1_1debug__disabled)">DGD::debug_disabled</a>
, including all inherited members.<table><tr bgcolor="#f0f0f0"><td><a class="doxy_el" href="$(doxygen_html_classDGD_1_1debug__disabled)#a0">what</a>() const</td><td><a class="doxy_el" href="$(doxygen_html_classDGD_1_1debug__disabled)">DGD::debug_disabled</a></td><td><code> [inline]</code></td></tr></table>
<hr>
<address style="align: right;"><small>Generated on Mon Dec 9 18:30:03 2002 for Depression Glass Debug Library by <a href="http://www.doxygen.org/index.html"> <img align="middle" alt="doxygen" border=0 height=53 src="$(doxygen)" width=110></a>1.2.17 </small></address>
</content>

<content name="doxygen_html_classDGD_1_1debug__disabled" format="text/html">
<wmmeta name="title" value="DGD::debug_disabled class Reference" />
<h1>DGD::debug_disabled Class Reference</h1>
Disabled <a class="doxy_el" href="$(doxygen_html_classDGD_1_1Debug)">Debug</a>
 exception. <a href="#_details">More...</a>
<p><a href="$(doxygen_html_classDGD_1_1debug__disabled-members)">List of all members.</a>
<h2>Public Methods</h2>
<ul><li>const char * <a class="doxy_el" href="$(doxygen_html_classDGD_1_1debug__disabled)#a0">what</a> () const </ul>
<hr>
<a name="_details"></a>
<h2>Detailed Description</h2>
 Disabled <a class="doxy_el" href="$(doxygen_html_classDGD_1_1Debug)">Debug</a>
 exception. <p> This exception is thrown when <a class="doxy_el" href="$(doxygen_html_classDGD_1_1Debug)#d1">Debug::create_factory</a>(int,char**) tries to create the debug factory, but the debug output is diabled by command line options. <dl compact><dt><b>See also: </b><dd><a class="doxy_el" href="$(doxygen_html_classDGD_1_1Debug)#a2">Debug::process_options</a>(int,char**) </dl>
<p><hr>
<h2>Member Function Documentation</h2>
<a doxytag="DGD::debug_disabled::what" name="a0"></a>
<p><table border=0 cellpadding=2 cellspacing=0 width="100%"><tr><td class="doxy_md"><table border=0 cellpadding=0 cellspacing=0><tr><td class="doxy_md" nowrap valign="top"> const char* DGD::debug_disabled::what </td><td class="doxy_md" valign="top">(&nbsp;</td><td class="doxy_mdname1" nowrap valign="top">&nbsp; </td><td class="doxy_md" valign="top">)&nbsp;</td><td class="doxy_md" nowrap> const<code> [inline]</code></td></tr></table></td></tr></table><table border=0 cellpadding=0 cellspacing=5><tr><td> &nbsp; </td><td><p></td></tr></table><hr>The documentation for this class was generated from the following file:<ul><li><a class="doxy_el" href="$(doxygen_html_dgDebug_8cpp)">dgDebug.cpp</a></ul><hr><address style="align: right;"><small>Generated on Mon Dec 9 18:30:03 2002 for Depression Glass Debug Library by <a href="http://www.doxygen.org/index.html"> <img align="middle" alt="doxygen" border=0 height=53 src="$(doxygen)" width=110></a>1.2.17 </small></address>
</content>

<content name="doxygen_html_classDGD_1_1exit__required-members" format="text/html">
<wmmeta name="title" value="Member List" />
<h1>DGD::exit_required Member List</h1>
This is the complete list of members for <a class="doxy_el" href="$(doxygen_html_classDGD_1_1exit__required)">DGD::exit_required</a>
, including all inherited members.<table><tr bgcolor="#f0f0f0"><td><a class="doxy_el" href="$(doxygen_html_classDGD_1_1exit__required)#a0">what</a>() const</td><td><a class="doxy_el" href="$(doxygen_html_classDGD_1_1exit__required)">DGD::exit_required</a></td><td><code> [inline]</code></td></tr></table>
<hr>
<address style="align: right;"><small>Generated on Mon Dec 9 18:30:03 2002 for Depression Glass Debug Library by <a href="http://www.doxygen.org/index.html"> <img align="middle" alt="doxygen" border=0 height=53 src="$(doxygen)" width=110></a>1.2.17 </small></address>
</content>

<content name="doxygen_html_classDGD_1_1exit__required" format="text/html">
<wmmeta name="title" value="DGD::exit_required class Reference" />
<h1>DGD::exit_required Class Reference</h1>
Exit application exception. <a href="#_details">More...</a>
<p><a href="$(doxygen_html_classDGD_1_1exit__required-members)">List of all members.</a>
<h2>Public Methods</h2>
<ul><li>const char * <a class="doxy_el" href="$(doxygen_html_classDGD_1_1exit__required)#a0">what</a> () const </ul>
<hr>
<a name="_details"></a>
<h2>Detailed Description</h2>
 Exit application exception. <p> This exception is thrown when <a class="doxy_el" href="$(doxygen_html_classDGD_1_1Debug)#a2">Debug::process_options</a>(int,char**) encounters option which requires the entire application termination. <dl compact><dt><b>See also: </b><dd><a class="doxy_el" href="$(doxygen_html_classDGD_1_1Debug)#d1">Debug::create_factory</a>(int,char**) , <a class="doxy_el" href="$(doxygen_html_classDGD_1_1Debug)#a2">Debug::process_options</a>(int,char </dl>
<p><hr>
<h2>Member Function Documentation</h2>
<a doxytag="DGD::exit_required::what" name="a0"></a>
<p><table border=0 cellpadding=2 cellspacing=0 width="100%"><tr><td class="doxy_md"><table border=0 cellpadding=0 cellspacing=0><tr><td class="doxy_md" nowrap valign="top"> const char* DGD::exit_required::what </td><td class="doxy_md" valign="top">(&nbsp;</td><td class="doxy_mdname1" nowrap valign="top">&nbsp; </td><td class="doxy_md" valign="top">)&nbsp;</td><td class="doxy_md" nowrap> const<code> [inline]</code></td></tr></table></td></tr></table><table border=0 cellpadding=0 cellspacing=5><tr><td> &nbsp; </td><td><p></td></tr></table><hr>The documentation for this class was generated from the following file:<ul><li><a class="doxy_el" href="$(doxygen_html_dgDebug_8cpp)">dgDebug.cpp</a></ul><hr><address style="align: right;"><small>Generated on Mon Dec 9 18:30:03 2002 for Depression Glass Debug Library by <a href="http://www.doxygen.org/index.html"> <img align="middle" alt="doxygen" border=0 height=53 src="$(doxygen)" width=110></a>1.2.17 </small></address>
</content>

<content name="doxygen_html_classDGD_1_1funnel-members" format="text/html">
<wmmeta name="title" value="Member List" />
<h1>DGD::funnel Member List</h1>
This is the complete list of members for <a class="doxy_el" href="$(doxygen_html_classDGD_1_1funnel)">DGD::funnel</a>
, including all inherited members.<table><tr bgcolor="#f0f0f0"><td><a class="doxy_el" href="$(doxygen_html_classDGD_1_1funnel)#a0">funnel</a>(std::ostream &amp;physical_stream)</td><td><a class="doxy_el" href="$(doxygen_html_classDGD_1_1funnel)">DGD::funnel</a></td><td></td></tr><tr bgcolor="#f0f0f0"><td><a class="doxy_el" href="$(doxygen_html_classDGD_1_1funnel)#a2">header</a>()</td><td><a class="doxy_el" href="$(doxygen_html_classDGD_1_1funnel)">DGD::funnel</a></td><td><code> [virtual]</code></td></tr><tr bgcolor="#f0f0f0"><td><a class="doxy_el" href="$(doxygen_html_classDGD_1_1funnel)#o0">m_buffer</a></td><td><a class="doxy_el" href="$(doxygen_html_classDGD_1_1funnel)">DGD::funnel</a></td><td><code> [private]</code></td></tr><tr bgcolor="#f0f0f0"><td><a class="doxy_el" href="$(doxygen_html_classDGD_1_1funnel)#b0">operator()</a>(unsigned long line, unsigned long column, unsigned long bytes)</td><td><a class="doxy_el" href="$(doxygen_html_classDGD_1_1funnel)">DGD::funnel</a></td><td><code> [inline, protected, virtual]</code></td></tr><tr bgcolor="#f0f0f0"><td><a class="doxy_el" href="$(doxygen_html_classDGD_1_1funnel)#s0">Parent</a> typedef</td><td><a class="doxy_el" href="$(doxygen_html_classDGD_1_1funnel)">DGD::funnel</a></td><td></td></tr><tr bgcolor="#f0f0f0"><td><a class="doxy_el" href="$(doxygen_html_classDGD_1_1funnel)#a1">rdbuf</a>()</td><td><a class="doxy_el" href="$(doxygen_html_classDGD_1_1funnel)">DGD::funnel</a></td><td></td></tr></table>
<hr>
<address style="align: right;"><small>Generated on Mon Dec 9 18:30:04 2002 for Depression Glass Debug Library by <a href="http://www.doxygen.org/index.html"> <img align="middle" alt="doxygen" border=0 height=53 src="$(doxygen)" width=110></a>1.2.17 </small></address>
</content>

<content name="doxygen_html_classDGD_1_1funnel" format="text/html">
<wmmeta name="title" value="DGD::funnel class Reference" />
<h1>DGD::funnel Class Reference</h1>
<code>#include &lt;<a class="doxy_el" href="$(doxygen_html_dgFunnel_8h-source)">dgFunnel.h</a>&gt;</code>
<p> Inheritance diagram for DGD::funnel:
<p><center><img alt="Inheritance graph" border=0 src="$(classDGD_1_1funnel__inherit__graph)" usemap="#DGD_1_1funnel__inherit__map"></center><map name="DGD_1_1funnel__inherit__map"><area alt="" coords="17,133,137,152" href="$(doxygen_html_classDGD_1_1multifile__log)" shape="rect"><area alt="" coords="0,0,155,19" href="$(doxygen_html_classDGD_1_1funnelbuf_1_1Callback)" shape="rect"></map><center><font size=2>[<a href="$(doxygen_html_graph_legend)">legend</a>]</font></center>Collaboration diagram for DGD::funnel:
<p><center><img alt="Collaboration graph" border=0 src="$(classDGD_1_1funnel__coll__graph)" usemap="#DGD_1_1funnel__coll__map"></center><map name="DGD_1_1funnel__coll__map"><area alt="" coords="0,0,155,19" href="$(doxygen_html_classDGD_1_1funnelbuf_1_1Callback)" shape="rect"><area alt="" coords="105,83,207,101" href="$(doxygen_html_classDGD_1_1funnelbuf)" shape="rect"><area alt="" coords="188,0,295,19" href="$(doxygen_html_classDGD_1_1channelbuf)" shape="rect"></map><center><font size=2>[<a href="$(doxygen_html_graph_legend)">legend</a>]</font></center><a href="$(doxygen_html_classDGD_1_1funnel-members)">List of all members.</a>
<h2>Public Types</h2>
<ul><li>typedef std::ostream <a class="doxy_el" href="$(doxygen_html_classDGD_1_1funnel)#s0">Parent</a></ul>
<h2>Public Methods</h2>
<ul><li><a class="doxy_el" href="$(doxygen_html_classDGD_1_1funnel)#a0">funnel</a> (std::ostream &amp;physical_stream) <li><a class="doxy_el" href="$(doxygen_html_classDGD_1_1funnelbuf)">funnelbuf</a> &amp; <a class="doxy_el" href="$(doxygen_html_classDGD_1_1funnel)#a1">rdbuf</a> () <li>virtual void <a class="doxy_el" href="$(doxygen_html_classDGD_1_1funnel)#a2">header</a> () </ul>
<h2>Protected Methods</h2>
<ul><li>virtual void <a class="doxy_el" href="$(doxygen_html_classDGD_1_1funnel)#b0">operator()</a> (unsigned long line, unsigned long column, unsigned long bytes) </ul>
<h2>Private Attributes</h2>
<ul><li><a class="doxy_el" href="$(doxygen_html_classDGD_1_1funnelbuf)">funnelbuf</a> <a class="doxy_el" href="$(doxygen_html_classDGD_1_1funnel)#o0">m_buffer</a></ul>
<hr>
<h2>Member Typedef Documentation</h2>
<a doxytag="DGD::funnel::Parent" name="s0"></a>
<p><table border=0 cellpadding=2 cellspacing=0 width="100%"><tr><td class="doxy_md"><table border=0 cellpadding=0 cellspacing=0><tr><td class="doxy_md" nowrap valign="top"> typedef std::ostream DGD::funnel::Parent </td></tr></table></td></tr></table><table border=0 cellpadding=0 cellspacing=5><tr><td> &nbsp; </td><td><p></td></tr></table><hr>
<h2>Constructor &amp; Destructor Documentation</h2>
<a doxytag="DGD::funnel::funnel" name="a0"></a>
<p><table border=0 cellpadding=2 cellspacing=0 width="100%"><tr><td class="doxy_md"><table border=0 cellpadding=0 cellspacing=0><tr><td class="doxy_md" nowrap valign="top"> DGD::funnel::funnel </td><td class="doxy_md" valign="top">(&nbsp;</td><td class="doxy_md" nowrap valign="top">std::ostream &amp;&nbsp;</td><td class="doxy_mdname1" nowrap valign="top">&nbsp; <em>physical_stream</em></td><td class="doxy_md" valign="top">)&nbsp;</td><td class="doxy_md" nowrap></td></tr></table></td></tr></table><table border=0 cellpadding=0 cellspacing=5><tr><td> &nbsp; </td><td><p></td></tr></table><hr>
<h2>Member Function Documentation</h2>
<a doxytag="DGD::funnel::rdbuf" name="a1"></a>
<p><table border=0 cellpadding=2 cellspacing=0 width="100%"><tr><td class="doxy_md"><table border=0 cellpadding=0 cellspacing=0><tr><td class="doxy_md" nowrap valign="top"><a class="doxy_el" href="$(doxygen_html_classDGD_1_1funnelbuf)">funnelbuf</a> &amp; DGD::funnel::rdbuf </td><td class="doxy_md" valign="top">(&nbsp;</td><td class="doxy_mdname1" nowrap valign="top">&nbsp; </td><td class="doxy_md" valign="top">)&nbsp;</td><td class="doxy_md" nowrap></td></tr></table></td></tr></table><table border=0 cellpadding=0 cellspacing=5><tr><td> &nbsp; </td><td><p></td></tr></table><a doxytag="DGD::funnel::header" name="a2"></a>
<p><table border=0 cellpadding=2 cellspacing=0 width="100%"><tr><td class="doxy_md"><table border=0 cellpadding=0 cellspacing=0><tr><td class="doxy_md" nowrap valign="top"> void DGD::funnel::header </td><td class="doxy_md" valign="top">(&nbsp;</td><td class="doxy_mdname1" nowrap valign="top">&nbsp; </td><td class="doxy_md" valign="top">)&nbsp;</td><td class="doxy_md" nowrap><code> [virtual]</code></td></tr></table></td></tr></table><table border=0 cellpadding=0 cellspacing=5><tr><td> &nbsp; </td><td><p></td></tr></table><a doxytag="DGD::funnel::operator()" name="b0"></a>
<p><table border=0 cellpadding=2 cellspacing=0 width="100%"><tr><td class="doxy_md"><table border=0 cellpadding=0 cellspacing=0><tr><td class="doxy_md" nowrap valign="top"> virtual void DGD::funnel::operator() </td><td class="doxy_md" valign="top">(&nbsp;</td><td class="doxy_md" nowrap valign="top">unsigned long&nbsp;</td><td class="doxy_mdname" nowrap>&nbsp; <em>line</em>, </td></tr><tr><td></td><td></td><td class="doxy_md" nowrap>unsigned long&nbsp;</td><td class="doxy_mdname" nowrap>&nbsp; <em>column</em>, </td></tr><tr><td></td><td></td><td class="doxy_md" nowrap>unsigned long&nbsp;</td><td class="doxy_mdname" nowrap>&nbsp; <em>bytes</em></td></tr><tr><td></td><td class="doxy_md">)&nbsp;</td><td class="doxy_md" colspan=2><code> [inline, protected, virtual]</code></td></tr></table></td></tr></table><table border=0 cellpadding=0 cellspacing=5><tr><td> &nbsp; </td><td><p><p> Implements <a class="doxy_el" href="$(doxygen_html_classDGD_1_1funnelbuf_1_1Callback)#a0">DGD::funnelbuf::Callback</a>. <p> Reimplemented in <a class="doxy_el" href="$(doxygen_html_classDGD_1_1multifile__log)#c0">DGD::multifile_log</a>. </td></tr></table><hr>
<h2>Member Data Documentation</h2>
<a doxytag="DGD::funnel::m_buffer" name="o0"></a>
<p><table border=0 cellpadding=2 cellspacing=0 width="100%"><tr><td class="doxy_md"><table border=0 cellpadding=0 cellspacing=0><tr><td class="doxy_md" nowrap valign="top"><a class="doxy_el" href="$(doxygen_html_classDGD_1_1funnelbuf)">funnelbuf</a> DGD::funnel::m_buffer<code> [private]</code></td></tr></table></td></tr></table><table border=0 cellpadding=0 cellspacing=5><tr><td> &nbsp; </td><td><p></td></tr></table><hr>The documentation for this class was generated from the following files:<ul><li><a class="doxy_el" href="$(doxygen_html_dgFunnel_8h-source)">dgFunnel.h</a><li><a class="doxy_el" href="$(doxygen_html_dgFunnel_8cpp)">dgFunnel.cpp</a></ul><hr><address style="align: right;"><small>Generated on Mon Dec 9 18:30:04 2002 for Depression Glass Debug Library by <a href="http://www.doxygen.org/index.html"> <img align="middle" alt="doxygen" border=0 height=53 src="$(doxygen)" width=110></a>1.2.17 </small></address>
</content>

<content name="doxygen_html_classDGD_1_1funnelbuf-members" format="text/html">
<wmmeta name="title" value="Member List" />
<h1>DGD::funnelbuf Member List</h1>
This is the complete list of members for <a class="doxy_el" href="$(doxygen_html_classDGD_1_1funnelbuf)">DGD::funnelbuf</a>
, including all inherited members.<table><tr bgcolor="#f0f0f0"><td><a class="doxy_el" href="$(doxygen_html_classDGD_1_1funnelbuf)#c1">assoc</a>(std::ostream *)</td><td><a class="doxy_el" href="$(doxygen_html_classDGD_1_1funnelbuf)">DGD::funnelbuf</a></td><td><code> [private]</code></td></tr><tr bgcolor="#f0f0f0"><td><a class="doxy_el" href="$(doxygen_html_classDGD_1_1channelbuf)#t0">Assoc_list</a> typedef</td><td><a class="doxy_el" href="$(doxygen_html_classDGD_1_1channelbuf)">DGD::channelbuf</a></td><td><code> [protected]</code></td></tr><tr bgcolor="#f0f0f0"><td><a class="doxy_el" href="$(doxygen_html_classDGD_1_1channelbuf)#a24">bytes_written</a>() const</td><td><a class="doxy_el" href="$(doxygen_html_classDGD_1_1channelbuf)">DGD::channelbuf</a></td><td></td></tr><tr bgcolor="#f0f0f0"><td><a class="doxy_el" href="$(doxygen_html_classDGD_1_1funnelbuf)#c2">callback</a>(Callback *cb)</td><td><a class="doxy_el" href="$(doxygen_html_classDGD_1_1funnelbuf)">DGD::funnelbuf</a></td><td><code> [private]</code></td></tr><tr bgcolor="#f0f0f0"><td><a class="doxy_el" href="$(doxygen_html_classDGD_1_1funnelbuf)#c3">callback</a>() const</td><td><a class="doxy_el" href="$(doxygen_html_classDGD_1_1funnelbuf)">DGD::funnelbuf</a></td><td><code> [private]</code></td></tr><tr bgcolor="#f0f0f0"><td><a class="doxy_el" href="$(doxygen_html_classDGD_1_1channelbuf)#a0">channelbuf</a>()</td><td><a class="doxy_el" href="$(doxygen_html_classDGD_1_1channelbuf)">DGD::channelbuf</a></td><td></td></tr><tr bgcolor="#f0f0f0"><td><a class="doxy_el" href="$(doxygen_html_classDGD_1_1channelbuf)#a6">column</a>() const</td><td><a class="doxy_el" href="$(doxygen_html_classDGD_1_1channelbuf)">DGD::channelbuf</a></td><td></td></tr><tr bgcolor="#f0f0f0"><td><a class="doxy_el" href="$(doxygen_html_classDGD_1_1channelbuf)#a3">dassoc</a>(std::ostream *)</td><td><a class="doxy_el" href="$(doxygen_html_classDGD_1_1channelbuf)">DGD::channelbuf</a></td><td></td></tr><tr bgcolor="#f0f0f0"><td><a class="doxy_el" href="$(doxygen_html_classDGD_1_1channelbuf)#a4">dassoc</a>()</td><td><a class="doxy_el" href="$(doxygen_html_classDGD_1_1channelbuf)">DGD::channelbuf</a></td><td></td></tr><tr bgcolor="#f0f0f0"><td><a class="doxy_el" href="$(doxygen_html_classDGD_1_1channelbuf)#a10">decr_indent</a>()</td><td><a class="doxy_el" href="$(doxygen_html_classDGD_1_1channelbuf)">DGD::channelbuf</a></td><td></td></tr><tr bgcolor="#f0f0f0"><td><a class="doxy_el" href="$(doxygen_html_classDGD_1_1channelbuf)#s6s2">DefaultBufferSize</a> enum value</td><td><a class="doxy_el" href="$(doxygen_html_classDGD_1_1channelbuf)">DGD::channelbuf</a></td><td></td></tr><tr bgcolor="#f0f0f0"><td><a class="doxy_el" href="$(doxygen_html_classDGD_1_1channelbuf)#s6s5">DefaultIndentStep</a> enum value</td><td><a class="doxy_el" href="$(doxygen_html_classDGD_1_1channelbuf)">DGD::channelbuf</a></td><td></td></tr><tr bgcolor="#f0f0f0"><td><a class="doxy_el" href="$(doxygen_html_classDGD_1_1channelbuf)#s6s3">DefaultMaxWidth</a> enum value</td><td><a class="doxy_el" href="$(doxygen_html_classDGD_1_1channelbuf)">DGD::channelbuf</a></td><td></td></tr><tr bgcolor="#f0f0f0"><td><a class="doxy_el" href="$(doxygen_html_classDGD_1_1channelbuf)#s6s4">DefaultMinWidth</a> enum value</td><td><a class="doxy_el" href="$(doxygen_html_classDGD_1_1channelbuf)">DGD::channelbuf</a></td><td></td></tr><tr bgcolor="#f0f0f0"><td><a class="doxy_el" href="$(doxygen_html_classDGD_1_1channelbuf)#s6">DefaultValues</a> enum name</td><td><a class="doxy_el" href="$(doxygen_html_classDGD_1_1channelbuf)">DGD::channelbuf</a></td><td></td></tr><tr bgcolor="#f0f0f0"><td><a class="doxy_el" href="$(doxygen_html_classDGD_1_1channelbuf)#b3">find_one_of</a>(const char_type *s, const unsigned int n, const char_type *c_set) const</td><td><a class="doxy_el" href="$(doxygen_html_classDGD_1_1channelbuf)">DGD::channelbuf</a></td><td><code> [protected]</code></td></tr><tr bgcolor="#f0f0f0"><td><a class="doxy_el" href="$(doxygen_html_classDGD_1_1funnelbuf)#l0">funnel</a> class</td><td><a class="doxy_el" href="$(doxygen_html_classDGD_1_1funnelbuf)">DGD::funnelbuf</a></td><td><code> [friend]</code></td></tr><tr bgcolor="#f0f0f0"><td><a class="doxy_el" href="$(doxygen_html_classDGD_1_1funnelbuf)#a0">funnelbuf</a>()</td><td><a class="doxy_el" href="$(doxygen_html_classDGD_1_1funnelbuf)">DGD::funnelbuf</a></td><td></td></tr><tr bgcolor="#f0f0f0"><td><a class="doxy_el" href="$(doxygen_html_classDGD_1_1channelbuf)#a9">incr_indent</a>()</td><td><a class="doxy_el" href="$(doxygen_html_classDGD_1_1channelbuf)">DGD::channelbuf</a></td><td></td></tr><tr bgcolor="#f0f0f0"><td><a class="doxy_el" href="$(doxygen_html_classDGD_1_1channelbuf)#a11">indent</a>(const unsigned int)</td><td><a class="doxy_el" href="$(doxygen_html_classDGD_1_1channelbuf)">DGD::channelbuf</a></td><td></td></tr><tr bgcolor="#f0f0f0"><td><a class="doxy_el" href="$(doxygen_html_classDGD_1_1channelbuf)#a12">indent</a>() const</td><td><a class="doxy_el" href="$(doxygen_html_classDGD_1_1channelbuf)">DGD::channelbuf</a></td><td></td></tr><tr bgcolor="#f0f0f0"><td><a class="doxy_el" href="$(doxygen_html_classDGD_1_1channelbuf)#a7">indent_step</a>(unsigned int step)</td><td><a class="doxy_el" href="$(doxygen_html_classDGD_1_1channelbuf)">DGD::channelbuf</a></td><td></td></tr><tr bgcolor="#f0f0f0"><td><a class="doxy_el" href="$(doxygen_html_classDGD_1_1channelbuf)#a8">indent_step</a>() const</td><td><a class="doxy_el" href="$(doxygen_html_classDGD_1_1channelbuf)">DGD::channelbuf</a></td><td></td></tr><tr bgcolor="#f0f0f0"><td><a class="doxy_el" href="$(doxygen_html_classDGD_1_1channelbuf)#b4">is_dos_eol</a>(const char_type *p) const</td><td><a class="doxy_el" href="$(doxygen_html_classDGD_1_1channelbuf)">DGD::channelbuf</a></td><td><code> [protected]</code></td></tr><tr bgcolor="#f0f0f0"><td><a class="doxy_el" href="$(doxygen_html_classDGD_1_1channelbuf)#a5">line</a>() const</td><td><a class="doxy_el" href="$(doxygen_html_classDGD_1_1channelbuf)">DGD::channelbuf</a></td><td></td></tr><tr bgcolor="#f0f0f0"><td><a class="doxy_el" href="$(doxygen_html_classDGD_1_1funnelbuf)#o0">m_callback</a></td><td><a class="doxy_el" href="$(doxygen_html_classDGD_1_1funnelbuf)">DGD::funnelbuf</a></td><td><code> [private]</code></td></tr><tr bgcolor="#f0f0f0"><td><a class="doxy_el" href="$(doxygen_html_classDGD_1_1channelbuf)#a15">max_width</a>(unsigned int width)</td><td><a class="doxy_el" href="$(doxygen_html_classDGD_1_1channelbuf)">DGD::channelbuf</a></td><td></td></tr><tr bgcolor="#f0f0f0"><td><a class="doxy_el" href="$(doxygen_html_classDGD_1_1channelbuf)#a16">max_width</a>() const</td><td><a class="doxy_el" href="$(doxygen_html_classDGD_1_1channelbuf)">DGD::channelbuf</a></td><td></td></tr><tr bgcolor="#f0f0f0"><td><a class="doxy_el" href="$(doxygen_html_classDGD_1_1channelbuf)#a13">min_width</a>(unsigned int width)</td><td><a class="doxy_el" href="$(doxygen_html_classDGD_1_1channelbuf)">DGD::channelbuf</a></td><td></td></tr><tr bgcolor="#f0f0f0"><td><a class="doxy_el" href="$(doxygen_html_classDGD_1_1channelbuf)#a14">min_width</a>() const</td><td><a class="doxy_el" href="$(doxygen_html_classDGD_1_1channelbuf)">DGD::channelbuf</a></td><td></td></tr><tr bgcolor="#f0f0f0"><td><a class="doxy_el" href="$(doxygen_html_classDGD_1_1channelbuf)#z0_2">overflow</a>(int_type=traits_type::eof())</td><td><a class="doxy_el" href="$(doxygen_html_classDGD_1_1channelbuf)">DGD::channelbuf</a></td><td><code> [protected, virtual]</code></td></tr><tr bgcolor="#f0f0f0"><td><a class="doxy_el" href="$(doxygen_html_classDGD_1_1channelbuf)#s0">Parent</a> typedef</td><td><a class="doxy_el" href="$(doxygen_html_classDGD_1_1channelbuf)">DGD::channelbuf</a></td><td></td></tr><tr bgcolor="#f0f0f0"><td><a class="doxy_el" href="$(doxygen_html_classDGD_1_1channelbuf)#a23">position</a>() const</td><td><a class="doxy_el" href="$(doxygen_html_classDGD_1_1channelbuf)">DGD::channelbuf</a></td><td></td></tr><tr bgcolor="#f0f0f0"><td><a class="doxy_el" href="$(doxygen_html_classDGD_1_1channelbuf)#s1">position_type</a> typedef</td><td><a class="doxy_el" href="$(doxygen_html_classDGD_1_1channelbuf)">DGD::channelbuf</a></td><td></td></tr><tr bgcolor="#f0f0f0"><td><a class="doxy_el" href="$(doxygen_html_classDGD_1_1funnelbuf)#c0">post_process</a>()</td><td><a class="doxy_el" href="$(doxygen_html_classDGD_1_1funnelbuf)">DGD::funnelbuf</a></td><td><code> [private, virtual]</code></td></tr><tr bgcolor="#f0f0f0"><td><a class="doxy_el" href="$(doxygen_html_classDGD_1_1channelbuf)#b0">propagate</a>(const char_type *begin, const char_type *end)</td><td><a class="doxy_el" href="$(doxygen_html_classDGD_1_1channelbuf)">DGD::channelbuf</a></td><td><code> [protected, virtual]</code></td></tr><tr bgcolor="#f0f0f0"><td><a class="doxy_el" href="$(doxygen_html_classDGD_1_1channelbuf)#b1">propagate</a>(const char_type ch, std::streamsize size)</td><td><a class="doxy_el" href="$(doxygen_html_classDGD_1_1channelbuf)">DGD::channelbuf</a></td><td><code> [protected, virtual]</code></td></tr><tr bgcolor="#f0f0f0"><td><a class="doxy_el" href="$(doxygen_html_classDGD_1_1channelbuf)#z0_0">setbuf</a>(char_type *, std::streamsize)</td><td><a class="doxy_el" href="$(doxygen_html_classDGD_1_1channelbuf)">DGD::channelbuf</a></td><td><code> [protected, virtual]</code></td></tr><tr bgcolor="#f0f0f0"><td><a class="doxy_el" href="$(doxygen_html_classDGD_1_1channelbuf)#a21">space_chars</a>(const char *spc=&quot;\t&quot;)</td><td><a class="doxy_el" href="$(doxygen_html_classDGD_1_1channelbuf)">DGD::channelbuf</a></td><td></td></tr><tr bgcolor="#f0f0f0"><td><a class="doxy_el" href="$(doxygen_html_classDGD_1_1channelbuf)#a22">space_chars</a>() const</td><td><a class="doxy_el" href="$(doxygen_html_classDGD_1_1channelbuf)">DGD::channelbuf</a></td><td></td></tr><tr bgcolor="#f0f0f0"><td><a class="doxy_el" href="$(doxygen_html_classDGD_1_1channelbuf)#z0_1">sync</a>()</td><td><a class="doxy_el" href="$(doxygen_html_classDGD_1_1channelbuf)">DGD::channelbuf</a></td><td><code> [protected, virtual]</code></td></tr><tr bgcolor="#f0f0f0"><td><a class="doxy_el" href="$(doxygen_html_classDGD_1_1channelbuf)#a19">word_wrap</a>(bool allow)</td><td><a class="doxy_el" href="$(doxygen_html_classDGD_1_1channelbuf)">DGD::channelbuf</a></td><td></td></tr><tr bgcolor="#f0f0f0"><td><a class="doxy_el" href="$(doxygen_html_classDGD_1_1channelbuf)#a20">word_wrap</a>() const</td><td><a class="doxy_el" href="$(doxygen_html_classDGD_1_1channelbuf)">DGD::channelbuf</a></td><td></td></tr><tr bgcolor="#f0f0f0"><td><a class="doxy_el" href="$(doxygen_html_classDGD_1_1channelbuf)#a17">wrap</a>(bool allow)</td><td><a class="doxy_el" href="$(doxygen_html_classDGD_1_1channelbuf)">DGD::channelbuf</a></td><td></td></tr><tr bgcolor="#f0f0f0"><td><a class="doxy_el" href="$(doxygen_html_classDGD_1_1channelbuf)#a18">wrap</a>() const</td><td><a class="doxy_el" href="$(doxygen_html_classDGD_1_1channelbuf)">DGD::channelbuf</a></td><td></td></tr><tr bgcolor="#f0f0f0"><td><a class="doxy_el" href="$(doxygen_html_classDGD_1_1channelbuf)#a1">~channelbuf</a>()</td><td><a class="doxy_el" href="$(doxygen_html_classDGD_1_1channelbuf)">DGD::channelbuf</a></td><td></td></tr><tr bgcolor="#f0f0f0"><td><a class="doxy_el" href="$(doxygen_html_classDGD_1_1funnelbuf)#a1">~funnelbuf</a>()</td><td><a class="doxy_el" href="$(doxygen_html_classDGD_1_1funnelbuf)">DGD::funnelbuf</a></td><td></td></tr></table>
<hr>
<address style="align: right;"><small>Generated on Mon Dec 9 18:30:04 2002 for Depression Glass Debug Library by <a href="http://www.doxygen.org/index.html"> <img align="middle" alt="doxygen" border=0 height=53 src="$(doxygen)" width=110></a>1.2.17 </small></address>
</content>

<content name="doxygen_html_classDGD_1_1funnelbuf" format="text/html">
<wmmeta name="title" value="DGD::funnelbuf class Reference" />
<h1>DGD::funnelbuf Class Reference</h1>
<code>#include &lt;<a class="doxy_el" href="$(doxygen_html_dgFunnel_8h-source)">dgFunnel.h</a>&gt;</code>
<p> Inheritance diagram for DGD::funnelbuf:
<p><center><img alt="Inheritance graph" border=0 src="$(classDGD_1_1funnelbuf__inherit__graph)" usemap="#DGD_1_1funnelbuf__inherit__map"></center><map name="DGD_1_1funnelbuf__inherit__map"><area alt="" coords="0,0,107,18" href="$(doxygen_html_classDGD_1_1channelbuf)" shape="rect"></map><center><font size=2>[<a href="$(doxygen_html_graph_legend)">legend</a>]</font></center>Collaboration diagram for DGD::funnelbuf:
<p><center><img alt="Collaboration graph" border=0 src="$(classDGD_1_1funnelbuf__coll__graph)" usemap="#DGD_1_1funnelbuf__coll__map"></center><map name="DGD_1_1funnelbuf__coll__map"><area alt="" coords="0,0,107,18" href="$(doxygen_html_classDGD_1_1channelbuf)" shape="rect"><area alt="" coords="131,0,285,18" href="$(doxygen_html_classDGD_1_1funnelbuf_1_1Callback)" shape="rect"></map><center><font size=2>[<a href="$(doxygen_html_graph_legend)">legend</a>]</font></center><a href="$(doxygen_html_classDGD_1_1funnelbuf-members)">List of all members.</a>
<h2>Public Methods</h2>
<ul><li><a class="doxy_el" href="$(doxygen_html_classDGD_1_1funnelbuf)#a0">funnelbuf</a> () <li><a class="doxy_el" href="$(doxygen_html_classDGD_1_1funnelbuf)#a1">~funnelbuf</a> () </ul>
<h2>Private Methods</h2>
<ul><li>void <a class="doxy_el" href="$(doxygen_html_classDGD_1_1funnelbuf)#c0">post_process</a> () <dl class="doxy_el"><dd><font size="-1"><em>This is a virtual callback.</em> <a href="#c0"></a><em><br><br></em></font></dl><li>void <a class="doxy_el" href="$(doxygen_html_classDGD_1_1funnelbuf)#c1">assoc</a> (std::ostream *) <dl class="doxy_el"><dd><font size="-1"><em>Append the given stream to the association list.</em> <a href="#c1"></a><em><br><br></em></font></dl><li>void <a class="doxy_el" href="$(doxygen_html_classDGD_1_1funnelbuf)#c2">callback</a> (<a class="doxy_el" href="$(doxygen_html_classDGD_1_1funnelbuf_1_1Callback)">Callback</a> *cb) <li>const <a class="doxy_el" href="$(doxygen_html_classDGD_1_1funnelbuf_1_1Callback)">Callback</a> * <a class="doxy_el" href="$(doxygen_html_classDGD_1_1funnelbuf)#c3">callback</a> () const </ul>
<h2>Private Attributes</h2>
<ul><li><a class="doxy_el" href="$(doxygen_html_classDGD_1_1funnelbuf_1_1Callback)">Callback</a> * <a class="doxy_el" href="$(doxygen_html_classDGD_1_1funnelbuf)#o0">m_callback</a></ul>
<h2>Friends</h2>
<ul><li>class <a class="doxy_el" href="$(doxygen_html_classDGD_1_1funnelbuf)#l0">funnel</a></ul>
<hr>
<h2>Constructor &amp; Destructor Documentation</h2>
<a doxytag="DGD::funnelbuf::funnelbuf" name="a0"></a>
<p><table border=0 cellpadding=2 cellspacing=0 width="100%"><tr><td class="doxy_md"><table border=0 cellpadding=0 cellspacing=0><tr><td class="doxy_md" nowrap valign="top"> DGD::funnelbuf::funnelbuf </td><td class="doxy_md" valign="top">(&nbsp;</td><td class="doxy_mdname1" nowrap valign="top">&nbsp; </td><td class="doxy_md" valign="top">)&nbsp;</td><td class="doxy_md" nowrap></td></tr></table></td></tr></table><table border=0 cellpadding=0 cellspacing=5><tr><td> &nbsp; </td><td><p></td></tr></table><a doxytag="DGD::funnelbuf::~funnelbuf" name="a1"></a>
<p><table border=0 cellpadding=2 cellspacing=0 width="100%"><tr><td class="doxy_md"><table border=0 cellpadding=0 cellspacing=0><tr><td class="doxy_md" nowrap valign="top"> DGD::funnelbuf::~funnelbuf </td><td class="doxy_md" valign="top">(&nbsp;</td><td class="doxy_mdname1" nowrap valign="top">&nbsp; </td><td class="doxy_md" valign="top">)&nbsp;</td><td class="doxy_md" nowrap></td></tr></table></td></tr></table><table border=0 cellpadding=0 cellspacing=5><tr><td> &nbsp; </td><td><p></td></tr></table><hr>
<h2>Member Function Documentation</h2>
<a doxytag="DGD::funnelbuf::post_process" name="c0"></a>
<p><table border=0 cellpadding=2 cellspacing=0 width="100%"><tr><td class="doxy_md"><table border=0 cellpadding=0 cellspacing=0><tr><td class="doxy_md" nowrap valign="top"> void DGD::funnelbuf::post_process </td><td class="doxy_md" valign="top">(&nbsp;</td><td class="doxy_mdname1" nowrap valign="top">&nbsp; </td><td class="doxy_md" valign="top">)&nbsp;</td><td class="doxy_md" nowrap><code> [private, virtual]</code></td></tr></table></td></tr></table><table border=0 cellpadding=0 cellspacing=5><tr><td> &nbsp; </td><td><p> This is a virtual callback. <p> This function is called every time <a class="doxy_el" href="$(doxygen_html_classDGD_1_1channelbuf)#z0_2">overflow</a>() or <a class="doxy_el" href="$(doxygen_html_classDGD_1_1channelbuf)#z0_1">sync</a>() finished their work, so the channelbuf is in consistent state. Subclasses can overload this function in order to add functionality. <p><dl compact><dt><b>See also: </b><dd><a class="doxy_el" href="$(doxygen_html_classDGD_1_1channelbuf)#z0_2">overflow</a>() , <a class="doxy_el" href="$(doxygen_html_classDGD_1_1channelbuf)#z0_1">sync</a>() </dl><p> Reimplemented from <a class="doxy_el" href="$(doxygen_html_classDGD_1_1channelbuf)#b2">DGD::channelbuf</a>. </td></tr></table><a doxytag="DGD::funnelbuf::assoc" name="c1"></a>
<p><table border=0 cellpadding=2 cellspacing=0 width="100%"><tr><td class="doxy_md"><table border=0 cellpadding=0 cellspacing=0><tr><td class="doxy_md" nowrap valign="top"> void DGD::funnelbuf::assoc </td><td class="doxy_md" valign="top">(&nbsp;</td><td class="doxy_md" nowrap valign="top">std::ostream *&nbsp;</td><td class="doxy_mdname1" nowrap valign="top">&nbsp; <em>str</em></td><td class="doxy_md" valign="top">)&nbsp;</td><td class="doxy_md" nowrap><code> [private]</code></td></tr></table></td></tr></table><table border=0 cellpadding=0 cellspacing=5><tr><td> &nbsp; </td><td><p> Append the given stream to the association list. <p><dl compact><dt><b>See also: </b><dd><a class="doxy_el" href="$(doxygen_html_classDGD_1_1channel)">DGD::channel</a></dl><p> Reimplemented from <a class="doxy_el" href="$(doxygen_html_classDGD_1_1channelbuf)#a2">DGD::channelbuf</a>. </td></tr></table><a doxytag="DGD::funnelbuf::callback" name="c2"></a>
<p><table border=0 cellpadding=2 cellspacing=0 width="100%"><tr><td class="doxy_md"><table border=0 cellpadding=0 cellspacing=0><tr><td class="doxy_md" nowrap valign="top"> void DGD::funnelbuf::callback </td><td class="doxy_md" valign="top">(&nbsp;</td><td class="doxy_md" nowrap valign="top"><a class="doxy_el" href="$(doxygen_html_classDGD_1_1funnelbuf_1_1Callback)">Callback</a> *&nbsp;</td><td class="doxy_mdname1" nowrap valign="top">&nbsp; <em>cb</em></td><td class="doxy_md" valign="top">)&nbsp;</td><td class="doxy_md" nowrap><code> [private]</code></td></tr></table></td></tr></table><table border=0 cellpadding=0 cellspacing=5><tr><td> &nbsp; </td><td><p></td></tr></table><a doxytag="DGD::funnelbuf::callback" name="c3"></a>
<p><table border=0 cellpadding=2 cellspacing=0 width="100%"><tr><td class="doxy_md"><table border=0 cellpadding=0 cellspacing=0><tr><td class="doxy_md" nowrap valign="top"> const <a class="doxy_el" href="$(doxygen_html_classDGD_1_1funnelbuf_1_1Callback)">funnelbuf::Callback</a> * DGD::funnelbuf::callback </td><td class="doxy_md" valign="top">(&nbsp;</td><td class="doxy_mdname1" nowrap valign="top">&nbsp; </td><td class="doxy_md" valign="top">)&nbsp;</td><td class="doxy_md" nowrap> const<code> [private]</code></td></tr></table></td></tr></table><table border=0 cellpadding=0 cellspacing=5><tr><td> &nbsp; </td><td><p></td></tr></table><hr>
<h2>Friends And Related Function Documentation</h2>
<a doxytag="DGD::funnelbuf::funnel" name="l0"></a>
<p><table border=0 cellpadding=2 cellspacing=0 width="100%"><tr><td class="doxy_md"><table border=0 cellpadding=0 cellspacing=0><tr><td class="doxy_md" nowrap valign="top"> friend class funnel<code> [friend]</code></td></tr></table></td></tr></table><table border=0 cellpadding=0 cellspacing=5><tr><td> &nbsp; </td><td><p></td></tr></table><hr>
<h2>Member Data Documentation</h2>
<a doxytag="DGD::funnelbuf::m_callback" name="o0"></a>
<p><table border=0 cellpadding=2 cellspacing=0 width="100%"><tr><td class="doxy_md"><table border=0 cellpadding=0 cellspacing=0><tr><td class="doxy_md" nowrap valign="top"><a class="doxy_el" href="$(doxygen_html_classDGD_1_1funnelbuf_1_1Callback)">Callback</a>* DGD::funnelbuf::m_callback<code> [private]</code></td></tr></table></td></tr></table><table border=0 cellpadding=0 cellspacing=5><tr><td> &nbsp; </td><td><p></td></tr></table><hr>The documentation for this class was generated from the following files:<ul><li><a class="doxy_el" href="$(doxygen_html_dgFunnel_8h-source)">dgFunnel.h</a><li><a class="doxy_el" href="$(doxygen_html_dgFunnel_8cpp)">dgFunnel.cpp</a></ul><hr><address style="align: right;"><small>Generated on Mon Dec 9 18:30:04 2002 for Depression Glass Debug Library by <a href="http://www.doxygen.org/index.html"> <img align="middle" alt="doxygen" border=0 height=53 src="$(doxygen)" width=110></a>1.2.17 </small></address>
</content>

<content name="doxygen_html_classDGD_1_1funnelbuf_1_1Callback-members" format="text/html">
<wmmeta name="title" value="Member List" />
<h1>DGD::funnelbuf::Callback Member List</h1>
This is the complete list of members for <a class="doxy_el" href="$(doxygen_html_classDGD_1_1funnelbuf_1_1Callback)">DGD::funnelbuf::Callback</a>
, including all inherited members.<table><tr bgcolor="#f0f0f0"><td><a class="doxy_el" href="$(doxygen_html_classDGD_1_1funnelbuf_1_1Callback)#a0">operator()</a>(unsigned long line, unsigned long column, unsigned long bytes)=0</td><td><a class="doxy_el" href="$(doxygen_html_classDGD_1_1funnelbuf_1_1Callback)">DGD::funnelbuf::Callback</a></td><td><code> [pure virtual]</code></td></tr></table>
<hr>
<address style="align: right;"><small>Generated on Mon Dec 9 18:30:04 2002 for Depression Glass Debug Library by <a href="http://www.doxygen.org/index.html"> <img align="middle" alt="doxygen" border=0 height=53 src="$(doxygen)" width=110></a>1.2.17 </small></address>
</content>

<content name="doxygen_html_classDGD_1_1funnelbuf_1_1Callback" format="text/html">
<wmmeta name="title" value="DGD::funnelbuf::Callback class Reference" />
<h1>DGD::funnelbuf::Callback Class Reference</h1>
<code>#include &lt;<a class="doxy_el" href="$(doxygen_html_dgFunnel_8h-source)">dgFunnel.h</a>&gt;</code>
<p> Inheritance diagram for DGD::funnelbuf::Callback:
<p><center><img alt="Inheritance graph" border=0 src="$(classDGD_1_1funnelbuf_1_1Callback__inherit__graph)" usemap="#DGD_1_1funnelbuf_1_1Callback__inherit__map"></center><map name="DGD_1_1funnelbuf_1_1Callback__inherit__map"><area alt="" coords="36,67,119,85" href="$(doxygen_html_classDGD_1_1funnel)" shape="rect"><area alt="" coords="17,133,137,152" href="$(doxygen_html_classDGD_1_1multifile__log)" shape="rect"></map><center><font size=2>[<a href="$(doxygen_html_graph_legend)">legend</a>]</font></center><a href="$(doxygen_html_classDGD_1_1funnelbuf_1_1Callback-members)">List of all members.</a>
<h2>Public Methods</h2>
<ul><li>virtual void <a class="doxy_el" href="$(doxygen_html_classDGD_1_1funnelbuf_1_1Callback)#a0">operator()</a> (unsigned long line, unsigned long column, unsigned long bytes)=0 </ul>
<hr>
<h2>Member Function Documentation</h2>
<a doxytag="DGD::funnelbuf::Callback::operator()" name="a0"></a>
<p><table border=0 cellpadding=2 cellspacing=0 width="100%"><tr><td class="doxy_md"><table border=0 cellpadding=0 cellspacing=0><tr><td class="doxy_md" nowrap valign="top"> virtual void DGD::funnelbuf::Callback::operator() </td><td class="doxy_md" valign="top">(&nbsp;</td><td class="doxy_md" nowrap valign="top">unsigned long&nbsp;</td><td class="doxy_mdname" nowrap>&nbsp; <em>line</em>, </td></tr><tr><td></td><td></td><td class="doxy_md" nowrap>unsigned long&nbsp;</td><td class="doxy_mdname" nowrap>&nbsp; <em>column</em>, </td></tr><tr><td></td><td></td><td class="doxy_md" nowrap>unsigned long&nbsp;</td><td class="doxy_mdname" nowrap>&nbsp; <em>bytes</em></td></tr><tr><td></td><td class="doxy_md">)&nbsp;</td><td class="doxy_md" colspan=2><code> [pure virtual]</code></td></tr></table></td></tr></table><table border=0 cellpadding=0 cellspacing=5><tr><td> &nbsp; </td><td><p><p> Implemented in <a class="doxy_el" href="$(doxygen_html_classDGD_1_1funnel)#b0">DGD::funnel</a>, and <a class="doxy_el" href="$(doxygen_html_classDGD_1_1multifile__log)#c0">DGD::multifile_log</a>. </td></tr></table><hr>The documentation for this class was generated from the following file:<ul><li><a class="doxy_el" href="$(doxygen_html_dgFunnel_8h-source)">dgFunnel.h</a></ul><hr><address style="align: right;"><small>Generated on Mon Dec 9 18:30:04 2002 for Depression Glass Debug Library by <a href="http://www.doxygen.org/index.html"> <img align="middle" alt="doxygen" border=0 height=53 src="$(doxygen)" width=110></a>1.2.17 </small></address>
</content>

<content name="doxygen_html_classDGD_1_1multifile__log-members" format="text/html">
<wmmeta name="title" value="Member List" />
<h1>DGD::multifile_log Member List</h1>
This is the complete list of members for <a class="doxy_el" href="$(doxygen_html_classDGD_1_1multifile__log)">DGD::multifile_log</a>
, including all inherited members.<table><tr bgcolor="#f0f0f0"><td><a class="doxy_el" href="$(doxygen_html_classDGD_1_1multifile__log)#p0">dont_split</a></td><td><a class="doxy_el" href="$(doxygen_html_classDGD_1_1multifile__log)">DGD::multifile_log</a></td><td><code> [static]</code></td></tr><tr bgcolor="#f0f0f0"><td><a class="doxy_el" href="$(doxygen_html_classDGD_1_1funnel)#a0">funnel</a>(std::ostream &amp;physical_stream)</td><td><a class="doxy_el" href="$(doxygen_html_classDGD_1_1funnel)">DGD::funnel</a></td><td></td></tr><tr bgcolor="#f0f0f0"><td><a class="doxy_el" href="$(doxygen_html_classDGD_1_1funnel)#a2">header</a>()</td><td><a class="doxy_el" href="$(doxygen_html_classDGD_1_1funnel)">DGD::funnel</a></td><td><code> [virtual]</code></td></tr><tr bgcolor="#f0f0f0"><td><a class="doxy_el" href="$(doxygen_html_classDGD_1_1multifile__log)#o0">m_file</a></td><td><a class="doxy_el" href="$(doxygen_html_classDGD_1_1multifile__log)">DGD::multifile_log</a></td><td><code> [private]</code></td></tr><tr bgcolor="#f0f0f0"><td><a class="doxy_el" href="$(doxygen_html_classDGD_1_1multifile__log)#o1">m_name</a></td><td><a class="doxy_el" href="$(doxygen_html_classDGD_1_1multifile__log)">DGD::multifile_log</a></td><td><code> [private]</code></td></tr><tr bgcolor="#f0f0f0"><td><a class="doxy_el" href="$(doxygen_html_classDGD_1_1multifile__log)#o2">m_part_count</a></td><td><a class="doxy_el" href="$(doxygen_html_classDGD_1_1multifile__log)">DGD::multifile_log</a></td><td><code> [private]</code></td></tr><tr bgcolor="#f0f0f0"><td><a class="doxy_el" href="$(doxygen_html_classDGD_1_1multifile__log)#o3">m_split</a></td><td><a class="doxy_el" href="$(doxygen_html_classDGD_1_1multifile__log)">DGD::multifile_log</a></td><td><code> [private]</code></td></tr><tr bgcolor="#f0f0f0"><td><a class="doxy_el" href="$(doxygen_html_classDGD_1_1multifile__log)#a0">multifile_log</a>(const char *name, Split_criteria *criteria=&amp;split_by_size)</td><td><a class="doxy_el" href="$(doxygen_html_classDGD_1_1multifile__log)">DGD::multifile_log</a></td><td></td></tr><tr bgcolor="#f0f0f0"><td><a class="doxy_el" href="$(doxygen_html_classDGD_1_1multifile__log)#c0">operator()</a>(unsigned long line, unsigned long column, unsigned long bytes)</td><td><a class="doxy_el" href="$(doxygen_html_classDGD_1_1multifile__log)">DGD::multifile_log</a></td><td><code> [private, virtual]</code></td></tr><tr bgcolor="#f0f0f0"><td><a class="doxy_el" href="$(doxygen_html_classDGD_1_1funnel)#s0">Parent</a> typedef</td><td><a class="doxy_el" href="$(doxygen_html_classDGD_1_1funnel)">DGD::funnel</a></td><td></td></tr><tr bgcolor="#f0f0f0"><td><a class="doxy_el" href="$(doxygen_html_classDGD_1_1funnel)#a1">rdbuf</a>()</td><td><a class="doxy_el" href="$(doxygen_html_classDGD_1_1funnel)">DGD::funnel</a></td><td></td></tr><tr bgcolor="#f0f0f0"><td><a class="doxy_el" href="$(doxygen_html_classDGD_1_1multifile__log)#c1">real_name</a>() const</td><td><a class="doxy_el" href="$(doxygen_html_classDGD_1_1multifile__log)">DGD::multifile_log</a></td><td><code> [private]</code></td></tr><tr bgcolor="#f0f0f0"><td><a class="doxy_el" href="$(doxygen_html_classDGD_1_1multifile__log)#p2">split_by_lines</a></td><td><a class="doxy_el" href="$(doxygen_html_classDGD_1_1multifile__log)">DGD::multifile_log</a></td><td><code> [static]</code></td></tr><tr bgcolor="#f0f0f0"><td><a class="doxy_el" href="$(doxygen_html_classDGD_1_1multifile__log)#p1">split_by_size</a></td><td><a class="doxy_el" href="$(doxygen_html_classDGD_1_1multifile__log)">DGD::multifile_log</a></td><td><code> [static]</code></td></tr><tr bgcolor="#f0f0f0"><td><a class="doxy_el" href="$(doxygen_html_classDGD_1_1multifile__log)#a1">~multifile_log</a>()</td><td><a class="doxy_el" href="$(doxygen_html_classDGD_1_1multifile__log)">DGD::multifile_log</a></td><td></td></tr></table>
<hr>
<address style="align: right;"><small>Generated on Mon Dec 9 18:30:04 2002 for Depression Glass Debug Library by <a href="http://www.doxygen.org/index.html"> <img align="middle" alt="doxygen" border=0 height=53 src="$(doxygen)" width=110></a>1.2.17 </small></address>
</content>

<content name="doxygen_html_classDGD_1_1multifile__log" format="text/html">
<wmmeta name="title" value="DGD::multifile_log class Reference" />
<h1>DGD::multifile_log Class Reference</h1>
<code>#include &lt;<a class="doxy_el" href="$(doxygen_html_dgMultifileLog_8h-source)">dgMultifileLog.h</a>&gt;</code>
<p> Inheritance diagram for DGD::multifile_log:
<p><center><img alt="Inheritance graph" border=0 src="$(classDGD_1_1multifile__log__inherit__graph)" usemap="#DGD_1_1multifile__log__inherit__map"></center><map name="DGD_1_1multifile__log__inherit__map"><area alt="" coords="36,67,119,85" href="$(doxygen_html_classDGD_1_1funnel)" shape="rect"><area alt="" coords="0,0,155,19" href="$(doxygen_html_classDGD_1_1funnelbuf_1_1Callback)" shape="rect"></map><center><font size=2>[<a href="$(doxygen_html_graph_legend)">legend</a>]</font></center>Collaboration diagram for DGD::multifile_log:
<p><center><img alt="Collaboration graph" border=0 src="$(classDGD_1_1multifile__log__coll__graph)" usemap="#DGD_1_1multifile__log__coll__map"></center><map name="DGD_1_1multifile__log__coll__map"><area alt="" coords="73,165,156,183" href="$(doxygen_html_classDGD_1_1funnel)" shape="rect"><area alt="" coords="0,-1,155,18" href="$(doxygen_html_classDGD_1_1funnelbuf_1_1Callback)" shape="rect"><area alt="" coords="77,82,179,101" href="$(doxygen_html_classDGD_1_1funnelbuf)" shape="rect"><area alt="" coords="363,82,557,101" href="$(doxygen_html_classDGD_1_1multifile__log_1_1Split__criteria)" shape="rect"><area alt="" coords="292,165,495,183" href="$(doxygen_html_classDGD_1_1multifile__log_1_1Split__by__lines)" shape="rect"><area alt="" coords="519,165,700,183" href="$(doxygen_html_classDGD_1_1multifile__log_1_1Dont__split)" shape="rect"><area alt="" coords="724,165,924,183" href="$(doxygen_html_classDGD_1_1multifile__log_1_1Split__by__size)" shape="rect"></map><center><font size=2>[<a href="$(doxygen_html_graph_legend)">legend</a>]</font></center><a href="$(doxygen_html_classDGD_1_1multifile__log-members)">List of all members.</a>
<h2>Public Methods</h2>
<ul><li><a class="doxy_el" href="$(doxygen_html_classDGD_1_1multifile__log)#a0">multifile_log</a> (const char *name, <a class="doxy_el" href="$(doxygen_html_classDGD_1_1multifile__log_1_1Split__criteria)">Split_criteria</a> *criteria=&amp;<a class="doxy_el" href="$(doxygen_html_classDGD_1_1multifile__log)#p1">split_by_size</a>) <li><a class="doxy_el" href="$(doxygen_html_classDGD_1_1multifile__log)#a1">~multifile_log</a> () </ul>
<h2>Static Public Attributes</h2>
<ul><li><a class="doxy_el" href="$(doxygen_html_classDGD_1_1multifile__log_1_1Dont__split)">Dont_split</a> <a class="doxy_el" href="$(doxygen_html_classDGD_1_1multifile__log)#p0">dont_split</a><li><a class="doxy_el" href="$(doxygen_html_classDGD_1_1multifile__log_1_1Split__by__size)">Split_by_size</a> <a class="doxy_el" href="$(doxygen_html_classDGD_1_1multifile__log)#p1">split_by_size</a><li><a class="doxy_el" href="$(doxygen_html_classDGD_1_1multifile__log_1_1Split__by__lines)">Split_by_lines</a> <a class="doxy_el" href="$(doxygen_html_classDGD_1_1multifile__log)#p2">split_by_lines</a></ul>
<h2>Private Methods</h2>
<ul><li>void <a class="doxy_el" href="$(doxygen_html_classDGD_1_1multifile__log)#c0">operator()</a> (unsigned long line, unsigned long column, unsigned long bytes) <li>std::string <a class="doxy_el" href="$(doxygen_html_classDGD_1_1multifile__log)#c1">real_name</a> () const </ul>
<h2>Private Attributes</h2>
<ul><li>std::ofstream <a class="doxy_el" href="$(doxygen_html_classDGD_1_1multifile__log)#o0">m_file</a><li>std::string <a class="doxy_el" href="$(doxygen_html_classDGD_1_1multifile__log)#o1">m_name</a><li>unsigned int <a class="doxy_el" href="$(doxygen_html_classDGD_1_1multifile__log)#o2">m_part_count</a><li><a class="doxy_el" href="$(doxygen_html_classDGD_1_1multifile__log_1_1Split__criteria)">Split_criteria</a> * <a class="doxy_el" href="$(doxygen_html_classDGD_1_1multifile__log)#o3">m_split</a></ul>
<hr>
<h2>Constructor &amp; Destructor Documentation</h2>
<a doxytag="DGD::multifile_log::multifile_log" name="a0"></a>
<p><table border=0 cellpadding=2 cellspacing=0 width="100%"><tr><td class="doxy_md"><table border=0 cellpadding=0 cellspacing=0><tr><td class="doxy_md" nowrap valign="top"> DGD::multifile_log::multifile_log </td><td class="doxy_md" valign="top">(&nbsp;</td><td class="doxy_md" nowrap valign="top">const char *&nbsp;</td><td class="doxy_mdname" nowrap>&nbsp; <em>name</em>, </td></tr><tr><td></td><td></td><td class="doxy_md" nowrap><a class="doxy_el" href="$(doxygen_html_classDGD_1_1multifile__log_1_1Split__criteria)">Split_criteria</a> *&nbsp;</td><td class="doxy_mdname" nowrap>&nbsp; <em>criteria</em> = &amp;<a class="doxy_el" href="$(doxygen_html_classDGD_1_1multifile__log)#p1">split_by_size</a></td></tr><tr><td></td><td class="doxy_md">)&nbsp;</td><td class="doxy_md" colspan=2></td></tr></table></td></tr></table><table border=0 cellpadding=0 cellspacing=5><tr><td> &nbsp; </td><td><p></td></tr></table><a doxytag="DGD::multifile_log::~multifile_log" name="a1"></a>
<p><table border=0 cellpadding=2 cellspacing=0 width="100%"><tr><td class="doxy_md"><table border=0 cellpadding=0 cellspacing=0><tr><td class="doxy_md" nowrap valign="top"> DGD::multifile_log::~multifile_log </td><td class="doxy_md" valign="top">(&nbsp;</td><td class="doxy_mdname1" nowrap valign="top">&nbsp; </td><td class="doxy_md" valign="top">)&nbsp;</td><td class="doxy_md" nowrap></td></tr></table></td></tr></table><table border=0 cellpadding=0 cellspacing=5><tr><td> &nbsp; </td><td><p></td></tr></table><hr>
<h2>Member Function Documentation</h2>
<a doxytag="DGD::multifile_log::operator()" name="c0"></a>
<p><table border=0 cellpadding=2 cellspacing=0 width="100%"><tr><td class="doxy_md"><table border=0 cellpadding=0 cellspacing=0><tr><td class="doxy_md" nowrap valign="top"> void DGD::multifile_log::operator() </td><td class="doxy_md" valign="top">(&nbsp;</td><td class="doxy_md" nowrap valign="top">unsigned long&nbsp;</td><td class="doxy_mdname" nowrap>&nbsp; <em>line</em>, </td></tr><tr><td></td><td></td><td class="doxy_md" nowrap>unsigned long&nbsp;</td><td class="doxy_mdname" nowrap>&nbsp; <em>column</em>, </td></tr><tr><td></td><td></td><td class="doxy_md" nowrap>unsigned long&nbsp;</td><td class="doxy_mdname" nowrap>&nbsp; <em>bytes</em></td></tr><tr><td></td><td class="doxy_md">)&nbsp;</td><td class="doxy_md" colspan=2><code> [private, virtual]</code></td></tr></table></td></tr></table><table border=0 cellpadding=0 cellspacing=5><tr><td> &nbsp; </td><td><p><p> Reimplemented from <a class="doxy_el" href="$(doxygen_html_classDGD_1_1funnel)#b0">DGD::funnel</a>. </td></tr></table><a doxytag="DGD::multifile_log::real_name" name="c1"></a>
<p><table border=0 cellpadding=2 cellspacing=0 width="100%"><tr><td class="doxy_md"><table border=0 cellpadding=0 cellspacing=0><tr><td class="doxy_md" nowrap valign="top"> std::string DGD::multifile_log::real_name </td><td class="doxy_md" valign="top">(&nbsp;</td><td class="doxy_mdname1" nowrap valign="top">&nbsp; </td><td class="doxy_md" valign="top">)&nbsp;</td><td class="doxy_md" nowrap> const<code> [private]</code></td></tr></table></td></tr></table><table border=0 cellpadding=0 cellspacing=5><tr><td> &nbsp; </td><td><p></td></tr></table><hr>
<h2>Member Data Documentation</h2>
<a doxytag="DGD::multifile_log::dont_split" name="p0"></a>
<p><table border=0 cellpadding=2 cellspacing=0 width="100%"><tr><td class="doxy_md"><table border=0 cellpadding=0 cellspacing=0><tr><td class="doxy_md" nowrap valign="top"><a class="doxy_el" href="$(doxygen_html_classDGD_1_1multifile__log_1_1Dont__split)">multifile_log::Dont_split</a> DGD::multifile_log::dont_split<code> [static]</code></td></tr></table></td></tr></table><table border=0 cellpadding=0 cellspacing=5><tr><td> &nbsp; </td><td><p></td></tr></table><a doxytag="DGD::multifile_log::split_by_size" name="p1"></a>
<p><table border=0 cellpadding=2 cellspacing=0 width="100%"><tr><td class="doxy_md"><table border=0 cellpadding=0 cellspacing=0><tr><td class="doxy_md" nowrap valign="top"><a class="doxy_el" href="$(doxygen_html_classDGD_1_1multifile__log_1_1Split__by__size)">multifile_log::Split_by_size</a> DGD::multifile_log::split_by_size<code> [static]</code></td></tr></table></td></tr></table><table border=0 cellpadding=0 cellspacing=5><tr><td> &nbsp; </td><td><p></td></tr></table><a doxytag="DGD::multifile_log::split_by_lines" name="p2"></a>
<p><table border=0 cellpadding=2 cellspacing=0 width="100%"><tr><td class="doxy_md"><table border=0 cellpadding=0 cellspacing=0><tr><td class="doxy_md" nowrap valign="top"><a class="doxy_el" href="$(doxygen_html_classDGD_1_1multifile__log_1_1Split__by__lines)">multifile_log::Split_by_lines</a> DGD::multifile_log::split_by_lines<code> [static]</code></td></tr></table></td></tr></table><table border=0 cellpadding=0 cellspacing=5><tr><td> &nbsp; </td><td><p></td></tr></table><a doxytag="DGD::multifile_log::m_file" name="o0"></a>
<p><table border=0 cellpadding=2 cellspacing=0 width="100%"><tr><td class="doxy_md"><table border=0 cellpadding=0 cellspacing=0><tr><td class="doxy_md" nowrap valign="top"> std::ofstream DGD::multifile_log::m_file<code> [private]</code></td></tr></table></td></tr></table><table border=0 cellpadding=0 cellspacing=5><tr><td> &nbsp; </td><td><p></td></tr></table><a doxytag="DGD::multifile_log::m_name" name="o1"></a>
<p><table border=0 cellpadding=2 cellspacing=0 width="100%"><tr><td class="doxy_md"><table border=0 cellpadding=0 cellspacing=0><tr><td class="doxy_md" nowrap valign="top"> std::string DGD::multifile_log::m_name<code> [private]</code></td></tr></table></td></tr></table><table border=0 cellpadding=0 cellspacing=5><tr><td> &nbsp; </td><td><p></td></tr></table><a doxytag="DGD::multifile_log::m_part_count" name="o2"></a>
<p><table border=0 cellpadding=2 cellspacing=0 width="100%"><tr><td class="doxy_md"><table border=0 cellpadding=0 cellspacing=0><tr><td class="doxy_md" nowrap valign="top"> unsigned int DGD::multifile_log::m_part_count<code> [private]</code></td></tr></table></td></tr></table><table border=0 cellpadding=0 cellspacing=5><tr><td> &nbsp; </td><td><p></td></tr></table><a doxytag="DGD::multifile_log::m_split" name="o3"></a>
<p><table border=0 cellpadding=2 cellspacing=0 width="100%"><tr><td class="doxy_md"><table border=0 cellpadding=0 cellspacing=0><tr><td class="doxy_md" nowrap valign="top"><a class="doxy_el" href="$(doxygen_html_classDGD_1_1multifile__log_1_1Split__criteria)">Split_criteria</a>* DGD::multifile_log::m_split<code> [private]</code></td></tr></table></td></tr></table><table border=0 cellpadding=0 cellspacing=5><tr><td> &nbsp; </td><td><p></td></tr></table><hr>The documentation for this class was generated from the following files:<ul><li><a class="doxy_el" href="$(doxygen_html_dgMultifileLog_8h-source)">dgMultifileLog.h</a><li><a class="doxy_el" href="$(doxygen_html_dgMultifileLog_8cpp)">dgMultifileLog.cpp</a></ul><hr><address style="align: right;"><small>Generated on Mon Dec 9 18:30:04 2002 for Depression Glass Debug Library by <a href="http://www.doxygen.org/index.html"> <img align="middle" alt="doxygen" border=0 height=53 src="$(doxygen)" width=110></a>1.2.17 </small></address>
</content>

<content name="doxygen_html_classDGD_1_1multifile__log_1_1Dont__split-members" format="text/html">
<wmmeta name="title" value="Member List" />
<h1>DGD::multifile_log::Dont_split Member List</h1>
This is the complete list of members for <a class="doxy_el" href="$(doxygen_html_classDGD_1_1multifile__log_1_1Dont__split)">DGD::multifile_log::Dont_split</a>
, including all inherited members.<table><tr bgcolor="#f0f0f0"><td><a class="doxy_el" href="$(doxygen_html_classDGD_1_1multifile__log_1_1Dont__split)#a0">operator()</a>(unsigned long volume, unsigned long line, unsigned long column, unsigned long bytes) const</td><td><a class="doxy_el" href="$(doxygen_html_classDGD_1_1multifile__log_1_1Dont__split)">DGD::multifile_log::Dont_split</a></td><td><code> [inline, virtual]</code></td></tr></table>
<hr>
<address style="align: right;"><small>Generated on Mon Dec 9 18:30:05 2002 for Depression Glass Debug Library by <a href="http://www.doxygen.org/index.html"> <img align="middle" alt="doxygen" border=0 height=53 src="$(doxygen)" width=110></a>1.2.17 </small></address>
</content>

<content name="doxygen_html_classDGD_1_1multifile__log_1_1Dont__split" format="text/html">
<wmmeta name="title" value="DGD::multifile_log::Dont_split class Reference" />
<h1>DGD::multifile_log::Dont_split Class Reference</h1>
<code>#include &lt;<a class="doxy_el" href="$(doxygen_html_dgMultifileLog_8h-source)">dgMultifileLog.h</a>&gt;</code>
<p> Inheritance diagram for DGD::multifile_log::Dont_split:
<p><center><img alt="Inheritance graph" border=0 src="$(classDGD_1_1multifile__log_1_1Dont__split__inherit__graph)" usemap="#DGD_1_1multifile__log_1_1Dont__split__inherit__map"></center><map name="DGD_1_1multifile__log_1_1Dont__split__inherit__map"><area alt="" coords="0,0,195,18" href="$(doxygen_html_classDGD_1_1multifile__log_1_1Split__criteria)" shape="rect"></map><center><font size=2>[<a href="$(doxygen_html_graph_legend)">legend</a>]</font></center>Collaboration diagram for DGD::multifile_log::Dont_split:
<p><center><img alt="Collaboration graph" border=0 src="$(classDGD_1_1multifile__log_1_1Dont__split__coll__graph)" usemap="#DGD_1_1multifile__log_1_1Dont__split__coll__map"></center><map name="DGD_1_1multifile__log_1_1Dont__split__coll__map"><area alt="" coords="0,0,195,18" href="$(doxygen_html_classDGD_1_1multifile__log_1_1Split__criteria)" shape="rect"></map><center><font size=2>[<a href="$(doxygen_html_graph_legend)">legend</a>]</font></center><a href="$(doxygen_html_classDGD_1_1multifile__log_1_1Dont__split-members)">List of all members.</a>
<h2>Public Methods</h2>
<ul><li>bool <a class="doxy_el" href="$(doxygen_html_classDGD_1_1multifile__log_1_1Dont__split)#a0">operator()</a> (unsigned long volume, unsigned long line, unsigned long column, unsigned long bytes) const </ul>
<hr>
<h2>Member Function Documentation</h2>
<a doxytag="DGD::multifile_log::Dont_split::operator()" name="a0"></a>
<p><table border=0 cellpadding=2 cellspacing=0 width="100%"><tr><td class="doxy_md"><table border=0 cellpadding=0 cellspacing=0><tr><td class="doxy_md" nowrap valign="top"> bool DGD::multifile_log::Dont_split::operator() </td><td class="doxy_md" valign="top">(&nbsp;</td><td class="doxy_md" nowrap valign="top">unsigned long&nbsp;</td><td class="doxy_mdname" nowrap>&nbsp; <em>volume</em>, </td></tr><tr><td></td><td></td><td class="doxy_md" nowrap>unsigned long&nbsp;</td><td class="doxy_mdname" nowrap>&nbsp; <em>line</em>, </td></tr><tr><td></td><td></td><td class="doxy_md" nowrap>unsigned long&nbsp;</td><td class="doxy_mdname" nowrap>&nbsp; <em>column</em>, </td></tr><tr><td></td><td></td><td class="doxy_md" nowrap>unsigned long&nbsp;</td><td class="doxy_mdname" nowrap>&nbsp; <em>bytes</em></td></tr><tr><td></td><td class="doxy_md">)&nbsp;</td><td class="doxy_md" colspan=2> const<code> [inline, virtual]</code></td></tr></table></td></tr></table><table border=0 cellpadding=0 cellspacing=5><tr><td> &nbsp; </td><td><p><p> Implements <a class="doxy_el" href="$(doxygen_html_classDGD_1_1multifile__log_1_1Split__criteria)#a0">DGD::multifile_log::Split_criteria</a>. </td></tr></table><hr>The documentation for this class was generated from the following file:<ul><li><a class="doxy_el" href="$(doxygen_html_dgMultifileLog_8h-source)">dgMultifileLog.h</a></ul><hr><address style="align: right;"><small>Generated on Mon Dec 9 18:30:05 2002 for Depression Glass Debug Library by <a href="http://www.doxygen.org/index.html"> <img align="middle" alt="doxygen" border=0 height=53 src="$(doxygen)" width=110></a>1.2.17 </small></address>
</content>

<content name="doxygen_html_classDGD_1_1multifile__log_1_1Split__by__lines-members" format="text/html">
<wmmeta name="title" value="Member List" />
<h1>DGD::multifile_log::Split_by_lines Member List</h1>
This is the complete list of members for <a class="doxy_el" href="$(doxygen_html_classDGD_1_1multifile__log_1_1Split__by__lines)">DGD::multifile_log::Split_by_lines</a>
, including all inherited members.<table><tr bgcolor="#f0f0f0"><td><a class="doxy_el" href="$(doxygen_html_classDGD_1_1multifile__log_1_1Split__by__lines)#o0">m_vol_size</a></td><td><a class="doxy_el" href="$(doxygen_html_classDGD_1_1multifile__log_1_1Split__by__lines)">DGD::multifile_log::Split_by_lines</a></td><td><code> [private]</code></td></tr><tr bgcolor="#f0f0f0"><td><a class="doxy_el" href="$(doxygen_html_classDGD_1_1multifile__log_1_1Split__by__lines)#a3">operator()</a>(unsigned long volume, unsigned long line, unsigned long column, unsigned long bytes) const</td><td><a class="doxy_el" href="$(doxygen_html_classDGD_1_1multifile__log_1_1Split__by__lines)">DGD::multifile_log::Split_by_lines</a></td><td><code> [inline, virtual]</code></td></tr><tr bgcolor="#f0f0f0"><td><a class="doxy_el" href="$(doxygen_html_classDGD_1_1multifile__log_1_1Split__by__lines)#a0">Split_by_lines</a>()</td><td><a class="doxy_el" href="$(doxygen_html_classDGD_1_1multifile__log_1_1Split__by__lines)">DGD::multifile_log::Split_by_lines</a></td><td><code> [inline]</code></td></tr><tr bgcolor="#f0f0f0"><td><a class="doxy_el" href="$(doxygen_html_classDGD_1_1multifile__log_1_1Split__by__lines)#a1">Split_by_lines</a>(unsigned long vol_size)</td><td><a class="doxy_el" href="$(doxygen_html_classDGD_1_1multifile__log_1_1Split__by__lines)">DGD::multifile_log::Split_by_lines</a></td><td><code> [inline]</code></td></tr><tr bgcolor="#f0f0f0"><td><a class="doxy_el" href="$(doxygen_html_classDGD_1_1multifile__log_1_1Split__by__lines)#a2">Split_by_lines</a>(const Split_by_lines &amp;peer)</td><td><a class="doxy_el" href="$(doxygen_html_classDGD_1_1multifile__log_1_1Split__by__lines)">DGD::multifile_log::Split_by_lines</a></td><td><code> [inline]</code></td></tr></table>
<hr>
<address style="align: right;"><small>Generated on Mon Dec 9 18:30:06 2002 for Depression Glass Debug Library by <a href="http://www.doxygen.org/index.html"> <img align="middle" alt="doxygen" border=0 height=53 src="$(doxygen)" width=110></a>1.2.17 </small></address>
</content>

<content name="doxygen_html_classDGD_1_1multifile__log_1_1Split__by__lines" format="text/html">
<wmmeta name="title" value="DGD::multifile_log::Split_by_lines class Reference" />
<h1>DGD::multifile_log::Split_by_lines Class Reference</h1>
<code>#include &lt;<a class="doxy_el" href="$(doxygen_html_dgMultifileLog_8h-source)">dgMultifileLog.h</a>&gt;</code>
<p> Inheritance diagram for DGD::multifile_log::Split_by_lines:
<p><center><img alt="Inheritance graph" border=0 src="$(classDGD_1_1multifile__log_1_1Split__by__lines__inherit__graph)" usemap="#DGD_1_1multifile__log_1_1Split__by__lines__inherit__map"></center><map name="DGD_1_1multifile__log_1_1Split__by__lines__inherit__map"><area alt="" coords="4,0,199,18" href="$(doxygen_html_classDGD_1_1multifile__log_1_1Split__criteria)" shape="rect"></map><center><font size=2>[<a href="$(doxygen_html_graph_legend)">legend</a>]</font></center>Collaboration diagram for DGD::multifile_log::Split_by_lines:
<p><center><img alt="Collaboration graph" border=0 src="$(classDGD_1_1multifile__log_1_1Split__by__lines__coll__graph)" usemap="#DGD_1_1multifile__log_1_1Split__by__lines__coll__map"></center><map name="DGD_1_1multifile__log_1_1Split__by__lines__coll__map"><area alt="" coords="4,0,199,18" href="$(doxygen_html_classDGD_1_1multifile__log_1_1Split__criteria)" shape="rect"></map><center><font size=2>[<a href="$(doxygen_html_graph_legend)">legend</a>]</font></center><a href="$(doxygen_html_classDGD_1_1multifile__log_1_1Split__by__lines-members)">List of all members.</a>
<h2>Public Methods</h2>
<ul><li><a class="doxy_el" href="$(doxygen_html_classDGD_1_1multifile__log_1_1Split__by__lines)#a0">Split_by_lines</a> () <li><a class="doxy_el" href="$(doxygen_html_classDGD_1_1multifile__log_1_1Split__by__lines)#a1">Split_by_lines</a> (unsigned long vol_size) <li><a class="doxy_el" href="$(doxygen_html_classDGD_1_1multifile__log_1_1Split__by__lines)#a2">Split_by_lines</a> (const Split_by_lines &amp;peer) <li>bool <a class="doxy_el" href="$(doxygen_html_classDGD_1_1multifile__log_1_1Split__by__lines)#a3">operator()</a> (unsigned long volume, unsigned long line, unsigned long column, unsigned long bytes) const </ul>
<h2>Private Attributes</h2>
<ul><li>unsigned long <a class="doxy_el" href="$(doxygen_html_classDGD_1_1multifile__log_1_1Split__by__lines)#o0">m_vol_size</a></ul>
<hr>
<h2>Constructor &amp; Destructor Documentation</h2>
<a doxytag="DGD::multifile_log::Split_by_lines::Split_by_lines" name="a0"></a>
<p><table border=0 cellpadding=2 cellspacing=0 width="100%"><tr><td class="doxy_md"><table border=0 cellpadding=0 cellspacing=0><tr><td class="doxy_md" nowrap valign="top"> DGD::multifile_log::Split_by_lines::Split_by_lines </td><td class="doxy_md" valign="top">(&nbsp;</td><td class="doxy_mdname1" nowrap valign="top">&nbsp; </td><td class="doxy_md" valign="top">)&nbsp;</td><td class="doxy_md" nowrap><code> [inline]</code></td></tr></table></td></tr></table><table border=0 cellpadding=0 cellspacing=5><tr><td> &nbsp; </td><td><p></td></tr></table><a doxytag="DGD::multifile_log::Split_by_lines::Split_by_lines" name="a1"></a>
<p><table border=0 cellpadding=2 cellspacing=0 width="100%"><tr><td class="doxy_md"><table border=0 cellpadding=0 cellspacing=0><tr><td class="doxy_md" nowrap valign="top"> DGD::multifile_log::Split_by_lines::Split_by_lines </td><td class="doxy_md" valign="top">(&nbsp;</td><td class="doxy_md" nowrap valign="top">unsigned long&nbsp;</td><td class="doxy_mdname1" nowrap valign="top">&nbsp; <em>vol_size</em></td><td class="doxy_md" valign="top">)&nbsp;</td><td class="doxy_md" nowrap><code> [inline]</code></td></tr></table></td></tr></table><table border=0 cellpadding=0 cellspacing=5><tr><td> &nbsp; </td><td><p></td></tr></table><a doxytag="DGD::multifile_log::Split_by_lines::Split_by_lines" name="a2"></a>
<p><table border=0 cellpadding=2 cellspacing=0 width="100%"><tr><td class="doxy_md"><table border=0 cellpadding=0 cellspacing=0><tr><td class="doxy_md" nowrap valign="top"> DGD::multifile_log::Split_by_lines::Split_by_lines </td><td class="doxy_md" valign="top">(&nbsp;</td><td class="doxy_md" nowrap valign="top">const Split_by_lines &amp;&nbsp;</td><td class="doxy_mdname1" nowrap valign="top">&nbsp; <em>peer</em></td><td class="doxy_md" valign="top">)&nbsp;</td><td class="doxy_md" nowrap><code> [inline]</code></td></tr></table></td></tr></table><table border=0 cellpadding=0 cellspacing=5><tr><td> &nbsp; </td><td><p></td></tr></table><hr>
<h2>Member Function Documentation</h2>
<a doxytag="DGD::multifile_log::Split_by_lines::operator()" name="a3"></a>
<p><table border=0 cellpadding=2 cellspacing=0 width="100%"><tr><td class="doxy_md"><table border=0 cellpadding=0 cellspacing=0><tr><td class="doxy_md" nowrap valign="top"> bool DGD::multifile_log::Split_by_lines::operator() </td><td class="doxy_md" valign="top">(&nbsp;</td><td class="doxy_md" nowrap valign="top">unsigned long&nbsp;</td><td class="doxy_mdname" nowrap>&nbsp; <em>volume</em>, </td></tr><tr><td></td><td></td><td class="doxy_md" nowrap>unsigned long&nbsp;</td><td class="doxy_mdname" nowrap>&nbsp; <em>line</em>, </td></tr><tr><td></td><td></td><td class="doxy_md" nowrap>unsigned long&nbsp;</td><td class="doxy_mdname" nowrap>&nbsp; <em>column</em>, </td></tr><tr><td></td><td></td><td class="doxy_md" nowrap>unsigned long&nbsp;</td><td class="doxy_mdname" nowrap>&nbsp; <em>bytes</em></td></tr><tr><td></td><td class="doxy_md">)&nbsp;</td><td class="doxy_md" colspan=2> const<code> [inline, virtual]</code></td></tr></table></td></tr></table><table border=0 cellpadding=0 cellspacing=5><tr><td> &nbsp; </td><td><p><p> Implements <a class="doxy_el" href="$(doxygen_html_classDGD_1_1multifile__log_1_1Split__criteria)#a0">DGD::multifile_log::Split_criteria</a>. </td></tr></table><hr>
<h2>Member Data Documentation</h2>
<a doxytag="DGD::multifile_log::Split_by_lines::m_vol_size" name="o0"></a>
<p><table border=0 cellpadding=2 cellspacing=0 width="100%"><tr><td class="doxy_md"><table border=0 cellpadding=0 cellspacing=0><tr><td class="doxy_md" nowrap valign="top"> unsigned long DGD::multifile_log::Split_by_lines::m_vol_size<code> [private]</code></td></tr></table></td></tr></table><table border=0 cellpadding=0 cellspacing=5><tr><td> &nbsp; </td><td><p></td></tr></table><hr>The documentation for this class was generated from the following file:<ul><li><a class="doxy_el" href="$(doxygen_html_dgMultifileLog_8h-source)">dgMultifileLog.h</a></ul><hr><address style="align: right;"><small>Generated on Mon Dec 9 18:30:06 2002 for Depression Glass Debug Library by <a href="http://www.doxygen.org/index.html"> <img align="middle" alt="doxygen" border=0 height=53 src="$(doxygen)" width=110></a>1.2.17 </small></address>
</content>

<content name="doxygen_html_classDGD_1_1multifile__log_1_1Split__by__size-members" format="text/html">
<wmmeta name="title" value="Member List" />
<h1>DGD::multifile_log::Split_by_size Member List</h1>
This is the complete list of members for <a class="doxy_el" href="$(doxygen_html_classDGD_1_1multifile__log_1_1Split__by__size)">DGD::multifile_log::Split_by_size</a>
, including all inherited members.<table><tr bgcolor="#f0f0f0"><td><a class="doxy_el" href="$(doxygen_html_classDGD_1_1multifile__log_1_1Split__by__size)#o0">m_vol_size</a></td><td><a class="doxy_el" href="$(doxygen_html_classDGD_1_1multifile__log_1_1Split__by__size)">DGD::multifile_log::Split_by_size</a></td><td><code> [private]</code></td></tr><tr bgcolor="#f0f0f0"><td><a class="doxy_el" href="$(doxygen_html_classDGD_1_1multifile__log_1_1Split__by__size)#a2">operator()</a>(unsigned long volume, unsigned long line, unsigned long column, unsigned long bytes) const</td><td><a class="doxy_el" href="$(doxygen_html_classDGD_1_1multifile__log_1_1Split__by__size)">DGD::multifile_log::Split_by_size</a></td><td><code> [inline, virtual]</code></td></tr><tr bgcolor="#f0f0f0"><td><a class="doxy_el" href="$(doxygen_html_classDGD_1_1multifile__log_1_1Split__by__size)#a0">Split_by_size</a>()</td><td><a class="doxy_el" href="$(doxygen_html_classDGD_1_1multifile__log_1_1Split__by__size)">DGD::multifile_log::Split_by_size</a></td><td><code> [inline]</code></td></tr><tr bgcolor="#f0f0f0"><td><a class="doxy_el" href="$(doxygen_html_classDGD_1_1multifile__log_1_1Split__by__size)#a1">Split_by_size</a>(unsigned long vol_size)</td><td><a class="doxy_el" href="$(doxygen_html_classDGD_1_1multifile__log_1_1Split__by__size)">DGD::multifile_log::Split_by_size</a></td><td><code> [inline]</code></td></tr></table>
<hr>
<address style="align: right;"><small>Generated on Mon Dec 9 18:30:06 2002 for Depression Glass Debug Library by <a href="http://www.doxygen.org/index.html"> <img align="middle" alt="doxygen" border=0 height=53 src="$(doxygen)" width=110></a>1.2.17 </small></address>
</content>

<content name="doxygen_html_classDGD_1_1multifile__log_1_1Split__by__size" format="text/html">
<wmmeta name="title" value="DGD::multifile_log::Split_by_size class Reference" />
<h1>DGD::multifile_log::Split_by_size Class Reference</h1>
<code>#include &lt;<a class="doxy_el" href="$(doxygen_html_dgMultifileLog_8h-source)">dgMultifileLog.h</a>&gt;</code>
<p> Inheritance diagram for DGD::multifile_log::Split_by_size:
<p><center><img alt="Inheritance graph" border=0 src="$(classDGD_1_1multifile__log_1_1Split__by__size__inherit__graph)" usemap="#DGD_1_1multifile__log_1_1Split__by__size__inherit__map"></center><map name="DGD_1_1multifile__log_1_1Split__by__size__inherit__map"><area alt="" coords="3,0,197,18" href="$(doxygen_html_classDGD_1_1multifile__log_1_1Split__criteria)" shape="rect"></map><center><font size=2>[<a href="$(doxygen_html_graph_legend)">legend</a>]</font></center>Collaboration diagram for DGD::multifile_log::Split_by_size:
<p><center><img alt="Collaboration graph" border=0 src="$(classDGD_1_1multifile__log_1_1Split__by__size__coll__graph)" usemap="#DGD_1_1multifile__log_1_1Split__by__size__coll__map"></center><map name="DGD_1_1multifile__log_1_1Split__by__size__coll__map"><area alt="" coords="3,0,197,18" href="$(doxygen_html_classDGD_1_1multifile__log_1_1Split__criteria)" shape="rect"></map><center><font size=2>[<a href="$(doxygen_html_graph_legend)">legend</a>]</font></center><a href="$(doxygen_html_classDGD_1_1multifile__log_1_1Split__by__size-members)">List of all members.</a>
<h2>Public Methods</h2>
<ul><li><a class="doxy_el" href="$(doxygen_html_classDGD_1_1multifile__log_1_1Split__by__size)#a0">Split_by_size</a> () <li><a class="doxy_el" href="$(doxygen_html_classDGD_1_1multifile__log_1_1Split__by__size)#a1">Split_by_size</a> (unsigned long vol_size) <li>bool <a class="doxy_el" href="$(doxygen_html_classDGD_1_1multifile__log_1_1Split__by__size)#a2">operator()</a> (unsigned long volume, unsigned long line, unsigned long column, unsigned long bytes) const </ul>
<h2>Private Attributes</h2>
<ul><li>unsigned long <a class="doxy_el" href="$(doxygen_html_classDGD_1_1multifile__log_1_1Split__by__size)#o0">m_vol_size</a></ul>
<hr>
<h2>Constructor &amp; Destructor Documentation</h2>
<a doxytag="DGD::multifile_log::Split_by_size::Split_by_size" name="a0"></a>
<p><table border=0 cellpadding=2 cellspacing=0 width="100%"><tr><td class="doxy_md"><table border=0 cellpadding=0 cellspacing=0><tr><td class="doxy_md" nowrap valign="top"> DGD::multifile_log::Split_by_size::Split_by_size </td><td class="doxy_md" valign="top">(&nbsp;</td><td class="doxy_mdname1" nowrap valign="top">&nbsp; </td><td class="doxy_md" valign="top">)&nbsp;</td><td class="doxy_md" nowrap><code> [inline]</code></td></tr></table></td></tr></table><table border=0 cellpadding=0 cellspacing=5><tr><td> &nbsp; </td><td><p></td></tr></table><a doxytag="DGD::multifile_log::Split_by_size::Split_by_size" name="a1"></a>
<p><table border=0 cellpadding=2 cellspacing=0 width="100%"><tr><td class="doxy_md"><table border=0 cellpadding=0 cellspacing=0><tr><td class="doxy_md" nowrap valign="top"> DGD::multifile_log::Split_by_size::Split_by_size </td><td class="doxy_md" valign="top">(&nbsp;</td><td class="doxy_md" nowrap valign="top">unsigned long&nbsp;</td><td class="doxy_mdname1" nowrap valign="top">&nbsp; <em>vol_size</em></td><td class="doxy_md" valign="top">)&nbsp;</td><td class="doxy_md" nowrap><code> [inline]</code></td></tr></table></td></tr></table><table border=0 cellpadding=0 cellspacing=5><tr><td> &nbsp; </td><td><p></td></tr></table><hr>
<h2>Member Function Documentation</h2>
<a doxytag="DGD::multifile_log::Split_by_size::operator()" name="a2"></a>
<p><table border=0 cellpadding=2 cellspacing=0 width="100%"><tr><td class="doxy_md"><table border=0 cellpadding=0 cellspacing=0><tr><td class="doxy_md" nowrap valign="top"> bool DGD::multifile_log::Split_by_size::operator() </td><td class="doxy_md" valign="top">(&nbsp;</td><td class="doxy_md" nowrap valign="top">unsigned long&nbsp;</td><td class="doxy_mdname" nowrap>&nbsp; <em>volume</em>, </td></tr><tr><td></td><td></td><td class="doxy_md" nowrap>unsigned long&nbsp;</td><td class="doxy_mdname" nowrap>&nbsp; <em>line</em>, </td></tr><tr><td></td><td></td><td class="doxy_md" nowrap>unsigned long&nbsp;</td><td class="doxy_mdname" nowrap>&nbsp; <em>column</em>, </td></tr><tr><td></td><td></td><td class="doxy_md" nowrap>unsigned long&nbsp;</td><td class="doxy_mdname" nowrap>&nbsp; <em>bytes</em></td></tr><tr><td></td><td class="doxy_md">)&nbsp;</td><td class="doxy_md" colspan=2> const<code> [inline, virtual]</code></td></tr></table></td></tr></table><table border=0 cellpadding=0 cellspacing=5><tr><td> &nbsp; </td><td><p><p> Implements <a class="doxy_el" href="$(doxygen_html_classDGD_1_1multifile__log_1_1Split__criteria)#a0">DGD::multifile_log::Split_criteria</a>. </td></tr></table><hr>
<h2>Member Data Documentation</h2>
<a doxytag="DGD::multifile_log::Split_by_size::m_vol_size" name="o0"></a>
<p><table border=0 cellpadding=2 cellspacing=0 width="100%"><tr><td class="doxy_md"><table border=0 cellpadding=0 cellspacing=0><tr><td class="doxy_md" nowrap valign="top"> unsigned long DGD::multifile_log::Split_by_size::m_vol_size<code> [private]</code></td></tr></table></td></tr></table><table border=0 cellpadding=0 cellspacing=5><tr><td> &nbsp; </td><td><p></td></tr></table><hr>The documentation for this class was generated from the following file:<ul><li><a class="doxy_el" href="$(doxygen_html_dgMultifileLog_8h-source)">dgMultifileLog.h</a></ul><hr><address style="align: right;"><small>Generated on Mon Dec 9 18:30:06 2002 for Depression Glass Debug Library by <a href="http://www.doxygen.org/index.html"> <img align="middle" alt="doxygen" border=0 height=53 src="$(doxygen)" width=110></a>1.2.17 </small></address>
</content>

<content name="doxygen_html_classDGD_1_1multifile__log_1_1Split__criteria-members" format="text/html">
<wmmeta name="title" value="Member List" />
<h1>DGD::multifile_log::Split_criteria Member List</h1>
This is the complete list of members for <a class="doxy_el" href="$(doxygen_html_classDGD_1_1multifile__log_1_1Split__criteria)">DGD::multifile_log::Split_criteria</a>
, including all inherited members.<table><tr bgcolor="#f0f0f0"><td><a class="doxy_el" href="$(doxygen_html_classDGD_1_1multifile__log_1_1Split__criteria)#a0">operator()</a>(unsigned long volume, unsigned long line, unsigned long column, unsigned long bytes) const=0</td><td><a class="doxy_el" href="$(doxygen_html_classDGD_1_1multifile__log_1_1Split__criteria)">DGD::multifile_log::Split_criteria</a></td><td><code> [pure virtual]</code></td></tr></table>
<hr>
<address style="align: right;"><small>Generated on Mon Dec 9 18:30:05 2002 for Depression Glass Debug Library by <a href="http://www.doxygen.org/index.html"> <img align="middle" alt="doxygen" border=0 height=53 src="$(doxygen)" width=110></a>1.2.17 </small></address>
</content>

<content name="doxygen_html_classDGD_1_1multifile__log_1_1Split__criteria" format="text/html">
<wmmeta name="title" value="DGD::multifile_log::Split_criteria class Reference" />
<h1>DGD::multifile_log::Split_criteria Class Reference</h1>
<code>#include &lt;<a class="doxy_el" href="$(doxygen_html_dgMultifileLog_8h-source)">dgMultifileLog.h</a>&gt;</code>
<p> Inheritance diagram for DGD::multifile_log::Split_criteria:
<p><center><img alt="Inheritance graph" border=0 src="$(classDGD_1_1multifile__log_1_1Split__criteria__inherit__graph)" usemap="#DGD_1_1multifile__log_1_1Split__criteria__inherit__map"></center><map name="DGD_1_1multifile__log_1_1Split__criteria__inherit__map"><area alt="" coords="0,66,181,85" href="$(doxygen_html_classDGD_1_1multifile__log_1_1Dont__split)" shape="rect"><area alt="" coords="205,66,408,85" href="$(doxygen_html_classDGD_1_1multifile__log_1_1Split__by__lines)" shape="rect"><area alt="" coords="432,66,632,85" href="$(doxygen_html_classDGD_1_1multifile__log_1_1Split__by__size)" shape="rect"></map><center><font size=2>[<a href="$(doxygen_html_graph_legend)">legend</a>]</font></center><a href="$(doxygen_html_classDGD_1_1multifile__log_1_1Split__criteria-members)">List of all members.</a>
<h2>Public Methods</h2>
<ul><li>virtual bool <a class="doxy_el" href="$(doxygen_html_classDGD_1_1multifile__log_1_1Split__criteria)#a0">operator()</a> (unsigned long volume, unsigned long line, unsigned long column, unsigned long bytes) const=0 </ul>
<hr>
<h2>Member Function Documentation</h2>
<a doxytag="DGD::multifile_log::Split_criteria::operator()" name="a0"></a>
<p><table border=0 cellpadding=2 cellspacing=0 width="100%"><tr><td class="doxy_md"><table border=0 cellpadding=0 cellspacing=0><tr><td class="doxy_md" nowrap valign="top"> virtual bool DGD::multifile_log::Split_criteria::operator() </td><td class="doxy_md" valign="top">(&nbsp;</td><td class="doxy_md" nowrap valign="top">unsigned long&nbsp;</td><td class="doxy_mdname" nowrap>&nbsp; <em>volume</em>, </td></tr><tr><td></td><td></td><td class="doxy_md" nowrap>unsigned long&nbsp;</td><td class="doxy_mdname" nowrap>&nbsp; <em>line</em>, </td></tr><tr><td></td><td></td><td class="doxy_md" nowrap>unsigned long&nbsp;</td><td class="doxy_mdname" nowrap>&nbsp; <em>column</em>, </td></tr><tr><td></td><td></td><td class="doxy_md" nowrap>unsigned long&nbsp;</td><td class="doxy_mdname" nowrap>&nbsp; <em>bytes</em></td></tr><tr><td></td><td class="doxy_md">)&nbsp;</td><td class="doxy_md" colspan=2> const<code> [pure virtual]</code></td></tr></table></td></tr></table><table border=0 cellpadding=0 cellspacing=5><tr><td> &nbsp; </td><td><p><p> Implemented in <a class="doxy_el" href="$(doxygen_html_classDGD_1_1multifile__log_1_1Dont__split)#a0">DGD::multifile_log::Dont_split</a>, <a class="doxy_el" href="$(doxygen_html_classDGD_1_1multifile__log_1_1Split__by__size)#a2">DGD::multifile_log::Split_by_size</a>, and <a class="doxy_el" href="$(doxygen_html_classDGD_1_1multifile__log_1_1Split__by__lines)#a3">DGD::multifile_log::Split_by_lines</a>. </td></tr></table><hr>The documentation for this class was generated from the following file:<ul><li><a class="doxy_el" href="$(doxygen_html_dgMultifileLog_8h-source)">dgMultifileLog.h</a></ul><hr><address style="align: right;"><small>Generated on Mon Dec 9 18:30:05 2002 for Depression Glass Debug Library by <a href="http://www.doxygen.org/index.html"> <img align="middle" alt="doxygen" border=0 height=53 src="$(doxygen)" width=110></a>1.2.17 </small></address>
</content>

<content name="doxygen_html_classDGD_1_1option__filter-members" format="text/html">
<wmmeta name="title" value="Member List" />
<h1>DGD::option_filter Member List</h1>
This is the complete list of members for <a class="doxy_el" href="$(doxygen_html_classDGD_1_1option__filter)">DGD::option_filter</a>
, including all inherited members.<table><tr bgcolor="#f0f0f0"><td><a class="doxy_el" href="$(doxygen_html_classDGD_1_1option__filter)#a0">operator()</a>(int argc, char **argv, int filtc, char **filtv)</td><td><a class="doxy_el" href="$(doxygen_html_classDGD_1_1option__filter)">DGD::option_filter</a></td><td></td></tr><tr bgcolor="#f0f0f0"><td><a class="doxy_el" href="$(doxygen_html_classDGD_1_1option__filter)#s0">option_set_container</a> typedef</td><td><a class="doxy_el" href="$(doxygen_html_classDGD_1_1option__filter)">DGD::option_filter</a></td><td></td></tr></table>
<hr>
<address style="align: right;"><small>Generated on Mon Dec 9 18:30:06 2002 for Depression Glass Debug Library by <a href="http://www.doxygen.org/index.html"> <img align="middle" alt="doxygen" border=0 height=53 src="$(doxygen)" width=110></a>1.2.17 </small></address>
</content>

<content name="doxygen_html_classDGD_1_1option__filter" format="text/html">
<wmmeta name="title" value="DGD::option_filter class Reference" />
<h1>DGD::option_filter Class Reference</h1>
Command line options set filter. <a href="#_details">More...</a>
<p><code>#include &lt;<a class="doxy_el" href="$(doxygen_html_dgOptionFilter_8h-source)">dgOptionFilter.h</a>&gt;</code>
<p><a href="$(doxygen_html_classDGD_1_1option__filter-members)">List of all members.</a>
<h2>Public Types</h2>
<ul><li>typedef std::vector&lt; <a class="doxy_el" href="$(doxygen_html_classDGD_1_1option__filter_1_1option__set__type)">option_set_type</a> &gt; <a class="doxy_el" href="$(doxygen_html_classDGD_1_1option__filter)#s0">option_set_container</a></ul>
<h2>Public Methods</h2>
<ul><li><a class="doxy_el" href="$(doxygen_html_classDGD_1_1option__filter)#s0">option_set_container</a> * <a class="doxy_el" href="$(doxygen_html_classDGD_1_1option__filter)#a0">operator()</a> (int argc, char **argv, int filtc, char **filtv) <dl class="doxy_el"><dd><font size="-1"><em>This operator takes &lt;argc,argv&gt; as received by main function, then it takes a set of regular expressions defined by &lt;filtc, filtv&gt; and returns a set (vector) of option subsets.</em> <a href="#a0"></a><em><br><br></em></font></dl></ul>
<hr>
<a name="_details"></a>
<h2>Detailed Description</h2>
 Command line options set filter. <p> This class is designed to separate a set of command line options as received by <div class="doxy_fragment"><pre>main(<span class="doxy_keywordtype">int</span> argc,
 <span class="doxy_keywordtype">char</span>** argv) 
</pre></div> into subsets. This can be used by application using <a class="doxy_el" href="$(doxygen_html_classDGD_1_1Debug)">DGD::Debug</a> for separating debug options from the application-specific options. Terminology: <dl compact><dt> Options set <dd> In the context of this class a pair of &lt;int,char**&gt; representing a set of option strings. <dt> Option set filter <dd> A regular expression which is applied on the given option set (usually full option set received by main()). If the option matches the filter it is copied to the option set associated with that filter. </dl><dl compact><dt><b>See also: </b><dd><a class="doxy_el" href="$(doxygen_html_classDGD_1_1Debug)">DGD::Debug</a></dl>
<p><hr>
<h2>Member Typedef Documentation</h2>
<a doxytag="DGD::option_filter::option_set_container" name="s0"></a>
<p><table border=0 cellpadding=2 cellspacing=0 width="100%"><tr><td class="doxy_md"><table border=0 cellpadding=0 cellspacing=0><tr><td class="doxy_md" nowrap valign="top"> typedef std::vector&lt;<a class="doxy_el" href="$(doxygen_html_classDGD_1_1option__filter_1_1option__set__type)">option_set_type</a>&gt; DGD::option_filter::option_set_container </td></tr></table></td></tr></table><table border=0 cellpadding=0 cellspacing=5><tr><td> &nbsp; </td><td><p></td></tr></table><hr>
<h2>Member Function Documentation</h2>
<a doxytag="DGD::option_filter::operator()" name="a0"></a>
<p><table border=0 cellpadding=2 cellspacing=0 width="100%"><tr><td class="doxy_md"><table border=0 cellpadding=0 cellspacing=0><tr><td class="doxy_md" nowrap valign="top"><a class="doxy_el" href="$(doxygen_html_classDGD_1_1option__filter)#s0">option_filter::option_set_container</a> * DGD::option_filter::operator() </td><td class="doxy_md" valign="top">(&nbsp;</td><td class="doxy_md" nowrap valign="top">int&nbsp;</td><td class="doxy_mdname" nowrap>&nbsp; <em>argc</em>, </td></tr><tr><td></td><td></td><td class="doxy_md" nowrap>char **&nbsp;</td><td class="doxy_mdname" nowrap>&nbsp; <em>argv</em>, </td></tr><tr><td></td><td></td><td class="doxy_md" nowrap>int&nbsp;</td><td class="doxy_mdname" nowrap>&nbsp; <em>filtc</em>, </td></tr><tr><td></td><td></td><td class="doxy_md" nowrap>char **&nbsp;</td><td class="doxy_mdname" nowrap>&nbsp; <em>filtv</em></td></tr><tr><td></td><td class="doxy_md">)&nbsp;</td><td class="doxy_md" colspan=2></td></tr></table></td></tr></table><table border=0 cellpadding=0 cellspacing=5><tr><td> &nbsp; </td><td><p> This operator takes &lt;argc,argv&gt; as received by main function, then it takes a set of regular expressions defined by &lt;filtc, filtv&gt; and returns a set (vector) of option subsets. <p> First set is generated by the first filter, second set by the second filter and so on, the last set contains options which were not selected by any filter. so the following is always true result-&gt;size() == filtc + 1 <dl compact><dt><b>See also: </b><dd><a class="doxy_el" href="$(doxygen_html_classDGD_1_1Debug)">DGD::Debug</a></dl></td></tr></table><hr>The documentation for this class was generated from the following files:<ul><li><a class="doxy_el" href="$(doxygen_html_dgOptionFilter_8h-source)">dgOptionFilter.h</a><li><a class="doxy_el" href="$(doxygen_html_dgOptionFilter_8cpp)">dgOptionFilter.cpp</a></ul><hr><address style="align: right;"><small>Generated on Mon Dec 9 18:30:06 2002 for Depression Glass Debug Library by <a href="http://www.doxygen.org/index.html"> <img align="middle" alt="doxygen" border=0 height=53 src="$(doxygen)" width=110></a>1.2.17 </small></address>
</content>

<content name="doxygen_html_classDGD_1_1option__filter_1_1option__set__type-members" format="text/html">
<wmmeta name="title" value="Member List" />
<h1>DGD::option_filter::option_set_type Member List</h1>
This is the complete list of members for <a class="doxy_el" href="$(doxygen_html_classDGD_1_1option__filter_1_1option__set__type)">DGD::option_filter::option_set_type</a>
, including all inherited members.<table><tr bgcolor="#f0f0f0"><td><a class="doxy_el" href="$(doxygen_html_classDGD_1_1option__filter_1_1option__set__type)#a1">allocate</a>(int n)</td><td><a class="doxy_el" href="$(doxygen_html_classDGD_1_1option__filter_1_1option__set__type)">DGD::option_filter::option_set_type</a></td><td><code> [inline]</code></td></tr><tr bgcolor="#f0f0f0"><td><a class="doxy_el" href="$(doxygen_html_classDGD_1_1option__filter_1_1option__set__type)#m0">argc</a></td><td><a class="doxy_el" href="$(doxygen_html_classDGD_1_1option__filter_1_1option__set__type)">DGD::option_filter::option_set_type</a></td><td></td></tr><tr bgcolor="#f0f0f0"><td><a class="doxy_el" href="$(doxygen_html_classDGD_1_1option__filter_1_1option__set__type)#m1">argv</a></td><td><a class="doxy_el" href="$(doxygen_html_classDGD_1_1option__filter_1_1option__set__type)">DGD::option_filter::option_set_type</a></td><td></td></tr><tr bgcolor="#f0f0f0"><td><a class="doxy_el" href="$(doxygen_html_classDGD_1_1option__filter_1_1option__set__type)#a0">option_set_type</a>()</td><td><a class="doxy_el" href="$(doxygen_html_classDGD_1_1option__filter_1_1option__set__type)">DGD::option_filter::option_set_type</a></td><td><code> [inline]</code></td></tr><tr bgcolor="#f0f0f0"><td><a class="doxy_el" href="$(doxygen_html_classDGD_1_1option__filter_1_1option__set__type)#a2">~option_set_type</a>()</td><td><a class="doxy_el" href="$(doxygen_html_classDGD_1_1option__filter_1_1option__set__type)">DGD::option_filter::option_set_type</a></td><td><code> [inline]</code></td></tr></table>
<hr>
<address style="align: right;"><small>Generated on Mon Dec 9 18:30:06 2002 for Depression Glass Debug Library by <a href="http://www.doxygen.org/index.html"> <img align="middle" alt="doxygen" border=0 height=53 src="$(doxygen)" width=110></a>1.2.17 </small></address>
</content>

<content name="doxygen_html_classDGD_1_1option__filter_1_1option__set__type" format="text/html">
<wmmeta name="title" value="DGD::option_filter::option_set_type class Reference" />
<h1>DGD::option_filter::option_set_type Class Reference</h1>
<code>#include &lt;<a class="doxy_el" href="$(doxygen_html_dgOptionFilter_8h-source)">dgOptionFilter.h</a>&gt;</code>
<p><a href="$(doxygen_html_classDGD_1_1option__filter_1_1option__set__type-members)">List of all members.</a>
<h2>Public Methods</h2>
<ul><li><a class="doxy_el" href="$(doxygen_html_classDGD_1_1option__filter_1_1option__set__type)#a0">option_set_type</a> () <li>void <a class="doxy_el" href="$(doxygen_html_classDGD_1_1option__filter_1_1option__set__type)#a1">allocate</a> (int n) <li><a class="doxy_el" href="$(doxygen_html_classDGD_1_1option__filter_1_1option__set__type)#a2">~option_set_type</a> () </ul>
<h2>Public Attributes</h2>
<ul><li>int <a class="doxy_el" href="$(doxygen_html_classDGD_1_1option__filter_1_1option__set__type)#m0">argc</a><li>char ** <a class="doxy_el" href="$(doxygen_html_classDGD_1_1option__filter_1_1option__set__type)#m1">argv</a></ul>
<hr>
<h2>Constructor &amp; Destructor Documentation</h2>
<a doxytag="DGD::option_filter::option_set_type::option_set_type" name="a0"></a>
<p><table border=0 cellpadding=2 cellspacing=0 width="100%"><tr><td class="doxy_md"><table border=0 cellpadding=0 cellspacing=0><tr><td class="doxy_md" nowrap valign="top"> DGD::option_filter::option_set_type::option_set_type </td><td class="doxy_md" valign="top">(&nbsp;</td><td class="doxy_mdname1" nowrap valign="top">&nbsp; </td><td class="doxy_md" valign="top">)&nbsp;</td><td class="doxy_md" nowrap><code> [inline]</code></td></tr></table></td></tr></table><table border=0 cellpadding=0 cellspacing=5><tr><td> &nbsp; </td><td><p></td></tr></table><a doxytag="DGD::option_filter::option_set_type::~option_set_type" name="a2"></a>
<p><table border=0 cellpadding=2 cellspacing=0 width="100%"><tr><td class="doxy_md"><table border=0 cellpadding=0 cellspacing=0><tr><td class="doxy_md" nowrap valign="top"> DGD::option_filter::option_set_type::~option_set_type </td><td class="doxy_md" valign="top">(&nbsp;</td><td class="doxy_mdname1" nowrap valign="top">&nbsp; </td><td class="doxy_md" valign="top">)&nbsp;</td><td class="doxy_md" nowrap><code> [inline]</code></td></tr></table></td></tr></table><table border=0 cellpadding=0 cellspacing=5><tr><td> &nbsp; </td><td><p></td></tr></table><hr>
<h2>Member Function Documentation</h2>
<a doxytag="DGD::option_filter::option_set_type::allocate" name="a1"></a>
<p><table border=0 cellpadding=2 cellspacing=0 width="100%"><tr><td class="doxy_md"><table border=0 cellpadding=0 cellspacing=0><tr><td class="doxy_md" nowrap valign="top"> void DGD::option_filter::option_set_type::allocate </td><td class="doxy_md" valign="top">(&nbsp;</td><td class="doxy_md" nowrap valign="top">int&nbsp;</td><td class="doxy_mdname1" nowrap valign="top">&nbsp; <em>n</em></td><td class="doxy_md" valign="top">)&nbsp;</td><td class="doxy_md" nowrap><code> [inline]</code></td></tr></table></td></tr></table><table border=0 cellpadding=0 cellspacing=5><tr><td> &nbsp; </td><td><p></td></tr></table><hr>
<h2>Member Data Documentation</h2>
<a doxytag="DGD::option_filter::option_set_type::argc" name="m0"></a>
<p><table border=0 cellpadding=2 cellspacing=0 width="100%"><tr><td class="doxy_md"><table border=0 cellpadding=0 cellspacing=0><tr><td class="doxy_md" nowrap valign="top"> int DGD::option_filter::option_set_type::argc </td></tr></table></td></tr></table><table border=0 cellpadding=0 cellspacing=5><tr><td> &nbsp; </td><td><p></td></tr></table><a doxytag="DGD::option_filter::option_set_type::argv" name="m1"></a>
<p><table border=0 cellpadding=2 cellspacing=0 width="100%"><tr><td class="doxy_md"><table border=0 cellpadding=0 cellspacing=0><tr><td class="doxy_md" nowrap valign="top"> char** DGD::option_filter::option_set_type::argv </td></tr></table></td></tr></table><table border=0 cellpadding=0 cellspacing=5><tr><td> &nbsp; </td><td><p></td></tr></table><hr>The documentation for this class was generated from the following file:<ul><li><a class="doxy_el" href="$(doxygen_html_dgOptionFilter_8h-source)">dgOptionFilter.h</a></ul><hr><address style="align: right;"><small>Generated on Mon Dec 9 18:30:06 2002 for Depression Glass Debug Library by <a href="http://www.doxygen.org/index.html"> <img align="middle" alt="doxygen" border=0 height=53 src="$(doxygen)" width=110></a>1.2.17 </small></address>
</content>

<content name="doxygen_html_dgChannel_8cpp" format="text/html">
<wmmeta name="title" value="dgChannel.cpp File Reference" />
<h1>dgChannel.cpp File Reference</h1>
implementation of <a class="doxy_el" href="$(doxygen_html_classDGD_1_1channel)">DGD::channel</a>
 <a href="#_details">More...</a>
<p><code>#include &lt;ctime&gt;</code><br><code>#include &quot;<a class="doxy_el" href="$(doxygen_html_dgDebug_8h-source)">dgDebug.h</a>&quot;</code><br><code>#include &quot;<a class="doxy_el" href="$(doxygen_html_dgChannel_8h-source)">dgChannel.h</a>&quot;</code><br>
<p> Include dependency graph for dgChannel.cpp:
<p><center><img alt="Include dependency graph" border=0 src="$(dgChannel_8cpp__incl)" usemap="#dgChannel.cpp_map"></center><map name="dgChannel.cpp_map"><area alt="" coords="131,93,203,112" href="$(doxygen_html_dgDebug_8h)" shape="rect"><area alt="" coords="1,71,81,89" href="$(doxygen_html_dgChannel_8h)" shape="rect"></map>
<h2>Namespaces</h2>
<ul><li>namespace <a class="doxy_el" href="$(doxygen_html_namespaceDGD)">DGD</a></ul>
<hr>
<a name="_details"></a>
<h2>Detailed Description</h2>
 implementation of <a class="doxy_el" href="$(doxygen_html_classDGD_1_1channel)">DGD::channel</a>
<p>
<p><hr><address style="align: right;"><small>Generated on Mon Dec 9 18:29:58 2002 for Depression Glass Debug Library by <a href="http://www.doxygen.org/index.html"> <img align="middle" alt="doxygen" border=0 height=53 src="$(doxygen)" width=110></a>1.2.17 </small></address>
</content>

<content name="doxygen_html_dgChannel_8h-source" format="text/html">
<wmmeta name="title" value="dgChannel.h Source File" />
<h1>dgChannel.h</h1>
<a href="$(doxygen_html_dgChannel_8h)">Go to the documentation of this file.</a>
<div class="doxy_fragment"><pre>00001 <span class="doxy_comment">// -*- c++ -*-</span>
00002 <span class="doxy_comment">//</span>
00003 <span class="doxy_comment">// $Id: dgd\\doc\\html\\Attic\\doxygen_html.wmk,v 1.9 2002/12/09 16:32:20 dimka Exp $</span>
00004 <span class="doxy_comment">//</span>
00005 <span class="doxy_comment">// This program is free software; you can redistribute it and/or modify</span>
00006 <span class="doxy_comment">// it under the terms of the GNU General Public License as published by</span>
00007 <span class="doxy_comment">// the Free Software Foundation; either version 2 of the License, or</span>
00008 <span class="doxy_comment">// (at your option) any later version.</span>
00009 <span class="doxy_comment">//</span>
00010 <span class="doxy_comment">// This program is distributed in the hope that it will be useful,</span>
00011 <span class="doxy_comment">// but WITHOUT ANY WARRANTY; without even the implied warranty of</span>
00012 <span class="doxy_comment">// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the</span>
00013 <span class="doxy_comment">// GNU General Public License for more details.</span>
00014 <span class="doxy_comment">//</span>
00015 <span class="doxy_comment">// You should have received a copy of the GNU General Public License</span>
00016 <span class="doxy_comment">// along with this program; if not, write to the Free Software</span>
00017 <span class="doxy_comment">// Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA</span>
00018 <span class="doxy_comment">//</span>
00019 <span class="doxy_comment">// This file is part of Depression Glass library.</span>
00020 <span class="doxy_comment">//</span>
00021 <span class="doxy_comment">// Copyright (c) 2002. Dimitry Kloper &lt;dimka@cs.technion.ac.il&gt; . </span>
00022 <span class="doxy_comment">//</span>
00023 <span class="doxy_comment">// dgChannel.h -- DGD channel implementation</span>
00024 <span class="doxy_comment">//</span>
00025 
00026 <span class="doxy_preprocessor">#ifndef _dgChannel_h_</span>
00027 <span class="doxy_preprocessor"></span><span class="doxy_preprocessor">#define _dgChannel_h_</span>
00028 <span class="doxy_preprocessor"></span><span class="doxy_comment"></span>
00029 <span class="doxy_comment">/**</span>
00030 <span class="doxy_comment"> * @file dgChannel.h</span>
00031 <span class="doxy_comment"> *</span>
00032 <span class="doxy_comment"> * Declaration of DGD::channel </span>
00033 <span class="doxy_comment"> */</span>
00034 
00035 <span class="doxy_preprocessor">#include &lt;iostream&gt;</span>
00036 <span class="doxy_preprocessor">#include &lt;string&gt;</span>
00037 
00038 <span class="doxy_preprocessor">#include &quot;<a class="doxy_code" href="$(doxygen_html_dgChannelBuf_8h)">dgChannelBuf.h</a>&quot;</span>
00039 
00040 <span class="doxy_keyword">namespace </span>DGD {
00041 <span class="doxy_comment"></span>
00042 <span class="doxy_comment">/**</span>
00043 <span class="doxy_comment"> * Simple debug channel. This class is a std::ostream with extended</span>
00044 <span class="doxy_comment"> * functionality. Terminology:</span>
00045 <span class="doxy_comment"> * &lt;ul&gt;</span>
00046 <span class="doxy_comment"> * &lt;li&gt; Stream input -- a set of characters pushed into the stream for</span>
00047 <span class="doxy_comment"> * later output.</span>
00048 <span class="doxy_comment"> * &lt;li&gt; Line -- a set of characters on a single line of output, or</span>
00049 <span class="doxy_comment"> * alternatively, set of characters between two '\\n' or '\r'.</span>
00050 <span class="doxy_comment"> * &lt;li&gt; Line width -- the length of the line excluding '\\n' or '\r'.</span>
00051 <span class="doxy_comment"> * &lt;/ul&gt;</span>
00052 <span class="doxy_comment"> *</span>
00053 <span class="doxy_comment"> * DGD::channel treats the input as sequence of lines. Similarly to</span>
00054 <span class="doxy_comment"> * std::ostream it has a set of format flags and other parameters</span>
00055 <span class="doxy_comment"> * defining how the sequence is formatted. The following formatting</span>
00056 <span class="doxy_comment"> * options are available:</span>
00057 <span class="doxy_comment"> * &lt;ul&gt;</span>
00058 <span class="doxy_comment"> * &lt;li&gt; Character wrap. Controlled by void channel::wrap(bool)</span>
00059 <span class="doxy_comment"> * method. State is received by bool channel::wrap() const method.</span>
00060 <span class="doxy_comment"> *</span>
00061 <span class="doxy_comment"> * DGD::channel can have character wrapping enabled or</span>
00062 <span class="doxy_comment"> * disabled. When disabled, DGD::channel discards maximum line width,</span>
00063 <span class="doxy_comment"> * allowing virtually infinite lines.</span>
00064 <span class="doxy_comment"> *</span>
00065 <span class="doxy_comment"> * If the character wrapping is enabled DGD::channel tracks maximum</span>
00066 <span class="doxy_comment"> * line width. Line longer then maximum width (indentation spaces at</span>
00067 <span class="doxy_comment"> * the beginning of line are considered as part of the line!) is</span>
00068 <span class="doxy_comment"> * broken into two lines. The first one has at most maximum width. See</span>
00069 <span class="doxy_comment"> * word wrapping section for more info. The second one is processed in</span>
00070 <span class="doxy_comment"> * a recursive manner.</span>
00071 <span class="doxy_comment"> *</span>
00072 <span class="doxy_comment"> * &lt;li&gt; Maximum line width. Controlled by void</span>
00073 <span class="doxy_comment"> * channel::max_width(unsigned int). State is received by unsigned int</span>
00074 <span class="doxy_comment"> * channel::max_width() const method. </span>
00075 <span class="doxy_comment"> *</span>
00076 <span class="doxy_comment"> * Usually it is good idea to limit the log width.  For example log</span>
00077 <span class="doxy_comment"> * with 79 characters width limit can be nicely viewed in standard</span>
00078 <span class="doxy_comment"> * 80x24 terminal, default emacs window, etc..., without need for</span>
00079 <span class="doxy_comment"> * window resizing.</span>
00080 <span class="doxy_comment"> *</span>
00081 <span class="doxy_comment"> * &lt;li&gt; Minimum line width. Controlled by void</span>
00082 <span class="doxy_comment"> * channel::min_width(unsigned int). State is received by unsigned int</span>
00083 <span class="doxy_comment"> * channel::min_width() const method. </span>
00084 <span class="doxy_comment"> *</span>
00085 <span class="doxy_comment"> * This parameter controls maximum indent level. Maximum indent column</span>
00086 <span class="doxy_comment"> * is calculated as minimum between current indent value and maximum</span>
00087 <span class="doxy_comment"> * line width minus minimum line width. This is true even if character</span>
00088 <span class="doxy_comment"> * wrapping is disabled.</span>
00089 <span class="doxy_comment"> *</span>
00090 <span class="doxy_comment"> * &lt;li&gt; Word wrap. Controlled by void channel::word_wrap(bool)</span>
00091 <span class="doxy_comment"> * method. State is received by bool channel::word_wrap() const</span>
00092 <span class="doxy_comment"> * method.</span>
00093 <span class="doxy_comment"> *</span>
00094 <span class="doxy_comment"> * Word wrapping takes place only if character wrapping is enabled.</span>
00095 <span class="doxy_comment"> *</span>
00096 <span class="doxy_comment"> * If word wrapping is disabled the line longer then maximum width</span>
00097 <span class="doxy_comment"> * will be broken in two and the first line of the pair will have</span>
00098 <span class="doxy_comment"> * exactly maximum width. Otherwise word wrapping takes place. If the</span>
00099 <span class="doxy_comment"> * line can't be broken into words the character wrapping is performed</span>
00100 <span class="doxy_comment"> * (if enabled ). The word wrapping is controlled also by space</span>
00101 <span class="doxy_comment"> * characters set, see void channel::space_chars(const char*) method.</span>
00102 <span class="doxy_comment"> * </span>
00103 <span class="doxy_comment"> * &lt;li&gt; Indentation level, indentation step. Controlled by </span>
00104 <span class="doxy_comment"> *    &lt;ul&gt;</span>
00105 <span class="doxy_comment"> *    &lt;li&gt; void         indent_step( unsigned int step );</span>
00106 <span class="doxy_comment"> *    &lt;li&gt; void         incr_indent();</span>
00107 <span class="doxy_comment"> *    &lt;li&gt; void         decr_indent();</span>
00108 <span class="doxy_comment"> *    &lt;li&gt; void         indent( unsigned int val );</span>
00109 <span class="doxy_comment"> *    &lt;/ul&gt;</span>
00110 <span class="doxy_comment"> * State is received by:</span>
00111 <span class="doxy_comment"> *    &lt;ul&gt;</span>
00112 <span class="doxy_comment"> *    &lt;li&gt; unsigned int indent_step() const;</span>
00113 <span class="doxy_comment"> *    &lt;li&gt; unsigned int indent() const;</span>
00114 <span class="doxy_comment"> *    &lt;/ul&gt;</span>
00115 <span class="doxy_comment"> *</span>
00116 <span class="doxy_comment"> * Indentation level determines amount of leading spaces for each</span>
00117 <span class="doxy_comment"> * line of output. This amount is considered as part of the line</span>
00118 <span class="doxy_comment"> * width.</span>
00119 <span class="doxy_comment"> *</span>
00120 <span class="doxy_comment"> * Indentation level can be set directly by indent(unsigned int)</span>
00121 <span class="doxy_comment"> * method, or by incrementing/decrementing using incr_indent() and</span>
00122 <span class="doxy_comment"> * decr_indent() methods. In the later case it is changed by indent</span>
00123 <span class="doxy_comment"> * step value. </span>
00124 <span class="doxy_comment"> * &lt;/ul&gt;</span>
00125 <span class="doxy_comment"> *</span>
00126 <span class="doxy_comment"> * Each channel has string name. Generally it need not be unique, but</span>
00127 <span class="doxy_comment"> * DGD::Debug factory accepts only unique names for channels.</span>
00128 <span class="doxy_comment"> *</span>
00129 <span class="doxy_comment"> * By default the channel is created in closed state. Closed channel</span>
00130 <span class="doxy_comment"> * will produce no output. Use open() and close() methods to open</span>
00131 <span class="doxy_comment"> * channel.</span>
00132 <span class="doxy_comment"> *</span>
00133 <span class="doxy_comment"> * By default channel acts as a simple memory buffer. To make the</span>
00134 <span class="doxy_comment"> * channel act as a multiplexor for any number of std::ostream you</span>
00135 <span class="doxy_comment"> * will need to call assoc(std::ostream* ,channel&amp;) function. In other words</span>
00136 <span class="doxy_comment"> * you can associate the channel with any number of files or other</span>
00137 <span class="doxy_comment"> * std::ostream derivatives. The output from the channel will be</span>
00138 <span class="doxy_comment"> * copied to all the associated files.</span>
00139 <span class="doxy_comment"> */</span>
<a name="l00140"></a><a class="doxy_code" href="$(doxygen_html_classDGD_1_1channel)">00140</a> <span class="doxy_keyword">class </span><a class="doxy_code" href="$(doxygen_html_classDGD_1_1channel)">channel</a>: <span class="doxy_keyword">public</span> std::ostream {
00141    <span class="doxy_keyword">public</span>:
<a name="l00142"></a><a class="doxy_code" href="$(doxygen_html_classDGD_1_1channel)#s0">00142</a>       <span class="doxy_keyword">typedef</span> std::ostream <a class="doxy_code" href="$(doxygen_html_classDGD_1_1channel)#s0">Parent</a>;
00143       
00144    <span class="doxy_keyword">public</span>:
00145       <a class="doxy_code" href="$(doxygen_html_classDGD_1_1channel)#a0">channel</a>( <span class="doxy_keyword">const</span> std::string&amp; <a class="doxy_code" href="$(doxygen_html_classDGD_1_1channel)#a5">name</a> );
00146       <span class="doxy_keywordtype">void</span>               <a class="doxy_code" href="$(doxygen_html_classDGD_1_1channel)#a1">open</a>();
00147       <span class="doxy_keywordtype">void</span>               <a class="doxy_code" href="$(doxygen_html_classDGD_1_1channel)#a2">close</a>();
00148       <span class="doxy_keywordtype">bool</span>               <a class="doxy_code" href="$(doxygen_html_classDGD_1_1channel)#a3">is_open</a>() <span class="doxy_keyword">const</span>;
00149       operator           bool () <span class="doxy_keyword">const</span>;
00150       <span class="doxy_keyword">const</span> std::string&amp; <a class="doxy_code" href="$(doxygen_html_classDGD_1_1channel)#a5">name</a>() <span class="doxy_keyword">const</span>;
00151       <a class="doxy_code" href="$(doxygen_html_classDGD_1_1channelbuf)">channelbuf</a>*      <a class="doxy_code" href="$(doxygen_html_classDGD_1_1channel)#a6">rdbuf</a>() <span class="doxy_keyword">const</span>;
00152       <a class="doxy_code" href="$(doxygen_html_classDGD_1_1channelbuf)">channelbuf</a>&amp;      <a class="doxy_code" href="$(doxygen_html_classDGD_1_1channel)#a6">rdbuf</a>();
00153       
00154       <span class="doxy_keywordtype">void</span>         <a class="doxy_code" href="$(doxygen_html_classDGD_1_1channel)#a9">indent_step</a>( <span class="doxy_keywordtype">unsigned</span> <span class="doxy_keywordtype">int</span> <a class="doxy_code" href="$(doxygen_html_namespaceDGD)#a13">step</a> );
00155       <span class="doxy_keywordtype">unsigned</span> <span class="doxy_keywordtype">int</span> <a class="doxy_code" href="$(doxygen_html_classDGD_1_1channel)#a9">indent_step</a>() <span class="doxy_keyword">const</span>;
00156       <span class="doxy_keywordtype">void</span>         <a class="doxy_code" href="$(doxygen_html_classDGD_1_1channel)#a10">incr_indent</a>();
00157       <span class="doxy_keywordtype">void</span>         <a class="doxy_code" href="$(doxygen_html_classDGD_1_1channel)#a11">decr_indent</a>();
00158       <span class="doxy_keywordtype">void</span>         <a class="doxy_code" href="$(doxygen_html_classDGD_1_1channel)#a13">indent</a>( <span class="doxy_keywordtype">unsigned</span> <span class="doxy_keywordtype">int</span> val );
00159       <span class="doxy_keywordtype">unsigned</span> <span class="doxy_keywordtype">int</span> <a class="doxy_code" href="$(doxygen_html_classDGD_1_1channel)#a13">indent</a>() <span class="doxy_keyword">const</span>;
00160       
00161       <span class="doxy_keywordtype">void</span>         <a class="doxy_code" href="$(doxygen_html_classDGD_1_1channel)#a15">min_width</a>( <span class="doxy_keywordtype">unsigned</span> <span class="doxy_keywordtype">int</span> width );
00162       <span class="doxy_keywordtype">unsigned</span> <span class="doxy_keywordtype">int</span> <a class="doxy_code" href="$(doxygen_html_classDGD_1_1channel)#a15">min_width</a>() <span class="doxy_keyword">const</span>;
00163       <span class="doxy_keywordtype">void</span>         <a class="doxy_code" href="$(doxygen_html_classDGD_1_1channel)#a17">max_width</a>( <span class="doxy_keywordtype">unsigned</span> <span class="doxy_keywordtype">int</span> width );
00164       <span class="doxy_keywordtype">unsigned</span> <span class="doxy_keywordtype">int</span> <a class="doxy_code" href="$(doxygen_html_classDGD_1_1channel)#a17">max_width</a>() <span class="doxy_keyword">const</span>;
00165       
00166       <span class="doxy_keywordtype">void</span>         <a class="doxy_code" href="$(doxygen_html_classDGD_1_1channel)#a19">wrap</a>( <span class="doxy_keywordtype">bool</span> allow );
00167       <span class="doxy_keywordtype">bool</span>         <a class="doxy_code" href="$(doxygen_html_classDGD_1_1channel)#a19">wrap</a>() <span class="doxy_keyword">const</span>;
00168       <span class="doxy_keywordtype">void</span>         <a class="doxy_code" href="$(doxygen_html_classDGD_1_1channel)#a21">word_wrap</a>( <span class="doxy_keywordtype">bool</span> allow );
00169       <span class="doxy_keywordtype">bool</span>         <a class="doxy_code" href="$(doxygen_html_classDGD_1_1channel)#a21">word_wrap</a>() <span class="doxy_keyword">const</span>;
00170       
00171       <span class="doxy_keywordtype">void</span>         <a class="doxy_code" href="$(doxygen_html_classDGD_1_1channel)#a23">space_chars</a>(<span class="doxy_keyword">const</span> <span class="doxy_keywordtype">char</span>* spc = <span class="doxy_stringliteral">&quot; \t&quot;</span>);
00172       std::string  <a class="doxy_code" href="$(doxygen_html_classDGD_1_1channel)#a23">space_chars</a>() <span class="doxy_keyword">const</span>;
00173 
00174       <span class="doxy_keyword">virtual</span> <span class="doxy_keywordtype">void</span> <a class="doxy_code" href="$(doxygen_html_classDGD_1_1channel)#a24">header</a>();
00175 
00176    <span class="doxy_keyword">private</span>:
<a name="l00177"></a><a class="doxy_code" href="$(doxygen_html_classDGD_1_1channel)#o0">00177</a>       <span class="doxy_keywordtype">bool</span> <a class="doxy_code" href="$(doxygen_html_classDGD_1_1channel)#o0">m_is_open</a>;
<a name="l00178"></a><a class="doxy_code" href="$(doxygen_html_classDGD_1_1channel)#o1">00178</a>       std::string <a class="doxy_code" href="$(doxygen_html_classDGD_1_1channel)#o1">m_name</a>;
<a name="l00179"></a><a class="doxy_code" href="$(doxygen_html_classDGD_1_1channel)#o2">00179</a>       <a class="doxy_code" href="$(doxygen_html_classDGD_1_1channelbuf)">channelbuf</a> <a class="doxy_code" href="$(doxygen_html_classDGD_1_1channel)#o2">m_buffer</a>;
<a name="l00180"></a><a class="doxy_code" href="$(doxygen_html_classDGD_1_1channel)#o3">00180</a>       <a class="doxy_code" href="$(doxygen_html_classDGD_1_1channelbuf)">channelbuf</a> <a class="doxy_code" href="$(doxygen_html_classDGD_1_1channel)#o3">m_tmp_buffer</a>;
00181 };
00182 
00183 <span class="doxy_keywordtype">void</span> <a class="doxy_code" href="$(doxygen_html_namespaceDGD)#a6">assoc</a>( std::ostream* s, channel&amp; channel );
00184 <span class="doxy_keywordtype">void</span> <a class="doxy_code" href="$(doxygen_html_namespaceDGD)#a6">assoc</a>( std::ostream&amp; s, channel&amp; channel );
00185 <span class="doxy_keywordtype">void</span> <a class="doxy_code" href="$(doxygen_html_namespaceDGD)#a6">assoc</a>( std::ostream* s, <span class="doxy_keyword">const</span> std::string&amp; name );
00186 
00187 }; <span class="doxy_comment">// end of namespace DGD</span>
00188 
00189 <span class="doxy_preprocessor">#endif </span><span class="doxy_comment">/* _dgChannel_h_ */</span>
00190 
00191 <span class="doxy_comment">/* </span>
00192 <span class="doxy_comment"> * Local Variables:</span>
00193 <span class="doxy_comment"> * compile-command: &quot;make dgChannel.obj&quot;</span>
00194 <span class="doxy_comment"> * End:</span>
00195 <span class="doxy_comment"> */</span>
00196 
00197 
</pre></div>
<hr>
<address style="align: right;"><small>Generated on Mon Dec 9 18:29:57 2002 for Depression Glass Debug Library by <a href="http://www.doxygen.org/index.html"> <img align="middle" alt="doxygen" border=0 height=53 src="$(doxygen)" width=110></a>1.2.17 </small></address>
</content>

<content name="doxygen_html_dgChannel_8h" format="text/html">
<wmmeta name="title" value="dgChannel.h File Reference" />
<h1>dgChannel.h File Reference</h1>
Declaration of <a class="doxy_el" href="$(doxygen_html_classDGD_1_1channel)">DGD::channel</a>
. <a href="#_details">More...</a>
<p><code>#include &lt;iostream&gt;</code><br><code>#include &lt;string&gt;</code><br><code>#include &quot;<a class="doxy_el" href="$(doxygen_html_dgChannelBuf_8h-source)">dgChannelBuf.h</a>&quot;</code><br>
<p> Include dependency graph for dgChannel.h:
<p><center><img alt="Include dependency graph" border=0 src="$(dgChannel_8h__incl)" usemap="#dgChannel.h_map"></center><map name="dgChannel.h_map"><area alt="" coords="116,133,217,151" href="$(doxygen_html_dgChannelBuf_8h)" shape="rect"><area alt="" coords="101,66,176,85" href="$(doxygen_html_dgStream_8h)" shape="rect"></map>
<p> This graph shows which files directly or indirectly include this file:
<p><center><img alt="Included by dependency graph" border=0 src="$(dgChannel_8h__dep__incl)" usemap="#dgChannel.hdep_map"></center><map name="dgChannel.hdep_map"><area alt="" coords="133,66,205,85" href="$(doxygen_html_dgDebug_8h)" shape="rect"><area alt="" coords="124,133,215,151" href="$(doxygen_html_dgDebugStd_8h)" shape="rect"><area alt="" coords="239,133,353,151" href="$(doxygen_html_dgChannelManip_8h)" shape="rect"><area alt="" coords="0,-1,93,18" href="$(doxygen_html_dgChannel_8cpp)" shape="rect"><area alt="" coords="128,-1,211,18" href="$(doxygen_html_dgDebug_8cpp)" shape="rect"></map>
<p><a href="$(doxygen_html_dgChannel_8h-source)">Go to the source code of this file.</a>
<h2>Namespaces</h2>
<ul><li>namespace <a class="doxy_el" href="$(doxygen_html_namespaceDGD)">DGD</a></ul>
<hr>
<a name="_details"></a>
<h2>Detailed Description</h2>
 Declaration of <a class="doxy_el" href="$(doxygen_html_classDGD_1_1channel)">DGD::channel</a>
. <p>
<p><hr><address style="align: right;"><small>Generated on Mon Dec 9 18:29:58 2002 for Depression Glass Debug Library by <a href="http://www.doxygen.org/index.html"> <img align="middle" alt="doxygen" border=0 height=53 src="$(doxygen)" width=110></a>1.2.17 </small></address>
</content>

<content name="doxygen_html_dgChannelBuf_8cpp" format="text/html">
<wmmeta name="title" value="dgChannelBuf.cpp File Reference" />
<h1>dgChannelBuf.cpp File Reference</h1>
implementation of <a class="doxy_el" href="$(doxygen_html_classDGD_1_1channelbuf)">DGD::channelbuf</a>
 <a href="#_details">More...</a>
<p><code>#include &quot;<a class="doxy_el" href="$(doxygen_html_dgChannelBuf_8h-source)">dgChannelBuf.h</a>&quot;</code><br>
<p> Include dependency graph for dgChannelBuf.cpp:
<p><center><img alt="Include dependency graph" border=0 src="$(dgChannelBuf_8cpp__incl)" usemap="#dgChannelBuf.cpp_map"></center><map name="dgChannelBuf.cpp_map"><area alt="" coords="77,133,179,151" href="$(doxygen_html_dgChannelBuf_8h)" shape="rect"><area alt="" coords="51,66,125,85" href="$(doxygen_html_dgStream_8h)" shape="rect"></map>
<h2>Namespaces</h2>
<ul><li>namespace <a class="doxy_el" href="$(doxygen_html_namespaceDGD)">DGD</a></ul>
<hr>
<a name="_details"></a>
<h2>Detailed Description</h2>
 implementation of <a class="doxy_el" href="$(doxygen_html_classDGD_1_1channelbuf)">DGD::channelbuf</a>
<p>
<p><hr><address style="align: right;"><small>Generated on Mon Dec 9 18:29:59 2002 for Depression Glass Debug Library by <a href="http://www.doxygen.org/index.html"> <img align="middle" alt="doxygen" border=0 height=53 src="$(doxygen)" width=110></a>1.2.17 </small></address>
</content>

<content name="doxygen_html_dgChannelBuf_8h-source" format="text/html">
<wmmeta name="title" value="dgChannelBuf.h Source File" />
<h1>dgChannelBuf.h</h1>
<a href="$(doxygen_html_dgChannelBuf_8h)">Go to the documentation of this file.</a>
<div class="doxy_fragment"><pre>00001 <span class="doxy_comment">// -*- c++ -*-</span>
00002 <span class="doxy_comment">//</span>
00003 <span class="doxy_comment">// $Id: dgd\\doc\\html\\Attic\\doxygen_html.wmk,v 1.9 2002/12/09 16:32:20 dimka Exp $</span>
00004 <span class="doxy_comment">//</span>
00005 <span class="doxy_comment">// This program is free software; you can redistribute it and/or modify</span>
00006 <span class="doxy_comment">// it under the terms of the GNU General Public License as published by</span>
00007 <span class="doxy_comment">// the Free Software Foundation; either version 2 of the License, or</span>
00008 <span class="doxy_comment">// (at your option) any later version.</span>
00009 <span class="doxy_comment">//</span>
00010 <span class="doxy_comment">// This program is distributed in the hope that it will be useful,</span>
00011 <span class="doxy_comment">// but WITHOUT ANY WARRANTY; without even the implied warranty of</span>
00012 <span class="doxy_comment">// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the</span>
00013 <span class="doxy_comment">// GNU General Public License for more details.</span>
00014 <span class="doxy_comment">//</span>
00015 <span class="doxy_comment">// You should have received a copy of the GNU General Public License</span>
00016 <span class="doxy_comment">// along with this program; if not, write to the Free Software</span>
00017 <span class="doxy_comment">// Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA</span>
00018 <span class="doxy_comment">//</span>
00019 <span class="doxy_comment">// This file is part of Depression Glass library.</span>
00020 <span class="doxy_comment">//</span>
00021 <span class="doxy_comment">// Copyright (c) 2002. Dimitry Kloper &lt;dimka@cs.technion.ac.il&gt; . </span>
00022 <span class="doxy_comment">//</span>
00023 <span class="doxy_comment">// dgChannelBuf.h -- streambuf which acts as a channel</span>
00024 <span class="doxy_comment">//</span>
00025 
00026 <span class="doxy_preprocessor">#ifndef _dgChannelBuf_h_</span>
00027 <span class="doxy_preprocessor"></span><span class="doxy_preprocessor">#define _dgChannelBuf_h_</span>
00028 <span class="doxy_preprocessor"></span><span class="doxy_comment"></span>
00029 <span class="doxy_comment">/**</span>
00030 <span class="doxy_comment"> * @file dgChannelBuf.h</span>
00031 <span class="doxy_comment"> *</span>
00032 <span class="doxy_comment"> * Declaration of DGD::channelbuf</span>
00033 <span class="doxy_comment"> */</span>
00034 
00035 <span class="doxy_preprocessor">#include &lt;iostream&gt;</span>
00036 <span class="doxy_preprocessor">#include &lt;list&gt;</span>
00037 <span class="doxy_preprocessor">#include &lt;string&gt;</span>
00038 
00039 <span class="doxy_preprocessor">#include &quot;<a class="doxy_code" href="$(doxygen_html_dgStream_8h)">dgStream.h</a>&quot;</span>
00040 
00041 <span class="doxy_keyword">namespace </span>DGD {
00042 <span class="doxy_comment"></span>
00043 <span class="doxy_comment">/**</span>
00044 <span class="doxy_comment"> * Simple formatting std::streambuf. This is a core class of DGD. Here</span>
00045 <span class="doxy_comment"> * actual output formatting takes place. Please refer to DGD::channel</span>
00046 <span class="doxy_comment"> * for general explanation on the channel formatting</span>
00047 <span class="doxy_comment"> * capabilities. The discussion below is focused on technical aspects</span>
00048 <span class="doxy_comment"> * of the formatting.</span>
00049 <span class="doxy_comment"> *</span>
00050 <span class="doxy_comment"> * DGD::channelbuf has it's own memory buffer which can be controlled</span>
00051 <span class="doxy_comment"> * by channelbuf::setbuf(char_type*,std::streamsize) method. All</span>
00052 <span class="doxy_comment"> * channel input (see DGD::channel for the terminology) formatted by</span>
00053 <span class="doxy_comment"> * std::ostream operators is put into it. DGD::channelbuf</span>
00054 <span class="doxy_comment"> * scans the buffer (see channelbuf::overflow(int_type)) and makes the</span>
00055 <span class="doxy_comment"> * additional formatting.</span>
00056 <span class="doxy_comment"> *</span>
00057 <span class="doxy_comment"> * DGD::channelbuf acts as a stream multiplexor. It maintains a list of</span>
00058 <span class="doxy_comment"> * DGD::stream objects which are &quot;associated&quot; with this channel  buffer </span>
00059 <span class="doxy_comment"> * (see channelbuf::assoc(std::ostream*)). If the list is empty no</span>
00060 <span class="doxy_comment"> * output is produced. The channelbuf output is copied to all objects </span>
00061 <span class="doxy_comment"> * on the list when it is ready.</span>
00062 <span class="doxy_comment"> * </span>
00063 <span class="doxy_comment"> * std::ostream object can be associated with DGD::channelbuf by</span>
00064 <span class="doxy_comment"> * calling channelbuf::assoc(std::ostream*) method, but it is more</span>
00065 <span class="doxy_comment"> * appropriate to use DGD::assoc(std::ostream*,channel&amp;) or </span>
00066 <span class="doxy_comment"> * assoc(std::ostream*,const std::string&amp;) functions. </span>
00067 <span class="doxy_comment"> *</span>
00068 <span class="doxy_comment"> * Since channelbuf usually can't figure out whether its input</span>
00069 <span class="doxy_comment"> * contains a complete line or only part of it, channelbuf does not</span>
00070 <span class="doxy_comment"> * flush the entire buffer, but only part of it. To keep track of</span>
00071 <span class="doxy_comment"> * current state of the output it has m_line and m_column variables which</span>
00072 <span class="doxy_comment"> * can be queried using channelbuf::position() method. </span>
00073 <span class="doxy_comment"> */</span>
<a name="l00074"></a><a class="doxy_code" href="$(doxygen_html_classDGD_1_1channelbuf)">00074</a> <span class="doxy_keyword">class </span><a class="doxy_code" href="$(doxygen_html_classDGD_1_1channelbuf)">channelbuf</a>: <span class="doxy_keyword">public</span> std::streambuf {
00075    <span class="doxy_keyword">public</span>:
<a name="l00076"></a><a class="doxy_code" href="$(doxygen_html_classDGD_1_1channelbuf)#s0">00076</a>       <span class="doxy_keyword">typedef</span> std::streambuf <a class="doxy_code" href="$(doxygen_html_classDGD_1_1channelbuf)#s0">Parent</a>;
<a name="l00077"></a><a class="doxy_code" href="$(doxygen_html_classDGD_1_1channelbuf)#s1">00077</a>       <span class="doxy_keyword">typedef</span> std::pair&lt;unsigned,unsigned&gt; <a class="doxy_code" href="$(doxygen_html_classDGD_1_1channelbuf)#s1">position_type</a>;
00078 <span class="doxy_preprocessor">#if defined(__STDC__) &amp;&amp; !defined(_STLPORT)</span>
00079 <span class="doxy_preprocessor"></span>      <span class="doxy_keyword">typedef</span> <span class="doxy_keywordtype">char</span> char_type;
00080       <span class="doxy_keyword">typedef</span> <span class="doxy_keywordtype">int</span>  int_type;
00081       <span class="doxy_keyword">class </span>traits_type {
00082          <span class="doxy_keyword">public</span>:
00083             <span class="doxy_keyword">static</span> int_type eof() { <span class="doxy_keywordflow">return</span> -1; }
00084             <span class="doxy_keyword">static</span> <span class="doxy_keywordtype">void</span> move( char_type* dst, 
00085                               <span class="doxy_keyword">const</span> char_type* src, 
00086                               <span class="doxy_keyword">const</span> int_type len ) {
00087                memmove( dst, src, len );
00088             }
00089             <span class="doxy_keyword">static</span> <span class="doxy_keyword">const</span> char_type* find( <span class="doxy_keyword">const</span> char_type* src, 
00090                                     <span class="doxy_keyword">const</span> int_type len,
00091                                     <span class="doxy_keyword">const</span> char_type ch ) {
00092                <span class="doxy_keywordflow">return</span> (<span class="doxy_keyword">const</span> char_type*)memchr( src, ch, len );
00093             }
00094       };
00095 <span class="doxy_preprocessor">#endif</span>
00096 <span class="doxy_preprocessor"></span>
00097    <span class="doxy_keyword">protected</span>:
<a name="l00098"></a><a class="doxy_code" href="$(doxygen_html_classDGD_1_1channelbuf)#t0">00098</a>       <span class="doxy_keyword">typedef</span> std::list&lt; std::ostream* &gt; <a class="doxy_code" href="$(doxygen_html_classDGD_1_1channelbuf)#t0">Assoc_list</a>;
00099 
00100    <span class="doxy_keyword">protected</span>:<span class="doxy_comment"></span>
00101 <span class="doxy_comment">      /*@{*/</span><span class="doxy_comment"></span>
00102 <span class="doxy_comment">      /**</span>
00103 <span class="doxy_comment">       * std::streambuf interface</span>
00104 <span class="doxy_comment">       */</span>
00105 
00106       <span class="doxy_keyword">virtual</span> <a class="doxy_code" href="$(doxygen_html_classDGD_1_1channelbuf)#s0">Parent</a>* <a class="doxy_code" href="$(doxygen_html_classDGD_1_1channelbuf)#z0_0">setbuf</a>(char_type*, std::streamsize);
00107 
00108       <span class="doxy_keyword">virtual</span> <span class="doxy_keywordtype">int</span> <a class="doxy_code" href="$(doxygen_html_classDGD_1_1channelbuf)#z0_1">sync</a>();
00109 
00110       <span class="doxy_keyword">virtual</span> int_type <a class="doxy_code" href="$(doxygen_html_classDGD_1_1channelbuf)#z0_2">overflow</a>(int_type = traits_type::eof());<span class="doxy_comment"></span>
00111 <span class="doxy_comment">      /*@}*/</span>
00112 
00113       <span class="doxy_keyword">virtual</span> <span class="doxy_keywordtype">void</span> <a class="doxy_code" href="$(doxygen_html_classDGD_1_1channelbuf)#b0">propagate</a>( <span class="doxy_keyword">const</span> char_type* begin, 
00114                               <span class="doxy_keyword">const</span> char_type* end );
00115       <span class="doxy_keyword">virtual</span> <span class="doxy_keywordtype">void</span> <a class="doxy_code" href="$(doxygen_html_classDGD_1_1channelbuf)#b0">propagate</a>( <span class="doxy_keyword">const</span> char_type ch,
00116                               std::streamsize size );
00117 
00118       <span class="doxy_keyword">virtual</span> <span class="doxy_keywordtype">void</span> <a class="doxy_code" href="$(doxygen_html_classDGD_1_1channelbuf)#b2">post_process</a>();
00119 
00120    <span class="doxy_keyword">public</span>:
<a name="l00121"></a><a class="doxy_code" href="$(doxygen_html_classDGD_1_1channelbuf)#s6">00121</a>       <span class="doxy_keyword">enum</span> <a class="doxy_code" href="$(doxygen_html_classDGD_1_1channelbuf)#s6">DefaultValues</a> { 
00122          <a class="doxy_code" href="$(doxygen_html_classDGD_1_1channelbuf)#s6s2">DefaultBufferSize</a> = 100,
00123          <a class="doxy_code" href="$(doxygen_html_classDGD_1_1channelbuf)#s6s3">DefaultMaxWidth</a>   = 79,
00124          <a class="doxy_code" href="$(doxygen_html_classDGD_1_1channelbuf)#s6s4">DefaultMinWidth</a>   = 20,
00125          <a class="doxy_code" href="$(doxygen_html_classDGD_1_1channelbuf)#s6s5">DefaultIndentStep</a> = 8 
00126       };
00127       
00128    <span class="doxy_keyword">public</span>:
00129       <a class="doxy_code" href="$(doxygen_html_classDGD_1_1channelbuf)#a0">channelbuf</a>();
00130       <a class="doxy_code" href="$(doxygen_html_classDGD_1_1channelbuf)#a1">~channelbuf</a>();
00131 
00132       <span class="doxy_keywordtype">void</span>         <a class="doxy_code" href="$(doxygen_html_classDGD_1_1channelbuf)#a2">assoc</a>( std::ostream* );
00133       <span class="doxy_keywordtype">bool</span>         <a class="doxy_code" href="$(doxygen_html_classDGD_1_1channelbuf)#a4">dassoc</a>( std::ostream* );
00134       <span class="doxy_keywordtype">void</span>         <a class="doxy_code" href="$(doxygen_html_classDGD_1_1channelbuf)#a4">dassoc</a>( );
00135 
00136       <span class="doxy_keywordtype">unsigned</span> <span class="doxy_keywordtype">int</span> <a class="doxy_code" href="$(doxygen_html_classDGD_1_1channelbuf)#a5">line</a>() <span class="doxy_keyword">const</span>;
00137       <span class="doxy_keywordtype">unsigned</span> <span class="doxy_keywordtype">int</span> <a class="doxy_code" href="$(doxygen_html_classDGD_1_1channelbuf)#a6">column</a>() <span class="doxy_keyword">const</span>;
00138 
00139       <span class="doxy_keywordtype">void</span>         <a class="doxy_code" href="$(doxygen_html_classDGD_1_1channelbuf)#a8">indent_step</a>( <span class="doxy_keywordtype">unsigned</span> <span class="doxy_keywordtype">int</span> <a class="doxy_code" href="$(doxygen_html_namespaceDGD)#a13">step</a> );
00140       <span class="doxy_keywordtype">unsigned</span> <span class="doxy_keywordtype">int</span> <a class="doxy_code" href="$(doxygen_html_classDGD_1_1channelbuf)#a8">indent_step</a>() <span class="doxy_keyword">const</span>;
00141       <span class="doxy_keywordtype">void</span>         <a class="doxy_code" href="$(doxygen_html_classDGD_1_1channelbuf)#a9">incr_indent</a>();
00142       <span class="doxy_keywordtype">void</span>         <a class="doxy_code" href="$(doxygen_html_classDGD_1_1channelbuf)#a10">decr_indent</a>();
00143       <span class="doxy_keywordtype">void</span>         <a class="doxy_code" href="$(doxygen_html_classDGD_1_1channelbuf)#a12">indent</a>(<span class="doxy_keyword">const</span> <span class="doxy_keywordtype">unsigned</span> <span class="doxy_keywordtype">int</span>);
00144       <span class="doxy_keywordtype">unsigned</span> <span class="doxy_keywordtype">int</span> <a class="doxy_code" href="$(doxygen_html_classDGD_1_1channelbuf)#a12">indent</a>() <span class="doxy_keyword">const</span>;
00145       
00146       <span class="doxy_keywordtype">void</span>         <a class="doxy_code" href="$(doxygen_html_classDGD_1_1channelbuf)#a14">min_width</a>( <span class="doxy_keywordtype">unsigned</span> <span class="doxy_keywordtype">int</span> width );
00147       <span class="doxy_keywordtype">unsigned</span> <span class="doxy_keywordtype">int</span> <a class="doxy_code" href="$(doxygen_html_classDGD_1_1channelbuf)#a14">min_width</a>() <span class="doxy_keyword">const</span>;
00148       <span class="doxy_keywordtype">void</span>         <a class="doxy_code" href="$(doxygen_html_classDGD_1_1channelbuf)#a16">max_width</a>( <span class="doxy_keywordtype">unsigned</span> <span class="doxy_keywordtype">int</span> width );
00149       <span class="doxy_keywordtype">unsigned</span> <span class="doxy_keywordtype">int</span> <a class="doxy_code" href="$(doxygen_html_classDGD_1_1channelbuf)#a16">max_width</a>() <span class="doxy_keyword">const</span>;
00150       
00151       <span class="doxy_keywordtype">void</span>         <a class="doxy_code" href="$(doxygen_html_classDGD_1_1channelbuf)#a18">wrap</a>( <span class="doxy_keywordtype">bool</span> allow );
00152       <span class="doxy_keywordtype">bool</span>         <a class="doxy_code" href="$(doxygen_html_classDGD_1_1channelbuf)#a18">wrap</a>() <span class="doxy_keyword">const</span>;
00153       <span class="doxy_keywordtype">void</span>         <a class="doxy_code" href="$(doxygen_html_classDGD_1_1channelbuf)#a20">word_wrap</a>( <span class="doxy_keywordtype">bool</span> allow );
00154       <span class="doxy_keywordtype">bool</span>         <a class="doxy_code" href="$(doxygen_html_classDGD_1_1channelbuf)#a20">word_wrap</a>() <span class="doxy_keyword">const</span>;
00155       
00156       <span class="doxy_keywordtype">void</span>         <a class="doxy_code" href="$(doxygen_html_classDGD_1_1channelbuf)#a22">space_chars</a>(<span class="doxy_keyword">const</span> <span class="doxy_keywordtype">char</span>* spc = <span class="doxy_stringliteral">&quot; \t&quot;</span>);
00157       std::string  <a class="doxy_code" href="$(doxygen_html_classDGD_1_1channelbuf)#a22">space_chars</a>() <span class="doxy_keyword">const</span>;
00158 
00159       <a class="doxy_code" href="$(doxygen_html_classDGD_1_1channelbuf)#s1">position_type</a> <a class="doxy_code" href="$(doxygen_html_classDGD_1_1channelbuf)#a23">position</a>() <span class="doxy_keyword">const</span>;
00160       <span class="doxy_keywordtype">unsigned</span> <span class="doxy_keywordtype">long</span> <a class="doxy_code" href="$(doxygen_html_classDGD_1_1channelbuf)#a24">bytes_written</a>() <span class="doxy_keyword">const</span>;
00161 
00162 <span class="doxy_preprocessor">#if defined(_CYGWIN) &amp;&amp; !defined(_STLPORT)</span>
00163 <span class="doxy_preprocessor"></span>      <a class="doxy_code" href="$(doxygen_html_classDGD_1_1channelbuf)#s0">Parent</a>* pubsetbuf(char_type* b, std::streamsize s) {
00164          <span class="doxy_keywordflow">return</span> <a class="doxy_code" href="$(doxygen_html_classDGD_1_1channelbuf)#z0_0">setbuf</a>(b, s);
00165       }
00166 <span class="doxy_preprocessor">#endif</span>
00167 <span class="doxy_preprocessor"></span>
00168    <span class="doxy_keyword">protected</span>:
00169       char_type* <a class="doxy_code" href="$(doxygen_html_classDGD_1_1channelbuf)#b3">find_one_of</a>( <span class="doxy_keyword">const</span> char_type* s, <span class="doxy_keyword">const</span> <span class="doxy_keywordtype">unsigned</span> <span class="doxy_keywordtype">int</span> n,
00170                               <span class="doxy_keyword">const</span> char_type* c_set ) <span class="doxy_keyword">const</span>;
00171       <span class="doxy_keywordtype">bool</span> <a class="doxy_code" href="$(doxygen_html_classDGD_1_1channelbuf)#b4">is_dos_eol</a>( <span class="doxy_keyword">const</span> char_type* p ) <span class="doxy_keyword">const</span>;
00172 
00173    <span class="doxy_keyword">private</span>:
<a name="l00174"></a><a class="doxy_code" href="$(doxygen_html_classDGD_1_1channelbuf)#o0">00174</a>       <a class="doxy_code" href="$(doxygen_html_classDGD_1_1channelbuf)#t0">Assoc_list</a> <a class="doxy_code" href="$(doxygen_html_classDGD_1_1channelbuf)#o0">m_assoc</a>;
<a name="l00175"></a><a class="doxy_code" href="$(doxygen_html_classDGD_1_1channelbuf)#o1">00175</a>       <span class="doxy_keywordtype">unsigned</span> <span class="doxy_keywordtype">int</span> <a class="doxy_code" href="$(doxygen_html_classDGD_1_1channelbuf)#o1">m_line</a>;
<a name="l00176"></a><a class="doxy_code" href="$(doxygen_html_classDGD_1_1channelbuf)#o2">00176</a>       <span class="doxy_keywordtype">unsigned</span> <span class="doxy_keywordtype">int</span> <a class="doxy_code" href="$(doxygen_html_classDGD_1_1channelbuf)#o2">m_column</a>;
<a name="l00177"></a><a class="doxy_code" href="$(doxygen_html_classDGD_1_1channelbuf)#o3">00177</a>       <span class="doxy_keywordtype">unsigned</span> <span class="doxy_keywordtype">int</span> <a class="doxy_code" href="$(doxygen_html_classDGD_1_1channelbuf)#o3">m_indent</a>;
<a name="l00178"></a><a class="doxy_code" href="$(doxygen_html_classDGD_1_1channelbuf)#o4">00178</a>       <span class="doxy_keywordtype">unsigned</span> <span class="doxy_keywordtype">int</span> <a class="doxy_code" href="$(doxygen_html_classDGD_1_1channelbuf)#o4">m_indent_step</a>;
<a name="l00179"></a><a class="doxy_code" href="$(doxygen_html_classDGD_1_1channelbuf)#o5">00179</a>       <span class="doxy_keywordtype">unsigned</span> <span class="doxy_keywordtype">int</span> <a class="doxy_code" href="$(doxygen_html_classDGD_1_1channelbuf)#o5">m_min_width</a>;
<a name="l00180"></a><a class="doxy_code" href="$(doxygen_html_classDGD_1_1channelbuf)#o6">00180</a>       <span class="doxy_keywordtype">unsigned</span> <span class="doxy_keywordtype">int</span> <a class="doxy_code" href="$(doxygen_html_classDGD_1_1channelbuf)#o6">m_max_width</a>;
<a name="l00181"></a><a class="doxy_code" href="$(doxygen_html_classDGD_1_1channelbuf)#o7">00181</a>       <span class="doxy_keywordtype">bool</span>         <a class="doxy_code" href="$(doxygen_html_classDGD_1_1channelbuf)#o7">m_wrap</a>;
<a name="l00182"></a><a class="doxy_code" href="$(doxygen_html_classDGD_1_1channelbuf)#o8">00182</a>       <span class="doxy_keywordtype">bool</span>         <a class="doxy_code" href="$(doxygen_html_classDGD_1_1channelbuf)#o8">m_word_wrap</a>;
<a name="l00183"></a><a class="doxy_code" href="$(doxygen_html_classDGD_1_1channelbuf)#o9">00183</a>       <span class="doxy_keyword">const</span> char_type* <a class="doxy_code" href="$(doxygen_html_classDGD_1_1channelbuf)#o9">m_word_pos</a>;
<a name="l00184"></a><a class="doxy_code" href="$(doxygen_html_classDGD_1_1channelbuf)#o10">00184</a>       std::string  <a class="doxy_code" href="$(doxygen_html_classDGD_1_1channelbuf)#o10">m_spaces</a>;
<a name="l00185"></a><a class="doxy_code" href="$(doxygen_html_classDGD_1_1channelbuf)#o11">00185</a>       <span class="doxy_keywordtype">unsigned</span> <span class="doxy_keywordtype">long</span> <a class="doxy_code" href="$(doxygen_html_classDGD_1_1channelbuf)#o11">m_bytes</a>;
00186 };
00187 
00188 };
00189 
00190 <span class="doxy_preprocessor">#endif </span><span class="doxy_comment">/* _dgChannelBuf_h_ */</span>
00191 
00192 <span class="doxy_comment">/* </span>
00193 <span class="doxy_comment"> * Local Variables:</span>
00194 <span class="doxy_comment"> * compile-command: &quot;make dgChannelBuf.obj&quot;</span>
00195 <span class="doxy_comment"> * End:</span>
00196 <span class="doxy_comment"> */</span>
00197 
00198 
00199 
</pre></div>
<hr>
<address style="align: right;"><small>Generated on Mon Dec 9 18:29:57 2002 for Depression Glass Debug Library by <a href="http://www.doxygen.org/index.html"> <img align="middle" alt="doxygen" border=0 height=53 src="$(doxygen)" width=110></a>1.2.17 </small></address>
</content>

<content name="doxygen_html_dgChannelBuf_8h" format="text/html">
<wmmeta name="title" value="dgChannelBuf.h File Reference" />
<h1>dgChannelBuf.h File Reference</h1>
Declaration of <a class="doxy_el" href="$(doxygen_html_classDGD_1_1channelbuf)">DGD::channelbuf</a>
. <a href="#_details">More...</a>
<p><code>#include &lt;iostream&gt;</code><br><code>#include &lt;list&gt;</code><br><code>#include &lt;string&gt;</code><br><code>#include &quot;<a class="doxy_el" href="$(doxygen_html_dgStream_8h-source)">dgStream.h</a>&quot;</code><br>
<p> Include dependency graph for dgChannelBuf.h:
<p><center><img alt="Include dependency graph" border=0 src="$(dgChannelBuf_8h__incl)" usemap="#dgChannelBuf.h_map"></center><map name="dgChannelBuf.h_map"><area alt="" coords="67,67,141,85" href="$(doxygen_html_dgStream_8h)" shape="rect"></map>
<p> This graph shows which files directly or indirectly include this file:
<p><center><img alt="Included by dependency graph" border=0 src="$(dgChannelBuf_8h__dep__incl)" usemap="#dgChannelBuf.hdep_map"></center><map name="dgChannelBuf.hdep_map"><area alt="" coords="252,200,332,218" href="$(doxygen_html_dgChannel_8h)" shape="rect"><area alt="" coords="251,66,323,85" href="$(doxygen_html_dgDebug_8h)" shape="rect"><area alt="" coords="257,133,372,152" href="$(doxygen_html_dgChannelManip_8h)" shape="rect"><area alt="" coords="111,133,183,152" href="$(doxygen_html_dgFunnel_8h)" shape="rect"><area alt="" coords="301,0,395,18" href="$(doxygen_html_dgChannel_8cpp)" shape="rect"><area alt="" coords="0,66,85,85" href="$(doxygen_html_dgFunnel_8cpp)" shape="rect"><area alt="" coords="109,66,213,85" href="$(doxygen_html_dgMultifileLog_8h)" shape="rect"><area alt="" coords="356,200,468,218" href="$(doxygen_html_dgChannelBuf_8cpp)" shape="rect"></map>
<p><a href="$(doxygen_html_dgChannelBuf_8h-source)">Go to the source code of this file.</a>
<h2>Namespaces</h2>
<ul><li>namespace <a class="doxy_el" href="$(doxygen_html_namespaceDGD)">DGD</a></ul>
<hr>
<a name="_details"></a>
<h2>Detailed Description</h2>
 Declaration of <a class="doxy_el" href="$(doxygen_html_classDGD_1_1channelbuf)">DGD::channelbuf</a>
. <p>
<p><hr><address style="align: right;"><small>Generated on Mon Dec 9 18:29:59 2002 for Depression Glass Debug Library by <a href="http://www.doxygen.org/index.html"> <img align="middle" alt="doxygen" border=0 height=53 src="$(doxygen)" width=110></a>1.2.17 </small></address>
</content>

<content name="doxygen_html_dgChannelManip_8h-source" format="text/html">
<wmmeta name="title" value="dgChannelManip.h Source File" />
<h1>dgChannelManip.h</h1>
<a href="$(doxygen_html_dgChannelManip_8h)">Go to the documentation of this file.</a>
<div class="doxy_fragment"><pre>00001 <span class="doxy_comment">// -*- c++ -*-</span>
00002 <span class="doxy_comment">//</span>
00003 <span class="doxy_comment">// $Id: dgd\\doc\\html\\Attic\\doxygen_html.wmk,v 1.9 2002/12/09 16:32:20 dimka Exp $</span>
00004 <span class="doxy_comment">//</span>
00005 <span class="doxy_comment">// This program is free software; you can redistribute it and/or modify</span>
00006 <span class="doxy_comment">// it under the terms of the GNU General Public License as published by</span>
00007 <span class="doxy_comment">// the Free Software Foundation; either version 2 of the License, or</span>
00008 <span class="doxy_comment">// (at your option) any later version.</span>
00009 <span class="doxy_comment">//</span>
00010 <span class="doxy_comment">// This program is distributed in the hope that it will be useful,</span>
00011 <span class="doxy_comment">// but WITHOUT ANY WARRANTY; without even the implied warranty of</span>
00012 <span class="doxy_comment">// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the</span>
00013 <span class="doxy_comment">// GNU General Public License for more details.</span>
00014 <span class="doxy_comment">//</span>
00015 <span class="doxy_comment">// You should have received a copy of the GNU General Public License</span>
00016 <span class="doxy_comment">// along with this program; if not, write to the Free Software</span>
00017 <span class="doxy_comment">// Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA</span>
00018 <span class="doxy_comment">//</span>
00019 <span class="doxy_comment">// This file is part of Depression Glass library.</span>
00020 <span class="doxy_comment">//</span>
00021 <span class="doxy_comment">// Copyright (c) 2002. Dimitry Kloper &lt;dimka@cs.technion.ac.il&gt; . </span>
00022 <span class="doxy_comment">//</span>
00023 <span class="doxy_comment">// dgChannelManip.h -- manipulators for the channel</span>
00024 <span class="doxy_comment">//</span>
00025 
00026 <span class="doxy_preprocessor">#ifndef _dgChannelManip_h_</span>
00027 <span class="doxy_preprocessor"></span><span class="doxy_preprocessor">#define _dgChannelManip_h_</span>
00028 <span class="doxy_preprocessor"></span><span class="doxy_comment"></span>
00029 <span class="doxy_comment">/**</span>
00030 <span class="doxy_comment"> * @file dgChannelManip.h</span>
00031 <span class="doxy_comment"> *</span>
00032 <span class="doxy_comment"> * Manipulators for DGD::channel. </span>
00033 <span class="doxy_comment"> */</span>
00034 
00035 <span class="doxy_preprocessor">#include &quot;<a class="doxy_code" href="$(doxygen_html_dgChannel_8h)">dgChannel.h</a>&quot;</span>
00036 
00037 <span class="doxy_keyword">namespace </span>DGD {
00038 <span class="doxy_comment"></span>
00039 <span class="doxy_comment">/**</span>
00040 <span class="doxy_comment"> * Channel manipulator with a single argument. This is a simple</span>
00041 <span class="doxy_comment"> * class which acts as binder for a channel method with a single</span>
00042 <span class="doxy_comment"> * argument. Once object of this class used by output operator the</span>
00043 <span class="doxy_comment"> * method is called.</span>
00044 <span class="doxy_comment"> * @see channel_manip_void</span>
00045 <span class="doxy_comment"> * @see channel_manip_nop</span>
00046 <span class="doxy_comment"> * @see channel_manip_bool</span>
00047 <span class="doxy_comment"> * @see channel_manip_uint</span>
00048 <span class="doxy_comment"> */</span>
00049 <span class="doxy_keyword">template</span> &lt;<span class="doxy_keyword">class</span> Arg_type&gt;
<a name="l00050"></a><a class="doxy_code" href="$(doxygen_html_classDGD_1_1channel__manip)">00050</a> <span class="doxy_keyword">class </span><a class="doxy_code" href="$(doxygen_html_classDGD_1_1channel__manip)">channel_manip</a> {
00051    <span class="doxy_keyword">public</span>:
<a name="l00052"></a><a class="doxy_code" href="$(doxygen_html_classDGD_1_1channel__manip)#s0">00052</a>       <span class="doxy_keyword">typedef</span> void (channel::*<a class="doxy_code" href="$(doxygen_html_classDGD_1_1channel__manip)#s0">method_type</a>)( Arg_type );
00053    <span class="doxy_keyword">public</span>:
<a name="l00054"></a><a class="doxy_code" href="$(doxygen_html_classDGD_1_1channel__manip)#m0">00054</a>       <a class="doxy_code" href="$(doxygen_html_classDGD_1_1channel__manip)#s0">method_type</a> <a class="doxy_code" href="$(doxygen_html_classDGD_1_1channel__manip)#m0">m_method</a>;
<a name="l00055"></a><a class="doxy_code" href="$(doxygen_html_classDGD_1_1channel__manip)#m1">00055</a>       Arg_type    <a class="doxy_code" href="$(doxygen_html_classDGD_1_1channel__manip)#m1">m_argument</a>;
00056       
<a name="l00057"></a><a class="doxy_code" href="$(doxygen_html_classDGD_1_1channel__manip)#a0">00057</a>       <span class="doxy_keyword">explicit</span> <a class="doxy_code" href="$(doxygen_html_classDGD_1_1channel__manip)#a0">channel_manip</a>( <a class="doxy_code" href="$(doxygen_html_classDGD_1_1channel__manip)#s0">method_type</a> method, Arg_type arg ):
00058          <a class="doxy_code" href="$(doxygen_html_classDGD_1_1channel__manip)#m0">m_method</a>(method), <a class="doxy_code" href="$(doxygen_html_classDGD_1_1channel__manip)#m1">m_argument</a>(arg) {}
00059 };
00060 <span class="doxy_comment"></span>
00061 <span class="doxy_comment">/**</span>
00062 <span class="doxy_comment"> * Channel manipulator without arguments. This is a specialization of</span>
00063 <span class="doxy_comment"> * DGD::channel_manip&lt;Arg_type&gt;, when Arg_type is void.</span>
00064 <span class="doxy_comment"> * @see channel_manip</span>
00065 <span class="doxy_comment"> * @see channel_manip_nop</span>
00066 <span class="doxy_comment"> * @see channel_manip_bool</span>
00067 <span class="doxy_comment"> * @see channel_manip_uint</span>
00068 <span class="doxy_comment"> */</span>
<a name="l00069"></a><a class="doxy_code" href="$(doxygen_html_classDGD_1_1channel__manip__void)">00069</a> <span class="doxy_keyword">class </span><a class="doxy_code" href="$(doxygen_html_classDGD_1_1channel__manip__void)">channel_manip_void</a> {
00070    <span class="doxy_keyword">public</span>:
<a name="l00071"></a><a class="doxy_code" href="$(doxygen_html_classDGD_1_1channel__manip__void)#s0">00071</a>       <span class="doxy_keyword">typedef</span> void (channel::*<a class="doxy_code" href="$(doxygen_html_classDGD_1_1channel__manip__void)#s0">method_type</a>)();
00072 
00073    <span class="doxy_keyword">public</span>:
<a name="l00074"></a><a class="doxy_code" href="$(doxygen_html_classDGD_1_1channel__manip__void)#m0">00074</a>       <a class="doxy_code" href="$(doxygen_html_classDGD_1_1channel__manip__void)#s0">method_type</a> <a class="doxy_code" href="$(doxygen_html_classDGD_1_1channel__manip__void)#m0">m_method</a>;
00075 
<a name="l00076"></a><a class="doxy_code" href="$(doxygen_html_classDGD_1_1channel__manip__void)#a0">00076</a>       <span class="doxy_keyword">explicit</span> <a class="doxy_code" href="$(doxygen_html_classDGD_1_1channel__manip__void)#a0">channel_manip_void</a>( <a class="doxy_code" href="$(doxygen_html_classDGD_1_1channel__manip__void)#s0">method_type</a> m ):
00077          <a class="doxy_code" href="$(doxygen_html_classDGD_1_1channel__manip__void)#m0">m_method</a>(m) {}
00078 };
00079 <span class="doxy_comment"></span>
00080 <span class="doxy_comment">/**</span>
00081 <span class="doxy_comment"> * Channel manipulator without arguments. This is a specialization of</span>
00082 <span class="doxy_comment"> * DGD::channel_manip&lt;Arg_type&gt;, when Arg_type is void and no channel</span>
00083 <span class="doxy_comment"> * method is called.</span>
00084 <span class="doxy_comment"> * @see channel_manip_void</span>
00085 <span class="doxy_comment"> * @see channel_manip_nop</span>
00086 <span class="doxy_comment"> * @see channel_manip_bool</span>
00087 <span class="doxy_comment"> * @see channel_manip_uint</span>
00088 <span class="doxy_comment"> */</span>
<a name="l00089"></a><a class="doxy_code" href="$(doxygen_html_classDGD_1_1channel__manip__nop)">00089</a> <span class="doxy_keyword">class </span><a class="doxy_code" href="$(doxygen_html_classDGD_1_1channel__manip__nop)">channel_manip_nop</a> {
00090    <span class="doxy_keyword">public</span>:
<a name="l00091"></a><a class="doxy_code" href="$(doxygen_html_classDGD_1_1channel__manip__nop)#a0">00091</a>       <a class="doxy_code" href="$(doxygen_html_classDGD_1_1channel__manip__nop)#a0">channel_manip_nop</a>() {}
00092 };
00093 <span class="doxy_comment"></span>
00094 <span class="doxy_comment">/**</span>
00095 <span class="doxy_comment"> * Alias for channel_manip&lt;bool&gt;</span>
00096 <span class="doxy_comment"> */</span>
<a name="l00097"></a><a class="doxy_code" href="$(doxygen_html_namespaceDGD)#a0">00097</a> <span class="doxy_keyword">typedef</span> <a class="doxy_code" href="$(doxygen_html_classDGD_1_1channel__manip)">channel_manip&lt;bool&gt;</a> <a class="doxy_code" href="$(doxygen_html_namespaceDGD)#a0">channel_manip_bool</a>;
00098 <span class="doxy_comment"></span>
00099 <span class="doxy_comment">/**</span>
00100 <span class="doxy_comment"> * Alias for channel_manip&lt;unsigned int&gt;</span>
00101 <span class="doxy_comment"> */</span>
<a name="l00102"></a><a class="doxy_code" href="$(doxygen_html_namespaceDGD)#a1">00102</a> <span class="doxy_keyword">typedef</span> <a class="doxy_code" href="$(doxygen_html_classDGD_1_1channel__manip)">channel_manip&lt;unsigned int&gt;</a>  <a class="doxy_code" href="$(doxygen_html_namespaceDGD)#a1">channel_manip_uint</a>;
00103 <span class="doxy_comment"></span>
00104 <span class="doxy_comment">/**</span>
00105 <span class="doxy_comment"> * Apply channel_manip_void on channel</span>
00106 <span class="doxy_comment"> */</span>
<a name="l00107"></a><a class="doxy_code" href="$(doxygen_html_namespaceDGD)#a9">00107</a> <span class="doxy_keyword">inline</span> std::ostream&amp; <a class="doxy_code" href="$(doxygen_html_namespaceDGD)#a9">operator &lt;&lt;</a>( std::ostream&amp; cnl, 
00108                                   <span class="doxy_keyword">const</span> <a class="doxy_code" href="$(doxygen_html_classDGD_1_1channel__manip__void)">channel_manip_void</a>&amp; manip ) {
00109    
00110    (static_cast&lt;channel&amp;&gt;(cnl).*(manip.<a class="doxy_code" href="$(doxygen_html_classDGD_1_1channel__manip__void)#m0">m_method</a>))();
00111    <span class="doxy_keywordflow">return</span> cnl;
00112 }
00113 <span class="doxy_comment"></span>
00114 <span class="doxy_comment">/**</span>
00115 <span class="doxy_comment"> * Apply channel_manip_bool on channel</span>
00116 <span class="doxy_comment"> */</span>
<a name="l00117"></a><a class="doxy_code" href="$(doxygen_html_namespaceDGD)#a10">00117</a> <span class="doxy_keyword">inline</span> std::ostream&amp; <a class="doxy_code" href="$(doxygen_html_namespaceDGD)#a9">operator &lt;&lt;</a>( std::ostream&amp; cnl, 
00118                                   <span class="doxy_keyword">const</span> channel_manip_bool&amp; manip ) {
00119    (static_cast&lt;channel&amp;&gt;(cnl).*(manip.m_method))( manip.m_argument );
00120    <span class="doxy_keywordflow">return</span> cnl;
00121 }
00122 <span class="doxy_comment"></span>
00123 <span class="doxy_comment">/**</span>
00124 <span class="doxy_comment"> * Apply channel_manip_unit on channel</span>
00125 <span class="doxy_comment"> */</span>
<a name="l00126"></a><a class="doxy_code" href="$(doxygen_html_namespaceDGD)#a11">00126</a> <span class="doxy_keyword">inline</span> std::ostream&amp; <a class="doxy_code" href="$(doxygen_html_namespaceDGD)#a9">operator &lt;&lt;</a>( std::ostream&amp; cnl, 
00127                                   <span class="doxy_keyword">const</span> channel_manip_uint&amp; manip ) {
00128    (static_cast&lt;channel&amp;&gt;(cnl).*(manip.m_method))( manip.m_argument );
00129    <span class="doxy_keywordflow">return</span> cnl;
00130 }
00131 <span class="doxy_comment"></span>
00132 <span class="doxy_comment">/**</span>
00133 <span class="doxy_comment"> * std::ostream to DGD::channel convertor. This output operator does</span>
00134 <span class="doxy_comment"> * not change the stream. It performs static casting from std::ostream</span>
00135 <span class="doxy_comment"> * and returns the corresponding DGD::channel. </span>
00136 <span class="doxy_comment"> * @see DGD::dgd</span>
00137 <span class="doxy_comment"> * @see DGD::channel_manip_nop</span>
00138 <span class="doxy_comment"> */</span>
<a name="l00139"></a><a class="doxy_code" href="$(doxygen_html_namespaceDGD)#a12">00139</a> <span class="doxy_keyword">inline</span> <a class="doxy_code" href="$(doxygen_html_classDGD_1_1channel)">channel</a>&amp; <a class="doxy_code" href="$(doxygen_html_namespaceDGD)#a9">operator &lt;&lt;</a>( std::ostream&amp; cnl, 
00140                              <span class="doxy_keyword">const</span> <a class="doxy_code" href="$(doxygen_html_classDGD_1_1channel__manip__nop)">channel_manip_nop</a>&amp; manip ) {
00141    
00142    <span class="doxy_keywordflow">return</span> static_cast&lt;channel&amp;&gt;(cnl);
00143 }
00144 <span class="doxy_comment"></span>
00145 <span class="doxy_comment">/**</span>
00146 <span class="doxy_comment"> * Indentation increment manipulator for DGD:channel</span>
00147 <span class="doxy_comment"> * @see DGD::channel::incr_indent()</span>
00148 <span class="doxy_comment"> */</span>
<a name="l00149"></a><a class="doxy_code" href="$(doxygen_html_namespaceDGD)#a2">00149</a> <span class="doxy_keyword">const</span> <a class="doxy_code" href="$(doxygen_html_classDGD_1_1channel__manip__void)">channel_manip_void</a> <a class="doxy_code" href="$(doxygen_html_namespaceDGD)#a2">incr</a> = <a class="doxy_code" href="$(doxygen_html_classDGD_1_1channel__manip__void)">channel_manip_void</a>( &amp;channel::incr_indent );
00150 <span class="doxy_comment"></span>
00151 <span class="doxy_comment">/**</span>
00152 <span class="doxy_comment"> * Indentation decrement manipulator for DGD:channel</span>
00153 <span class="doxy_comment"> * @see DGD::channel::decr_indent()</span>
00154 <span class="doxy_comment"> */</span>
<a name="l00155"></a><a class="doxy_code" href="$(doxygen_html_namespaceDGD)#a3">00155</a> <span class="doxy_keyword">const</span> channel_manip_void <a class="doxy_code" href="$(doxygen_html_namespaceDGD)#a3">decr</a> = channel_manip_void( &amp;channel::decr_indent );
00156 <span class="doxy_comment"></span>
00157 <span class="doxy_comment">/**</span>
00158 <span class="doxy_comment"> * Explicit conversion manipulator for DGD:channel. This manipulator</span>
00159 <span class="doxy_comment"> * has no effect on any channel. It is used to solve ambiguities</span>
00160 <span class="doxy_comment"> * between output operators for the same type. Here is brief scenario</span>
00161 <span class="doxy_comment"> * explaining what DGD::dgd is good for.</span>
00162 <span class="doxy_comment"> * Suppose you have an Int class. Suppose you already have output</span>
00163 <span class="doxy_comment"> * operator for this class: &lt;br&gt;</span>
00164 <span class="doxy_comment"> * @code</span>
00165 <span class="doxy_comment"> * std::ostream&amp; operator &lt;&lt;( std::ostream&amp; ostr, const Int&amp; val ) {</span>
00166 <span class="doxy_comment"> * ... </span>
00167 <span class="doxy_comment"> * }</span>
00168 <span class="doxy_comment"> * @endcode</span>
00169 <span class="doxy_comment"> * Now for some reason you want Int to appear in your debug logs in</span>
00170 <span class="doxy_comment"> * hexa. The simplest way to accomplish this is to rewrite the output</span>
00171 <span class="doxy_comment"> * operator and put the following in:</span>
00172 <span class="doxy_comment"> * @code </span>
00173 <span class="doxy_comment"> * ...</span>
00174 <span class="doxy_comment"> * if( dynamic_cast&lt;DGD::channel*&gt;(&amp;ostr) != NULL ) {</span>
00175 <span class="doxy_comment"> *   ... output debug stuff ...</span>
00176 <span class="doxy_comment"> * } else {</span>
00177 <span class="doxy_comment"> *   ... output usual stuff ...</span>
00178 <span class="doxy_comment"> * }</span>
00179 <span class="doxy_comment"> * ...</span>
00180 <span class="doxy_comment"> * @endcode</span>
00181 <span class="doxy_comment"> * This approach is good, but what if you do not want to change the</span>
00182 <span class="doxy_comment"> * output operator? The answer is simple - write output operator for</span>
00183 <span class="doxy_comment"> * DGD::channel:</span>
00184 <span class="doxy_comment"> * @code </span>
00185 <span class="doxy_comment"> * DGD::channel&amp; operator &lt;&lt; ( DGD::channel&amp; cnl, const Int&amp; val ) {</span>
00186 <span class="doxy_comment"> * ... </span>
00187 <span class="doxy_comment"> * }</span>
00188 <span class="doxy_comment"> * @endcode</span>
00189 <span class="doxy_comment"> * This approach has actually one weakness: The following code will</span>
00190 <span class="doxy_comment"> * actually call std::ostream's operator instead DGD::channel's one:</span>
00191 <span class="doxy_comment"> * @code</span>
00192 <span class="doxy_comment"> * Int a(0xFF);</span>
00193 <span class="doxy_comment"> * channel debug(...);</span>
00194 <span class="doxy_comment"> * debug &lt;&lt; &quot;a = &quot; &lt;&lt; a &lt;&lt; ednl; // This will print 256 instead of FF</span>
00195 <span class="doxy_comment"> * @endcode</span>
00196 <span class="doxy_comment"> * You are invited to guess why does this happen.</span>
00197 <span class="doxy_comment"> * Here comes DGD::dgd. </span>
00198 <span class="doxy_comment"> * @code</span>
00199 <span class="doxy_comment"> * debug &lt;&lt; &quot;a = &quot; &lt;&lt; DGD::dgd &lt;&lt; a &lt;&lt; endl; // works well!</span>
00200 <span class="doxy_comment"> * @endcode</span>
00201 <span class="doxy_comment"> * It does not affect the stream, but explicitly returns reference to</span>
00202 <span class="doxy_comment"> * DGD::channel, thus ensuring the right operator call.</span>
00203 <span class="doxy_comment"> */</span>
<a name="l00204"></a><a class="doxy_code" href="$(doxygen_html_namespaceDGD)#a4">00204</a> <span class="doxy_keyword">const</span> <a class="doxy_code" href="$(doxygen_html_classDGD_1_1channel__manip__nop)">channel_manip_nop</a>  <a class="doxy_code" href="$(doxygen_html_namespaceDGD)#a4">dgd</a>  = <a class="doxy_code" href="$(doxygen_html_classDGD_1_1channel__manip__nop)">channel_manip_nop</a>();
00205 <span class="doxy_comment"></span>
00206 <span class="doxy_comment">/**</span>
00207 <span class="doxy_comment"> * Change indentation step manipulator.</span>
00208 <span class="doxy_comment"> * @see DGD::channel::indent_step(unsigned int)</span>
00209 <span class="doxy_comment"> */</span>
<a name="l00210"></a><a class="doxy_code" href="$(doxygen_html_namespaceDGD)#a13">00210</a> <span class="doxy_keyword">inline</span> channel_manip_uint <a class="doxy_code" href="$(doxygen_html_namespaceDGD)#a13">step</a>( <span class="doxy_keywordtype">unsigned</span> <span class="doxy_keywordtype">int</span> s ) {
00211    <span class="doxy_keywordflow">return</span> <a class="doxy_code" href="$(doxygen_html_namespaceDGD)#a1">channel_manip_uint</a>( &amp;channel::indent_step, s );
00212 }
00213 <span class="doxy_comment"></span>
00214 <span class="doxy_comment">/**</span>
00215 <span class="doxy_comment"> * Change indentation level manipulator.</span>
00216 <span class="doxy_comment"> * @see DGD::channel::indent(unsigned int)</span>
00217 <span class="doxy_comment"> */</span>
<a name="l00218"></a><a class="doxy_code" href="$(doxygen_html_namespaceDGD)#a14">00218</a> <span class="doxy_keyword">inline</span> channel_manip_uint <a class="doxy_code" href="$(doxygen_html_namespaceDGD)#a14">indent</a>( <span class="doxy_keywordtype">unsigned</span> <span class="doxy_keywordtype">int</span> s ) {
00219    <span class="doxy_keywordflow">return</span> <a class="doxy_code" href="$(doxygen_html_namespaceDGD)#a1">channel_manip_uint</a>( &amp;channel::indent, s );
00220 }
00221 <span class="doxy_comment"></span>
00222 <span class="doxy_comment">/**</span>
00223 <span class="doxy_comment"> * Change minimum line width manipulator.</span>
00224 <span class="doxy_comment"> * @see DGD::channel::min_width(unsigned int)</span>
00225 <span class="doxy_comment"> */</span>
<a name="l00226"></a><a class="doxy_code" href="$(doxygen_html_namespaceDGD)#a15">00226</a> <span class="doxy_keyword">inline</span> channel_manip_uint <a class="doxy_code" href="$(doxygen_html_namespaceDGD)#a15">minwidth</a>( <span class="doxy_keywordtype">unsigned</span> <span class="doxy_keywordtype">int</span> s ) {
00227    <span class="doxy_keywordflow">return</span> <a class="doxy_code" href="$(doxygen_html_namespaceDGD)#a1">channel_manip_uint</a>( &amp;channel::min_width, s );
00228 }
00229 <span class="doxy_comment"></span>
00230 <span class="doxy_comment">/**</span>
00231 <span class="doxy_comment"> * Change maximum line width manipulator.</span>
00232 <span class="doxy_comment"> * @see DGD::channel::max_width(unsigned int)</span>
00233 <span class="doxy_comment"> */</span>
<a name="l00234"></a><a class="doxy_code" href="$(doxygen_html_namespaceDGD)#a16">00234</a> <span class="doxy_keyword">inline</span> channel_manip_uint <a class="doxy_code" href="$(doxygen_html_namespaceDGD)#a16">maxwidth</a>( <span class="doxy_keywordtype">unsigned</span> <span class="doxy_keywordtype">int</span> s ) {
00235    <span class="doxy_keywordflow">return</span> <a class="doxy_code" href="$(doxygen_html_namespaceDGD)#a1">channel_manip_uint</a>( &amp;channel::max_width, s );
00236 }
00237 <span class="doxy_comment"></span>
00238 <span class="doxy_comment">/**</span>
00239 <span class="doxy_comment"> * Enable/disable character wrapping manipulator.</span>
00240 <span class="doxy_comment"> * @see DGD::channel::wrap(bool)</span>
00241 <span class="doxy_comment"> */</span>
<a name="l00242"></a><a class="doxy_code" href="$(doxygen_html_namespaceDGD)#a17">00242</a> <span class="doxy_keyword">inline</span> channel_manip_bool <a class="doxy_code" href="$(doxygen_html_namespaceDGD)#a17">wrap</a>( <span class="doxy_keywordtype">bool</span> s ) {
00243    <span class="doxy_keywordflow">return</span> <a class="doxy_code" href="$(doxygen_html_namespaceDGD)#a0">channel_manip_bool</a>( &amp;channel::wrap, s );
00244 }
00245 <span class="doxy_comment"></span>
00246 <span class="doxy_comment">/**</span>
00247 <span class="doxy_comment"> * Enable/disable word wrapping manipulator.</span>
00248 <span class="doxy_comment"> * @see DGD::channel::word_wrap(bool)</span>
00249 <span class="doxy_comment"> */</span>
<a name="l00250"></a><a class="doxy_code" href="$(doxygen_html_namespaceDGD)#a18">00250</a> <span class="doxy_keyword">inline</span> channel_manip_bool <a class="doxy_code" href="$(doxygen_html_namespaceDGD)#a18">word_wrap</a>( <span class="doxy_keywordtype">bool</span> s ) {
00251    <span class="doxy_keywordflow">return</span> <a class="doxy_code" href="$(doxygen_html_namespaceDGD)#a0">channel_manip_bool</a>( &amp;channel::word_wrap, s );
00252 }
00253 
00254 }; <span class="doxy_comment">// end of namespace DGD</span>
00255 
00256 <span class="doxy_preprocessor">#endif </span><span class="doxy_comment">/* _dgChannelManip_h_ */</span>
00257 
00258 <span class="doxy_comment">/* </span>
00259 <span class="doxy_comment"> * Local Variables:</span>
00260 <span class="doxy_comment"> * compile-command: &quot;make dgChannelManip.obj&quot;</span>
00261 <span class="doxy_comment"> * End:</span>
00262 <span class="doxy_comment"> */</span>
00263 
00264 
</pre></div>
<hr>
<address style="align: right;"><small>Generated on Mon Dec 9 18:29:57 2002 for Depression Glass Debug Library by <a href="http://www.doxygen.org/index.html"> <img align="middle" alt="doxygen" border=0 height=53 src="$(doxygen)" width=110></a>1.2.17 </small></address>
</content>

<content name="doxygen_html_dgChannelManip_8h" format="text/html">
<wmmeta name="title" value="dgChannelManip.h File Reference" />
<h1>dgChannelManip.h File Reference</h1>
Manipulators for <a class="doxy_el" href="$(doxygen_html_classDGD_1_1channel)">DGD::channel</a>
. <a href="#_details">More...</a>
<p><code>#include &quot;<a class="doxy_el" href="$(doxygen_html_dgChannel_8h-source)">dgChannel.h</a>&quot;</code><br>
<p> Include dependency graph for dgChannelManip.h:
<p><center><img alt="Include dependency graph" border=0 src="$(dgChannelManip_8h__incl)" usemap="#dgChannelManip.h_map"></center><map name="dgChannelManip.h_map"><area alt="" coords="127,200,207,218" href="$(doxygen_html_dgChannel_8h)" shape="rect"><area alt="" coords="116,133,217,152" href="$(doxygen_html_dgChannelBuf_8h)" shape="rect"><area alt="" coords="101,66,176,85" href="$(doxygen_html_dgStream_8h)" shape="rect"></map>
<p> This graph shows which files directly or indirectly include this file:
<p><center><img alt="Included by dependency graph" border=0 src="$(dgChannelManip_8h__dep__incl)" usemap="#dgChannelManip.hdep_map"></center><map name="dgChannelManip.hdep_map"><area alt="" coords="148,67,220,85" href="$(doxygen_html_dgDebug_8h)" shape="rect"><area alt="" coords="139,133,229,152" href="$(doxygen_html_dgDebugStd_8h)" shape="rect"><area alt="" coords="81,0,175,19" href="$(doxygen_html_dgChannel_8cpp)" shape="rect"><area alt="" coords="199,0,281,19" href="$(doxygen_html_dgDebug_8cpp)" shape="rect"></map>
<p><a href="$(doxygen_html_dgChannelManip_8h-source)">Go to the source code of this file.</a>
<h2>Namespaces</h2>
<ul><li>namespace <a class="doxy_el" href="$(doxygen_html_namespaceDGD)">DGD</a></ul>
<hr>
<a name="_details"></a>
<h2>Detailed Description</h2>
 Manipulators for <a class="doxy_el" href="$(doxygen_html_classDGD_1_1channel)">DGD::channel</a>
. <p>
<p><hr><address style="align: right;"><small>Generated on Mon Dec 9 18:29:59 2002 for Depression Glass Debug Library by <a href="http://www.doxygen.org/index.html"> <img align="middle" alt="doxygen" border=0 height=53 src="$(doxygen)" width=110></a>1.2.17 </small></address>
</content>

<content name="doxygen_html_dgConfig_8h-source" format="text/html">
<wmmeta name="title" value="dgConfig.h Source File" />
<h1>dgConfig.h</h1>
<a href="$(doxygen_html_dgConfig_8h)">Go to the documentation of this file.</a>
<div class="doxy_fragment"><pre>00001 <span class="doxy_comment">// -*- C++ -*-</span>
00002 <span class="doxy_comment">// $Id: dgd\\doc\\html\\Attic\\doxygen_html.wmk,v 1.9 2002/12/09 16:32:20 dimka Exp $</span>
00003 <span class="doxy_comment">//</span>
00004 <span class="doxy_comment">// This program is free software; you can redistribute it and/or modify</span>
00005 <span class="doxy_comment">// it under the terms of the GNU General Public License as published by</span>
00006 <span class="doxy_comment">// the Free Software Foundation; either version 2 of the License, or</span>
00007 <span class="doxy_comment">// (at your option) any later version.</span>
00008 <span class="doxy_comment">//</span>
00009 <span class="doxy_comment">// This program is distributed in the hope that it will be useful,</span>
00010 <span class="doxy_comment">// but WITHOUT ANY WARRANTY; without even the implied warranty of</span>
00011 <span class="doxy_comment">// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the</span>
00012 <span class="doxy_comment">// GNU General Public License for more details.</span>
00013 <span class="doxy_comment">//</span>
00014 <span class="doxy_comment">// You should have received a copy of the GNU General Public License</span>
00015 <span class="doxy_comment">// along with this program; if not, write to the Free Software</span>
00016 <span class="doxy_comment">// Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA</span>
00017 <span class="doxy_comment">//</span>
00018 <span class="doxy_comment">// This file is part of Depression Glass library.</span>
00019 <span class="doxy_comment">//</span>
00020 <span class="doxy_comment">// Copyright (c) 2002. Dimitry Kloper &lt;dimka@cs.technion.ac.il&gt; . </span>
00021 <span class="doxy_comment">//</span>
00022 <span class="doxy_comment">// vmcConfig.h -- config stuff for DGD</span>
00023 <span class="doxy_comment">//</span>
00024 
00025 <span class="doxy_preprocessor">#ifndef _dgConfig_h_</span>
00026 <span class="doxy_preprocessor"></span><span class="doxy_preprocessor">#define _dgConfig_h_</span>
00027 <span class="doxy_preprocessor"></span><span class="doxy_comment"></span>
00028 <span class="doxy_comment">/**</span>
00029 <span class="doxy_comment"> * @file dgConfig.in</span>
00030 <span class="doxy_comment"> * Configuration file for DGD. It must be generated from dgConfig.h.in</span>
00031 <span class="doxy_comment"> * by GNU autoconf. If you want this file to be changed - go to</span>
00032 <span class="doxy_comment"> * dgConfig.h.in </span>
00033 <span class="doxy_comment"> */</span>
00034 
<a name="l00035"></a><a class="doxy_code" href="$(doxygen_html_dgConfig_8h)#a0">00035</a> <span class="doxy_preprocessor">#define DG_VERSION_STRING &quot;dgd-0.22 Mon Dec  9 18:14:50  2002&quot;</span>
00036 <span class="doxy_preprocessor"></span>
00037 <span class="doxy_preprocessor">#endif </span><span class="doxy_comment">/* _dgConfig_h_ */</span>
00038 
00039 <span class="doxy_comment">/* </span>
00040 <span class="doxy_comment"> * Local Variables:</span>
00041 <span class="doxy_comment"> * compile-command: &quot;make dgConfig.obj&quot;</span>
00042 <span class="doxy_comment"> * End:</span>
00043 <span class="doxy_comment"> */</span>
00044 
00045 
</pre></div>
<hr>
<address style="align: right;"><small>Generated on Mon Dec 9 18:29:57 2002 for Depression Glass Debug Library by <a href="http://www.doxygen.org/index.html"> <img align="middle" alt="doxygen" border=0 height=53 src="$(doxygen)" width=110></a>1.2.17 </small></address>
</content>

<content name="doxygen_html_dgConfig_8h" format="text/html">
<wmmeta name="title" value="dgConfig.h File Reference" />
<h1>dgConfig.h File Reference</h1>
<p> This graph shows which files directly or indirectly include this file:
<p><center><img alt="Included by dependency graph" border=0 src="$(dgConfig_8h__dep__incl)" usemap="#dgConfig.hdep_map"></center><map name="dgConfig.hdep_map"><area alt="" coords="105,67,177,85" href="$(doxygen_html_dgDebug_8h)" shape="rect"><area alt="" coords="96,133,187,152" href="$(doxygen_html_dgDebugStd_8h)" shape="rect"><area alt="" coords="39,0,132,19" href="$(doxygen_html_dgChannel_8cpp)" shape="rect"><area alt="" coords="156,0,239,19" href="$(doxygen_html_dgDebug_8cpp)" shape="rect"></map>
<p><a href="$(doxygen_html_dgConfig_8h-source)">Go to the source code of this file.</a>
<h2>Defines</h2>
<ul><li>#define <a class="doxy_el" href="$(doxygen_html_dgConfig_8h)#a0">DG_VERSION_STRING</a>&nbsp;&nbsp;&nbsp;&quot;dgd-0.22 Mon Dec 9 18:14:50 2002&quot; </ul>
<hr>
<h2>Define Documentation</h2>
<a doxytag="dgConfig.h::DG_VERSION_STRING" name="a0"></a>
<p><table border=0 cellpadding=2 cellspacing=0 width="100%"><tr><td class="doxy_md"><table border=0 cellpadding=0 cellspacing=0><tr><td class="doxy_md" nowrap valign="top"> #define DG_VERSION_STRING&nbsp;&nbsp;&nbsp;&quot;dgd-0.22 Mon Dec 9 18:14:50 2002&quot; </td></tr></table></td></tr></table><table border=0 cellpadding=0 cellspacing=5><tr><td> &nbsp; </td><td><p></td></tr></table><hr><address style="align: right;"><small>Generated on Mon Dec 9 18:29:59 2002 for Depression Glass Debug Library by <a href="http://www.doxygen.org/index.html"> <img align="middle" alt="doxygen" border=0 height=53 src="$(doxygen)" width=110></a>1.2.17 </small></address>
</content>

<content name="doxygen_html_dgDebug_8cpp" format="text/html">
<wmmeta name="title" value="dgDebug.cpp File Reference" />
<h1>dgDebug.cpp File Reference</h1>
Implementation of <a class="doxy_el" href="$(doxygen_html_classDGD_1_1Debug)">DGD::Debug</a>
. <a href="#_details">More...</a>
<p><code>#include &lt;regular_expression.h&gt;</code><br><code>#include &quot;<a class="doxy_el" href="$(doxygen_html_dgDebug_8h-source)">dgDebug.h</a>&quot;</code><br>
<p> Include dependency graph for dgDebug.cpp:
<p><center><img alt="Include dependency graph" border=0 src="$(dgDebug_8cpp__incl)" usemap="#dgDebug.cpp_map"></center><map name="dgDebug.cpp_map"><area alt="" coords="452,200,524,218" href="$(doxygen_html_dgDebug_8h)" shape="rect"><area alt="" coords="443,266,533,285" href="$(doxygen_html_dgDebugStd_8h)" shape="rect"><area alt="" coords="84,66,164,85" href="$(doxygen_html_dgChannel_8h)" shape="rect"><area alt="" coords="512,133,584,152" href="$(doxygen_html_dgConfig_8h)" shape="rect"><area alt="" coords="101,133,216,152" href="$(doxygen_html_dgChannelManip_8h)" shape="rect"><area alt="" coords="608,133,680,152" href="$(doxygen_html_dgFunnel_8h)" shape="rect"><area alt="" coords="704,133,805,152" href="$(doxygen_html_dgDebugExtra_8h)" shape="rect"></map>
<h2>Namespaces</h2>
<ul><li>namespace <a class="doxy_el" href="$(doxygen_html_namespaceDGD)">DGD</a></ul>
<hr>
<a name="_details"></a>
<h2>Detailed Description</h2>
 Implementation of <a class="doxy_el" href="$(doxygen_html_classDGD_1_1Debug)">DGD::Debug</a>
. <p>
<p><hr><address style="align: right;"><small>Generated on Mon Dec 9 18:30:00 2002 for Depression Glass Debug Library by <a href="http://www.doxygen.org/index.html"> <img align="middle" alt="doxygen" border=0 height=53 src="$(doxygen)" width=110></a>1.2.17 </small></address>
</content>

<content name="doxygen_html_dgDebug_8h-source" format="text/html">
<wmmeta name="title" value="dgDebug.h Source File" />
<h1>dgDebug.h</h1>
<a href="$(doxygen_html_dgDebug_8h)">Go to the documentation of this file.</a>
<div class="doxy_fragment"><pre>00001 <span class="doxy_comment">// -*- c++ -*-</span>
00002 <span class="doxy_comment">//</span>
00003 <span class="doxy_comment">// $Id: dgd\\doc\\html\\Attic\\doxygen_html.wmk,v 1.9 2002/12/09 16:32:20 dimka Exp $</span>
00004 <span class="doxy_comment">//</span>
00005 <span class="doxy_comment">// This program is free software; you can redistribute it and/or modify</span>
00006 <span class="doxy_comment">// it under the terms of the GNU General Public License as published by</span>
00007 <span class="doxy_comment">// the Free Software Foundation; either version 2 of the License, or</span>
00008 <span class="doxy_comment">// (at your option) any later version.</span>
00009 <span class="doxy_comment">//</span>
00010 <span class="doxy_comment">// This program is distributed in the hope that it will be useful,</span>
00011 <span class="doxy_comment">// but WITHOUT ANY WARRANTY; without even the implied warranty of</span>
00012 <span class="doxy_comment">// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the</span>
00013 <span class="doxy_comment">// GNU General Public License for more details.</span>
00014 <span class="doxy_comment">//</span>
00015 <span class="doxy_comment">// You should have received a copy of the GNU General Public License</span>
00016 <span class="doxy_comment">// along with this program; if not, write to the Free Software</span>
00017 <span class="doxy_comment">// Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA</span>
00018 <span class="doxy_comment">//</span>
00019 <span class="doxy_comment">// This file is part of Depression Glass library.</span>
00020 <span class="doxy_comment">//</span>
00021 <span class="doxy_comment">// Copyright (c) 2002. Dimitry Kloper &lt;dimka@cs.technion.ac.il&gt; . </span>
00022 <span class="doxy_comment">//</span>
00023 <span class="doxy_comment">// dgDebug.h -- channel factory</span>
00024 <span class="doxy_comment">//</span>
00025 
00026 <span class="doxy_preprocessor">#ifndef _dgDebug_h_</span>
00027 <span class="doxy_preprocessor"></span><span class="doxy_preprocessor">#define _dgDebug_h_</span>
00028 <span class="doxy_preprocessor"></span><span class="doxy_comment"></span>
00029 <span class="doxy_comment">/**</span>
00030 <span class="doxy_comment"> * @file dgDebug.h</span>
00031 <span class="doxy_comment"> * Declaration of DGD::Debug.</span>
00032 <span class="doxy_comment"> */</span>
00033 
00034 <span class="doxy_preprocessor">#include &lt;iostream&gt;</span>
00035 <span class="doxy_preprocessor">#include &lt;fstream&gt;</span>
00036 <span class="doxy_preprocessor">#include &lt;string&gt;</span>
00037 <span class="doxy_preprocessor">#include &lt;list&gt;</span>
00038 
00039 <span class="doxy_preprocessor">#include &lt;boost/smart_ptr.hpp&gt;</span>
00040 
00041 <span class="doxy_preprocessor">#include &quot;<a class="doxy_code" href="$(doxygen_html_dgConfig_8h)">dgConfig.h</a>&quot;</span>
00042 <span class="doxy_preprocessor">#include &quot;<a class="doxy_code" href="$(doxygen_html_dgChannel_8h)">dgChannel.h</a>&quot;</span>
00043 <span class="doxy_preprocessor">#include &quot;<a class="doxy_code" href="$(doxygen_html_dgFunnel_8h)">dgFunnel.h</a>&quot;</span>
00044 <span class="doxy_preprocessor">#include &quot;<a class="doxy_code" href="$(doxygen_html_dgChannelManip_8h)">dgChannelManip.h</a>&quot;</span>
00045 <span class="doxy_preprocessor">#include &quot;<a class="doxy_code" href="$(doxygen_html_dgDebugExtra_8h)">dgDebugExtra.h</a>&quot;</span>
00046 <span class="doxy_preprocessor">#include &quot;<a class="doxy_code" href="$(doxygen_html_dgDebugStd_8h)">dgDebugStd.h</a>&quot;</span>
00047 <span class="doxy_preprocessor">#include &quot;dgDebugOpt.h&quot;</span>
00048 <span class="doxy_comment"></span>
00049 <span class="doxy_comment">/**</span>
00050 <span class="doxy_comment"> * Depression Glass namespace</span>
00051 <span class="doxy_comment"> */</span>
00052 <span class="doxy_keyword">namespace </span>DGD {
00053 <span class="doxy_comment"></span>
00054 <span class="doxy_comment">/**</span>
00055 <span class="doxy_comment"> * DGD channel factory. </span>
00056 <span class="doxy_comment"> *</span>
00057 <span class="doxy_comment"> * The factory is used to create channels and streams those</span>
00058 <span class="doxy_comment"> * channels can be associated with. Currently only file streams are</span>
00059 <span class="doxy_comment"> * supported. Use Debug::create_file(const std::string&amp;) to create a</span>
00060 <span class="doxy_comment"> * file stream and Debug::create_channel(const std::string&amp;) to create</span>
00061 <span class="doxy_comment"> * a channel. The channels can be accessed by name using</span>
00062 <span class="doxy_comment"> * Debug::operator[].</span>
00063 <span class="doxy_comment"> *</span>
00064 <span class="doxy_comment"> * There must be a single object of this class during the</span>
00065 <span class="doxy_comment"> * application lifetime. The best way to allocate this object is by</span>
00066 <span class="doxy_comment"> * calling static method Debug::create_factory(int,char**). The best</span>
00067 <span class="doxy_comment"> * way to get a pointer to the object is by calling static method</span>
00068 <span class="doxy_comment"> * Debug::factory(). You can also use static variable</span>
00069 <span class="doxy_comment"> * Debug::debug_factory, but this is less preferred way.</span>
00070 <span class="doxy_comment"> *</span>
00071 <span class="doxy_comment"> * The factory is initialized with a channel called &quot;main&quot; it is not</span>
00072 <span class="doxy_comment"> * associated with any file by default. The main channel is opened by</span>
00073 <span class="doxy_comment"> * the factory.  The factory creates no default file, but it can be</span>
00074 <span class="doxy_comment"> * created by specifying &quot;--debug-main-file&quot; option, see below. If the</span>
00075 <span class="doxy_comment"> * option has been specified, the main file stream will be</span>
00076 <span class="doxy_comment"> * created. Use Debug::main_file() to access that stream.</span>
00077 <span class="doxy_comment"> *</span>
00078 <span class="doxy_comment"> * You can use notion of current channel to use the DGD::Debug object</span>
00079 <span class="doxy_comment"> * as a regular channel. By default main channel is a current channel,</span>
00080 <span class="doxy_comment"> * you can use Debug::current(const std::string&amp;) method to select the</span>
00081 <span class="doxy_comment"> * current channel, and Debug::current() method to explicitly query</span>
00082 <span class="doxy_comment"> * pointer to the current channel. Except that DGD::Debug can be</span>
00083 <span class="doxy_comment"> * casted to reference to channel, for example:</span>
00084 <span class="doxy_comment"> * @code</span>
00085 <span class="doxy_comment"> * DGD::channel&amp; chnl = (DGD::channel&amp;)(*Debug::factory());</span>
00086 <span class="doxy_comment"> * chnl &lt;&lt; &quot;Hello World&quot; &lt;&lt; std::endl;</span>
00087 <span class="doxy_comment"> * @endcode</span>
00088 <span class="doxy_comment"> *</span>
00089 <span class="doxy_comment"> * DGD::Debug can be controlled by command line options. Use</span>
00090 <span class="doxy_comment"> * Debug::process_options(int,char**) method to pass the options as</span>
00091 <span class="doxy_comment"> * received by main() function or use DGD::option_filter to create</span>
00092 <span class="doxy_comment"> * custom option sets. </span>
00093 <span class="doxy_comment"> */</span>
<a name="l00094"></a><a class="doxy_code" href="$(doxygen_html_classDGD_1_1Debug)">00094</a> <span class="doxy_keyword">class </span><a class="doxy_code" href="$(doxygen_html_classDGD_1_1Debug)">Debug</a> {
00095    <span class="doxy_keyword">public</span>:
<a name="l00096"></a><a class="doxy_code" href="$(doxygen_html_classDGD_1_1Debug)#s0">00096</a>       <span class="doxy_keyword">typedef</span> <a class="doxy_code" href="$(doxygen_html_classDGD_1_1channel)">channel</a>&amp; <a class="doxy_code" href="$(doxygen_html_classDGD_1_1Debug)#s0">channel_ref</a>;
<a name="l00097"></a><a class="doxy_code" href="$(doxygen_html_classDGD_1_1Debug)#s1">00097</a>       <span class="doxy_keyword">typedef</span> boost::shared_ptr&lt;Debug&gt; <a class="doxy_code" href="$(doxygen_html_classDGD_1_1Debug)#s1">debug_factory_ref</a>;
<a name="l00098"></a><a class="doxy_code" href="$(doxygen_html_classDGD_1_1Debug)#s2">00098</a>       <span class="doxy_keyword">typedef</span> boost::shared_ptr&lt;channel&gt; <a class="doxy_code" href="$(doxygen_html_classDGD_1_1Debug)#s2">channel_ptr</a>;
00099 
00100    <span class="doxy_keyword">public</span>:
00101       <a class="doxy_code" href="$(doxygen_html_classDGD_1_1Debug)#a0">Debug</a>();
00102       <a class="doxy_code" href="$(doxygen_html_classDGD_1_1Debug)#a1">~Debug</a>();
00103 
00104       <span class="doxy_keywordtype">void</span> <a class="doxy_code" href="$(doxygen_html_classDGD_1_1Debug)#a2">process_options</a>( <span class="doxy_keywordtype">int</span> argc, <span class="doxy_keywordtype">char</span>** argv );
00105       <a class="doxy_code" href="$(doxygen_html_namespaceDGD)#a5">stream</a> <a class="doxy_code" href="$(doxygen_html_classDGD_1_1Debug)#a3">create_file</a> ( <span class="doxy_keyword">const</span> std::string&amp; name );
00106       <a class="doxy_code" href="$(doxygen_html_namespaceDGD)#a5">stream</a> <a class="doxy_code" href="$(doxygen_html_classDGD_1_1Debug)#a4">append_file</a> ( <span class="doxy_keyword">const</span> <a class="doxy_code" href="$(doxygen_html_namespaceDGD)#a5">stream</a>&amp; file );
00107       <a class="doxy_code" href="$(doxygen_html_namespaceDGD)#a5">stream</a> <a class="doxy_code" href="$(doxygen_html_classDGD_1_1Debug)#a5">main_file</a>() <span class="doxy_keyword">const</span>;
00108       <a class="doxy_code" href="$(doxygen_html_classDGD_1_1channel)">channel</a>&amp; <a class="doxy_code" href="$(doxygen_html_classDGD_1_1Debug)#a6">create_channel</a>( <span class="doxy_keyword">const</span> std::string&amp; name );
00109       <a class="doxy_code" href="$(doxygen_html_classDGD_1_1Debug)#a7">operator channel_ref </a>() <span class="doxy_keyword">const</span>;
00110       <a class="doxy_code" href="$(doxygen_html_classDGD_1_1Debug)#s2">channel_ptr</a> <a class="doxy_code" href="$(doxygen_html_classDGD_1_1Debug)#a8">operator[] </a>( <span class="doxy_keyword">const</span> std::string&amp; name );
00111       <span class="doxy_keywordtype">void</span> <a class="doxy_code" href="$(doxygen_html_classDGD_1_1Debug)#a10">current</a>( <span class="doxy_keyword">const</span> std::string&amp; name );
00112       <a class="doxy_code" href="$(doxygen_html_classDGD_1_1Debug)#s2">channel_ptr</a> <a class="doxy_code" href="$(doxygen_html_classDGD_1_1Debug)#a10">current</a>() <span class="doxy_keyword">const</span>;
00113 
00114    <span class="doxy_keyword">public</span>:
00115       <span class="doxy_keyword">static</span> <a class="doxy_code" href="$(doxygen_html_classDGD_1_1Debug)">Debug</a>* <a class="doxy_code" href="$(doxygen_html_classDGD_1_1Debug)#p0">debug_factory</a>;
00116       <span class="doxy_keyword">static</span> <a class="doxy_code" href="$(doxygen_html_classDGD_1_1Debug)">Debug</a>* <a class="doxy_code" href="$(doxygen_html_classDGD_1_1Debug)#d0">factory</a>();
00117       <span class="doxy_keyword">static</span> <a class="doxy_code" href="$(doxygen_html_classDGD_1_1Debug)#s1">debug_factory_ref</a> <a class="doxy_code" href="$(doxygen_html_classDGD_1_1Debug)#d1">create_factory</a>( <span class="doxy_keywordtype">int</span> argc, <span class="doxy_keywordtype">char</span>** argv );
00118 
00119    <span class="doxy_keyword">protected</span>:
<a name="l00120"></a><a class="doxy_code" href="$(doxygen_html_classDGD_1_1Debug)#t0">00120</a>       <span class="doxy_keyword">typedef</span> std::list&lt; channel_ptr &gt; <a class="doxy_code" href="$(doxygen_html_classDGD_1_1Debug)#t0">Channel_list</a>;
<a name="l00121"></a><a class="doxy_code" href="$(doxygen_html_classDGD_1_1Debug)#t1">00121</a>       <span class="doxy_keyword">typedef</span> Channel_list::iterator <a class="doxy_code" href="$(doxygen_html_classDGD_1_1Debug)#t1">Channel_iterator</a>;
<a name="l00122"></a><a class="doxy_code" href="$(doxygen_html_classDGD_1_1Debug)#t2">00122</a>       <span class="doxy_keyword">typedef</span> std::list&lt; stream &gt; <a class="doxy_code" href="$(doxygen_html_classDGD_1_1Debug)#t2">File_list</a>;
00123 
00124    <span class="doxy_keyword">protected</span>:
00125       <span class="doxy_keywordtype">void</span> <a class="doxy_code" href="$(doxygen_html_classDGD_1_1Debug)#b0">apply_options</a>( <a class="doxy_code" href="$(doxygen_html_classDGD_1_1Debug)#s2">channel_ptr</a>&amp; chnl );
00126 
00127    <span class="doxy_keyword">private</span>:
<a name="l00128"></a><a class="doxy_code" href="$(doxygen_html_classDGD_1_1Debug)#o0">00128</a>       <a class="doxy_code" href="$(doxygen_html_classDGD_1_1Debug)#t0">Channel_list</a>     <a class="doxy_code" href="$(doxygen_html_classDGD_1_1Debug)#o0">m_channels</a>;
<a name="l00129"></a><a class="doxy_code" href="$(doxygen_html_classDGD_1_1Debug)#o1">00129</a>       <a class="doxy_code" href="$(doxygen_html_classDGD_1_1Debug)#t1">Channel_iterator</a> <a class="doxy_code" href="$(doxygen_html_classDGD_1_1Debug)#o1">m_current_channel</a>;
<a name="l00130"></a><a class="doxy_code" href="$(doxygen_html_classDGD_1_1Debug)#o2">00130</a>       <a class="doxy_code" href="$(doxygen_html_classDGD_1_1Debug)#t2">File_list</a>        <a class="doxy_code" href="$(doxygen_html_classDGD_1_1Debug)#o2">m_files</a>;
<a name="l00131"></a><a class="doxy_code" href="$(doxygen_html_classDGD_1_1Debug)#o3">00131</a>       <a class="doxy_code" href="$(doxygen_html_namespaceDGD)#a5">stream</a>           <a class="doxy_code" href="$(doxygen_html_classDGD_1_1Debug)#o3">m_main_file</a>;
00132 
<a name="l00133"></a><a class="doxy_code" href="$(doxygen_html_classDGD_1_1Debug)#o4">00133</a>       dgd_gengetopt_args_info <a class="doxy_code" href="$(doxygen_html_classDGD_1_1Debug)#o4">m_args_info</a>;    
00134 };
00135 
00136 }; <span class="doxy_comment">// end of namespace DGD</span>
00137 
00138 <span class="doxy_preprocessor">#endif </span><span class="doxy_comment">/* _dgDebug_h_ */</span>
00139 
00140 <span class="doxy_comment">/* </span>
00141 <span class="doxy_comment"> * Local Variables:</span>
00142 <span class="doxy_comment"> * compile-command: &quot;make dgDebug.obj&quot;</span>
00143 <span class="doxy_comment"> * End:</span>
00144 <span class="doxy_comment"> */</span>
00145 
00146 
</pre></div>
<hr>
<address style="align: right;"><small>Generated on Mon Dec 9 18:29:57 2002 for Depression Glass Debug Library by <a href="http://www.doxygen.org/index.html"> <img align="middle" alt="doxygen" border=0 height=53 src="$(doxygen)" width=110></a>1.2.17 </small></address>
</content>

<content name="doxygen_html_dgDebug_8h" format="text/html">
<wmmeta name="title" value="dgDebug.h File Reference" />
<h1>dgDebug.h File Reference</h1>
Declaration of <a class="doxy_el" href="$(doxygen_html_classDGD_1_1Debug)">DGD::Debug</a>
. <a href="#_details">More...</a>
<p><code>#include &lt;iostream&gt;</code><br><code>#include &lt;fstream&gt;</code><br><code>#include &lt;string&gt;</code><br><code>#include &lt;list&gt;</code><br><code>#include &lt;boost/smart_ptr.hpp&gt;</code><br><code>#include &quot;<a class="doxy_el" href="$(doxygen_html_dgConfig_8h-source)">dgConfig.h</a>&quot;</code><br><code>#include &quot;<a class="doxy_el" href="$(doxygen_html_dgChannel_8h-source)">dgChannel.h</a>&quot;</code><br><code>#include &quot;<a class="doxy_el" href="$(doxygen_html_dgFunnel_8h-source)">dgFunnel.h</a>&quot;</code><br><code>#include &quot;<a class="doxy_el" href="$(doxygen_html_dgChannelManip_8h-source)">dgChannelManip.h</a>&quot;</code><br><code>#include &quot;<a class="doxy_el" href="$(doxygen_html_dgDebugExtra_8h-source)">dgDebugExtra.h</a>&quot;</code><br><code>#include &quot;<a class="doxy_el" href="$(doxygen_html_dgDebugStd_8h-source)">dgDebugStd.h</a>&quot;</code><br><code>#include &quot;dgDebugOpt.h&quot;</code><br>
<p> Include dependency graph for dgDebug.h:
<p><center><img alt="Include dependency graph" border=0 src="$(dgDebug_8h__incl)" usemap="#dgDebug.h_map"></center><map name="dgDebug.h_map"><area alt="" coords="525,214,616,233" href="$(doxygen_html_dgDebugStd_8h)" shape="rect"><area alt="" coords="108,121,188,140" href="$(doxygen_html_dgChannel_8h)" shape="rect"><area alt="" coords="261,322,333,341" href="$(doxygen_html_dgConfig_8h)" shape="rect"><area alt="" coords="240,144,355,162" href="$(doxygen_html_dgChannelManip_8h)" shape="rect"><area alt="" coords="261,365,333,384" href="$(doxygen_html_dgFunnel_8h)" shape="rect"><area alt="" coords="247,408,348,426" href="$(doxygen_html_dgDebugExtra_8h)" shape="rect"></map>
<p> This graph shows which files directly or indirectly include this file:
<p><center><img alt="Included by dependency graph" border=0 src="$(dgDebug_8h__dep__incl)" usemap="#dgDebug.hdep_map"></center><map name="dgDebug.hdep_map"><area alt="" coords="57,133,148,152" href="$(doxygen_html_dgDebugStd_8h)" shape="rect"><area alt="" coords="0,0,93,19" href="$(doxygen_html_dgChannel_8cpp)" shape="rect"><area alt="" coords="117,0,200,19" href="$(doxygen_html_dgDebug_8cpp)" shape="rect"></map>
<p><a href="$(doxygen_html_dgDebug_8h-source)">Go to the source code of this file.</a>
<h2>Namespaces</h2>
<ul><li>namespace <a class="doxy_el" href="$(doxygen_html_namespaceDGD)">DGD</a></ul>
<hr>
<a name="_details"></a>
<h2>Detailed Description</h2>
 Declaration of <a class="doxy_el" href="$(doxygen_html_classDGD_1_1Debug)">DGD::Debug</a>
. <p>
<p><hr><address style="align: right;"><small>Generated on Mon Dec 9 18:30:00 2002 for Depression Glass Debug Library by <a href="http://www.doxygen.org/index.html"> <img align="middle" alt="doxygen" border=0 height=53 src="$(doxygen)" width=110></a>1.2.17 </small></address>
</content>

<content name="doxygen_html_dgDebugExtra_8h-source" format="text/html">
<wmmeta name="title" value="dgDebugExtra.h Source File" />
<h1>dgDebugExtra.h</h1>
<a href="$(doxygen_html_dgDebugExtra_8h)">Go to the documentation of this file.</a>
<div class="doxy_fragment"><pre>00001 <span class="doxy_comment">// -*- c++ -*-</span>
00002 <span class="doxy_comment">//</span>
00003 <span class="doxy_comment">// $Id: dgd\\doc\\html\\Attic\\doxygen_html.wmk,v 1.9 2002/12/09 16:32:20 dimka Exp $</span>
00004 <span class="doxy_comment">//</span>
00005 <span class="doxy_comment">// This program is free software; you can redistribute it and/or modify</span>
00006 <span class="doxy_comment">// it under the terms of the GNU General Public License as published by</span>
00007 <span class="doxy_comment">// the Free Software Foundation; either version 2 of the License, or</span>
00008 <span class="doxy_comment">// (at your option) any later version.</span>
00009 <span class="doxy_comment">//</span>
00010 <span class="doxy_comment">// This program is distributed in the hope that it will be useful,</span>
00011 <span class="doxy_comment">// but WITHOUT ANY WARRANTY; without even the implied warranty of</span>
00012 <span class="doxy_comment">// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the</span>
00013 <span class="doxy_comment">// GNU General Public License for more details.</span>
00014 <span class="doxy_comment">//</span>
00015 <span class="doxy_comment">// You should have received a copy of the GNU General Public License</span>
00016 <span class="doxy_comment">// along with this program; if not, write to the Free Software</span>
00017 <span class="doxy_comment">// Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA</span>
00018 <span class="doxy_comment">//</span>
00019 <span class="doxy_comment">// This file is part of Depression Glass library.</span>
00020 <span class="doxy_comment">//</span>
00021 <span class="doxy_comment">// Copyright (c) 2002. Dimitry Kloper &lt;dimka@cs.technion.ac.il&gt; . </span>
00022 <span class="doxy_comment">//</span>
00023 <span class="doxy_comment">// dgDebugExtra.h -- couple of useful macro definitions</span>
00024 <span class="doxy_comment">//</span>
00025 
00026 <span class="doxy_preprocessor">#ifndef _dgDebugExtra_h_</span>
00027 <span class="doxy_preprocessor"></span><span class="doxy_preprocessor">#define _dgDebugExtra_h_</span>
00028 <span class="doxy_preprocessor"></span><span class="doxy_comment"></span>
00029 <span class="doxy_comment">/**</span>
00030 <span class="doxy_comment"> * @file dgDebugExtra.h</span>
00031 <span class="doxy_comment"> * Set of useful macros for use with DGD.</span>
00032 <span class="doxy_comment"> */</span>
00033 <span class="doxy_comment"></span>
00034 <span class="doxy_comment">/**</span>
00035 <span class="doxy_comment"> * Expands to constant string in format &quot;filename(line)&quot;</span>
00036 <span class="doxy_comment"> */</span>
<a name="l00037"></a><a class="doxy_code" href="$(doxygen_html_dgDebugExtra_8h)#a0">00037</a> <span class="doxy_preprocessor">#define dgd_file (char*)__FILE__ &lt;&lt; &quot;(&quot; &lt;&lt; __LINE__ &lt;&lt;&quot;) &quot;</span>
00038 <span class="doxy_preprocessor"></span>
00039 <span class="doxy_comment"></span>
00040 <span class="doxy_comment">/** </span>
00041 <span class="doxy_comment"> * Expands into expression in form &quot;s = &quot; &lt;&lt; s. For example dgd_expand(a+b)</span>
00042 <span class="doxy_comment"> * will expand into &quot;a+b = &quot; &lt;&lt; (a+b)</span>
00043 <span class="doxy_comment"> *</span>
00044 <span class="doxy_comment"> * @param s any expression</span>
00045 <span class="doxy_comment"> */</span>
<a name="l00046"></a><a class="doxy_code" href="$(doxygen_html_dgDebugExtra_8h)#a1">00046</a> <span class="doxy_preprocessor">#define dgd_expand(s) #s &quot; = &quot; &lt;&lt; dgd &lt;&lt; (s)</span>
00047 <span class="doxy_preprocessor"></span><span class="doxy_comment"></span>
00048 <span class="doxy_comment">/**</span>
00049 <span class="doxy_comment"> * Expands into channel pointer given channel name.</span>
00050 <span class="doxy_comment"> * @param name channel name. Note that there is no need in quoting the</span>
00051 <span class="doxy_comment"> * name each time the macro is used.</span>
00052 <span class="doxy_comment"> */</span>
<a name="l00053"></a><a class="doxy_code" href="$(doxygen_html_dgDebugExtra_8h)#a2">00053</a> <span class="doxy_preprocessor">#define dgd_channel(name) ((DGD::Debug::debug_factory-&gt;operator[](#name)))</span>
00054 <span class="doxy_preprocessor"></span><span class="doxy_comment"></span>
00055 <span class="doxy_comment">/**</span>
00056 <span class="doxy_comment"> * @def dgd_trace(name, arg)</span>
00057 <span class="doxy_comment"> * Trace expand. Expands into expression equivalent to: </span>
00058 <span class="doxy_comment"> * @code </span>
00059 <span class="doxy_comment"> * DGD::channel&amp; cnl = *DGD::Debug::debug_factory-&gt;operator[]( &quot;name&quot; );</span>
00060 <span class="doxy_comment"> * cnl &lt;&lt; arg; </span>
00061 <span class="doxy_comment"> * @endcode</span>
00062 <span class="doxy_comment"> * Existence of the Debug factory and channel is checked before any</span>
00063 <span class="doxy_comment"> * output operation, as well as closed channel output.</span>
00064 <span class="doxy_comment"> */</span>
00065 <span class="doxy_preprocessor">#if defined(_TRACE)</span>
00066 <span class="doxy_preprocessor"></span><span class="doxy_preprocessor">#define dgd_trace(name, arg) \</span>
00067 <span class="doxy_preprocessor">if(DGD::Debug::debug_factory) { \</span>
00068 <span class="doxy_preprocessor">  DGD::Debug::channel_ptr __cnl = dgd_channel(name); \</span>
00069 <span class="doxy_preprocessor">  (void)( __cnl.get() &amp;&amp; __cnl-&gt;is_open() &amp;&amp; ((*__cnl) &lt;&lt; arg ) ); \</span>
00070 <span class="doxy_preprocessor">}</span>
00071 <span class="doxy_preprocessor"></span><span class="doxy_preprocessor">#else </span>
<a name="l00072"></a><a class="doxy_code" href="$(doxygen_html_dgDebugExtra_8h)#a3">00072</a> <span class="doxy_preprocessor"></span><span class="doxy_preprocessor">#define dgd_trace(name, arg)</span>
00073 <span class="doxy_preprocessor"></span><span class="doxy_preprocessor">#endif </span>
00074 <span class="doxy_preprocessor"></span><span class="doxy_comment"></span>
00075 <span class="doxy_comment">/**</span>
00076 <span class="doxy_comment"> * Start global indented output scope. This macro in conjunction with</span>
00077 <span class="doxy_comment"> * dgd_end_scope, dgd_echo, dgd_scope and dgd_end_scope_text is used</span>
00078 <span class="doxy_comment"> * to simplify use of DGD channels. Here indented scope is a indented</span>
00079 <span class="doxy_comment"> * &quot;{...}&quot; block. </span>
00080 <span class="doxy_comment"> * This macro creates local channel</span>
00081 <span class="doxy_comment"> * pointer and starts the indented scope. The indented scope must be</span>
00082 <span class="doxy_comment"> * ended with dgd_end_scope or dgd_end_scope_text. The global scope</span>
00083 <span class="doxy_comment"> * can contain any number of local scopes opened by dgd_scope.</span>
00084 <span class="doxy_comment"> */</span>
00085 <span class="doxy_preprocessor">#if defined(_TRACE)</span>
00086 <span class="doxy_preprocessor"></span><span class="doxy_preprocessor">#define dgd_start_scope(c, text) \</span>
00087 <span class="doxy_preprocessor">DGD::Debug::channel_ptr __cnl(NULL); \</span>
00088 <span class="doxy_preprocessor">if(DGD::Debug::debug_factory) __cnl = dgd_channel(c); \</span>
00089 <span class="doxy_preprocessor">(void)( __cnl.get() &amp;&amp; __cnl-&gt;is_open() &amp;&amp; ((*__cnl) &lt;&lt; text &lt;&lt; &quot; {&quot; &lt;&lt; std::endl &lt;&lt; DGD::incr) )</span>
00090 <span class="doxy_preprocessor"></span><span class="doxy_preprocessor">#else</span>
<a name="l00091"></a><a class="doxy_code" href="$(doxygen_html_dgDebugExtra_8h)#a4">00091</a> <span class="doxy_preprocessor"></span><span class="doxy_preprocessor">#define dgd_start_scope(c, text) </span>
00092 <span class="doxy_preprocessor"></span><span class="doxy_preprocessor">#endif</span>
00093 <span class="doxy_preprocessor"></span><span class="doxy_comment"></span>
00094 <span class="doxy_comment">/**</span>
00095 <span class="doxy_comment"> * Start local indented output scope. This macro starts local indented</span>
00096 <span class="doxy_comment"> * scope. </span>
00097 <span class="doxy_comment"> * @see dgd_start_scope</span>
00098 <span class="doxy_comment"> * @see dgd_end_scope</span>
00099 <span class="doxy_comment"> */</span>
00100 <span class="doxy_preprocessor">#if defined(_TRACE)</span>
00101 <span class="doxy_preprocessor"></span><span class="doxy_preprocessor">#define dgd_scope(c, text) \</span>
00102 <span class="doxy_preprocessor">(void) (__cnl.get() &amp;&amp; __cnl-&gt;is_open() &amp;&amp; ((*__cnl) &lt;&lt; text &lt;&lt;  &quot; {&quot; &lt;&lt; std::endl &lt;&lt; DGD::incr) )</span>
00103 <span class="doxy_preprocessor"></span><span class="doxy_preprocessor">#else</span>
<a name="l00104"></a><a class="doxy_code" href="$(doxygen_html_dgDebugExtra_8h)#a5">00104</a> <span class="doxy_preprocessor"></span><span class="doxy_preprocessor">#define dgd_scope(c, text)</span>
00105 <span class="doxy_preprocessor"></span><span class="doxy_preprocessor">#endif</span>
00106 <span class="doxy_preprocessor"></span><span class="doxy_comment"></span>
00107 <span class="doxy_comment">/**</span>
00108 <span class="doxy_comment"> * Echo expand. This macro is similar to dgd_trace, but it can be</span>
00109 <span class="doxy_comment"> * called inside indented scope only.</span>
00110 <span class="doxy_comment"> * @see dgd_start_scope</span>
00111 <span class="doxy_comment"> * @see dgd_scope</span>
00112 <span class="doxy_comment"> * @see dgd_end_scope</span>
00113 <span class="doxy_comment"> */</span>
00114 <span class="doxy_preprocessor">#if defined(_TRACE) </span>
00115 <span class="doxy_preprocessor"></span><span class="doxy_preprocessor">#define dgd_echo( text ) \</span>
00116 <span class="doxy_preprocessor">(void)( __cnl.get() &amp;&amp; __cnl-&gt;is_open() &amp;&amp; ((*__cnl) &lt;&lt; text) )</span>
00117 <span class="doxy_preprocessor"></span><span class="doxy_preprocessor">#else</span>
<a name="l00118"></a><a class="doxy_code" href="$(doxygen_html_dgDebugExtra_8h)#a6">00118</a> <span class="doxy_preprocessor"></span><span class="doxy_preprocessor">#define dgd_echo( text )</span>
00119 <span class="doxy_preprocessor"></span><span class="doxy_preprocessor">#endif</span>
00120 <span class="doxy_preprocessor"></span><span class="doxy_comment"></span>
00121 <span class="doxy_comment">/**</span>
00122 <span class="doxy_comment"> * Close the current scope.</span>
00123 <span class="doxy_comment"> */</span>
00124 <span class="doxy_preprocessor">#if defined(_TRACE)</span>
00125 <span class="doxy_preprocessor"></span><span class="doxy_preprocessor">#define dgd_end_scope(c) \</span>
00126 <span class="doxy_preprocessor">(void)( __cnl.get() &amp;&amp; __cnl-&gt;is_open() &amp;&amp; ((*__cnl) &lt;&lt; DGD::decr &lt;&lt; &quot;}&quot; &lt;&lt; std::endl) )</span>
00127 <span class="doxy_preprocessor"></span><span class="doxy_preprocessor">#else </span>
<a name="l00128"></a><a class="doxy_code" href="$(doxygen_html_dgDebugExtra_8h)#a7">00128</a> <span class="doxy_preprocessor"></span><span class="doxy_preprocessor">#define dgd_end_scope(c)</span>
00129 <span class="doxy_preprocessor"></span><span class="doxy_preprocessor">#endif</span>
00130 <span class="doxy_preprocessor"></span><span class="doxy_comment"></span>
00131 <span class="doxy_comment">/**</span>
00132 <span class="doxy_comment"> * Close the current scope, output the given text before closing.</span>
00133 <span class="doxy_comment"> */</span>
00134 <span class="doxy_preprocessor">#if defined(_TRACE)</span>
00135 <span class="doxy_preprocessor"></span><span class="doxy_preprocessor">#define dgd_end_scope_text(c, text) \</span>
00136 <span class="doxy_preprocessor">(void)( __cnl.get() &amp;&amp; __cnl-&gt;is_open() &amp;&amp; ((*__cnl) &lt;&lt; DGD::decr&lt;&lt; text &lt;&lt; &quot;}&quot; &lt;&lt; std::endl) )</span>
00137 <span class="doxy_preprocessor"></span><span class="doxy_preprocessor">#else </span>
<a name="l00138"></a><a class="doxy_code" href="$(doxygen_html_dgDebugExtra_8h)#a8">00138</a> <span class="doxy_preprocessor"></span><span class="doxy_preprocessor">#define dgd_end_scope_text(c, text)</span>
00139 <span class="doxy_preprocessor"></span><span class="doxy_preprocessor">#endif</span>
00140 <span class="doxy_preprocessor"></span>
00141 <span class="doxy_preprocessor">#endif </span><span class="doxy_comment">/* _dgDebugExtra_h_ */</span>
00142 
00143 <span class="doxy_comment">/* </span>
00144 <span class="doxy_comment"> * Local Variables:</span>
00145 <span class="doxy_comment"> * compile-command: &quot;make dgDebugExtra.obj&quot;</span>
00146 <span class="doxy_comment"> * End:</span>
00147 <span class="doxy_comment"> */</span>
00148 
00149 
</pre></div>
<hr>
<address style="align: right;"><small>Generated on Mon Dec 9 18:29:57 2002 for Depression Glass Debug Library by <a href="http://www.doxygen.org/index.html"> <img align="middle" alt="doxygen" border=0 height=53 src="$(doxygen)" width=110></a>1.2.17 </small></address>
</content>

<content name="doxygen_html_dgDebugExtra_8h" format="text/html">
<wmmeta name="title" value="dgDebugExtra.h File Reference" />
<h1>dgDebugExtra.h File Reference</h1>
Set of useful macros for use with <a class="doxy_el" href="$(doxygen_html_namespaceDGD)">DGD</a>
. <a href="#_details">More...</a>
<p>
<p> This graph shows which files directly or indirectly include this file:
<p><center><img alt="Included by dependency graph" border=0 src="$(dgDebugExtra_8h__dep__incl)" usemap="#dgDebugExtra.hdep_map"></center><map name="dgDebugExtra.hdep_map"><area alt="" coords="135,67,207,85" href="$(doxygen_html_dgDebug_8h)" shape="rect"><area alt="" coords="125,133,216,152" href="$(doxygen_html_dgDebugStd_8h)" shape="rect"><area alt="" coords="68,0,161,19" href="$(doxygen_html_dgChannel_8cpp)" shape="rect"><area alt="" coords="185,0,268,19" href="$(doxygen_html_dgDebug_8cpp)" shape="rect"></map>
<p><a href="$(doxygen_html_dgDebugExtra_8h-source)">Go to the source code of this file.</a>
<h2>Defines</h2>
<ul><li>#define <a class="doxy_el" href="$(doxygen_html_dgDebugExtra_8h)#a0">dgd_file</a>&nbsp;&nbsp;&nbsp;(char*)__FILE__ &lt;&lt; &quot;(&quot; &lt;&lt; __LINE__ &lt;&lt;&quot;) &quot; <dl class="doxy_el"><dd><font size="-1"><em>Expands to constant string in format &quot;filename(line)&quot;.</em> <a href="#a0"></a><em><br><br></em></font></dl><li>#define <a class="doxy_el" href="$(doxygen_html_dgDebugExtra_8h)#a1">dgd_expand</a>(s)&nbsp;&nbsp;&nbsp;#s &quot; = &quot; &lt;&lt; dgd &lt;&lt; (s) <dl class="doxy_el"><dd><font size="-1"><em>Expands into expression in form &quot;s = &quot; &lt;&lt; s.</em> <a href="#a1"></a><em><br><br></em></font></dl><li>#define <a class="doxy_el" href="$(doxygen_html_dgDebugExtra_8h)#a2">dgd_channel</a>(name)&nbsp;&nbsp;&nbsp;((<a class="doxy_el" href="$(doxygen_html_classDGD_1_1Debug)#p0">DGD::Debug::debug_factory</a>-&gt;operator[](#name))) <dl class="doxy_el"><dd><font size="-1"><em>Expands into channel pointer given channel name.</em> <a href="#a2"></a><em><br><br></em></font></dl><li>#define <a class="doxy_el" href="$(doxygen_html_dgDebugExtra_8h)#a3">dgd_trace</a>(name, arg) <dl class="doxy_el"><dd><font size="-1"><em>Trace expand.</em> <a href="#a3"></a><em><br><br></em></font></dl><li>#define <a class="doxy_el" href="$(doxygen_html_dgDebugExtra_8h)#a4">dgd_start_scope</a>(c, text) <dl class="doxy_el"><dd><font size="-1"><em>Start global indented output scope.</em> <a href="#a4"></a><em><br><br></em></font></dl><li>#define <a class="doxy_el" href="$(doxygen_html_dgDebugExtra_8h)#a5">dgd_scope</a>(c, text) <dl class="doxy_el"><dd><font size="-1"><em>Start local indented output scope.</em> <a href="#a5"></a><em><br><br></em></font></dl><li>#define <a class="doxy_el" href="$(doxygen_html_dgDebugExtra_8h)#a6">dgd_echo</a>(text) <dl class="doxy_el"><dd><font size="-1"><em>Echo expand.</em> <a href="#a6"></a><em><br><br></em></font></dl><li>#define <a class="doxy_el" href="$(doxygen_html_dgDebugExtra_8h)#a7">dgd_end_scope</a>(c) <dl class="doxy_el"><dd><font size="-1"><em>Close the current scope.</em> <a href="#a7"></a><em><br><br></em></font></dl><li>#define <a class="doxy_el" href="$(doxygen_html_dgDebugExtra_8h)#a8">dgd_end_scope_text</a>(c, text) <dl class="doxy_el"><dd><font size="-1"><em>Close the current scope, output the given text before closing.</em> <a href="#a8"></a><em><br><br></em></font></dl></ul>
<hr>
<a name="_details"></a>
<h2>Detailed Description</h2>
 Set of useful macros for use with <a class="doxy_el" href="$(doxygen_html_namespaceDGD)">DGD</a>
. <p>
<p><hr>
<h2>Define Documentation</h2>
<a doxytag="dgDebugExtra.h::dgd_file" name="a0"></a>
<p><table border=0 cellpadding=2 cellspacing=0 width="100%"><tr><td class="doxy_md"><table border=0 cellpadding=0 cellspacing=0><tr><td class="doxy_md" nowrap valign="top"> #define dgd_file&nbsp;&nbsp;&nbsp;(char*)__FILE__ &lt;&lt; &quot;(&quot; &lt;&lt; __LINE__ &lt;&lt;&quot;) &quot; </td></tr></table></td></tr></table><table border=0 cellpadding=0 cellspacing=5><tr><td> &nbsp; </td><td><p> Expands to constant string in format &quot;filename(line)&quot;. <p></td></tr></table><a doxytag="dgDebugExtra.h::dgd_expand" name="a1"></a>
<p><table border=0 cellpadding=2 cellspacing=0 width="100%"><tr><td class="doxy_md"><table border=0 cellpadding=0 cellspacing=0><tr><td class="doxy_md" nowrap valign="top"> #define dgd_expand</td><td class="doxy_md" valign="top">(&nbsp;</td><td class="doxy_md" nowrap valign="top">s&nbsp;</td><td class="doxy_mdname1" nowrap valign="top">&nbsp; </td><td class="doxy_md" valign="top">)&nbsp;</td><td class="doxy_md" nowrap>&nbsp;&nbsp;&nbsp;#s &quot; = &quot; &lt;&lt; dgd &lt;&lt; (s) </td></tr></table></td></tr></table><table border=0 cellpadding=0 cellspacing=5><tr><td> &nbsp; </td><td><p> Expands into expression in form &quot;s = &quot; &lt;&lt; s. <p> For example dgd_expand(a+b) will expand into &quot;a+b = &quot; &lt;&lt; (a+b)<dl compact><dt><b>Parameters: </b><dd><table border=0 cellpadding=0 cellspacing=2><tr><td valign="top"><em>s</em>&nbsp;</td><td> any expression </td></tr></table></dl></td></tr></table><a doxytag="dgDebugExtra.h::dgd_channel" name="a2"></a>
<p><table border=0 cellpadding=2 cellspacing=0 width="100%"><tr><td class="doxy_md"><table border=0 cellpadding=0 cellspacing=0><tr><td class="doxy_md" nowrap valign="top"> #define dgd_channel</td><td class="doxy_md" valign="top">(&nbsp;</td><td class="doxy_md" nowrap valign="top">name&nbsp;</td><td class="doxy_mdname1" nowrap valign="top">&nbsp; </td><td class="doxy_md" valign="top">)&nbsp;</td><td class="doxy_md" nowrap>&nbsp;&nbsp;&nbsp;((<a class="doxy_el" href="$(doxygen_html_classDGD_1_1Debug)#p0">DGD::Debug::debug_factory</a>-&gt;operator[](#name))) </td></tr></table></td></tr></table><table border=0 cellpadding=0 cellspacing=5><tr><td> &nbsp; </td><td><p> Expands into channel pointer given channel name. <p><dl compact><dt><b>Parameters: </b><dd><table border=0 cellpadding=0 cellspacing=2><tr><td valign="top"><em>name</em>&nbsp;</td><td> channel name. Note that there is no need in quoting the name each time the macro is used. </td></tr></table></dl></td></tr></table><a doxytag="dgDebugExtra.h::dgd_trace" name="a3"></a>
<p><table border=0 cellpadding=2 cellspacing=0 width="100%"><tr><td class="doxy_md"><table border=0 cellpadding=0 cellspacing=0><tr><td class="doxy_md" nowrap valign="top"> #define dgd_trace</td><td class="doxy_md" valign="top">(&nbsp;</td><td class="doxy_md" nowrap valign="top">name, </td></tr><tr><td></td><td></td><td class="doxy_md" nowrap>arg&nbsp;</td><td class="doxy_mdname1" nowrap valign="top">&nbsp; </td><td class="doxy_md" valign="top">)&nbsp;</td><td class="doxy_md" nowrap></td></tr></table></td></tr></table><table border=0 cellpadding=0 cellspacing=5><tr><td> &nbsp; </td><td><p> Trace expand. <p> Expands into expression equivalent to: <div class="doxy_fragment"><pre> <a class="doxy_code" href="$(doxygen_html_classDGD_1_1channel)">DGD::channel</a>&amp; cnl = *<a class="doxy_code" href="$(doxygen_html_classDGD_1_1Debug)#p0">DGD::Debug::debug_factory</a>-&gt;operator[]( <span class="doxy_stringliteral">&quot;name&quot;</span> );
 cnl &lt;&lt; arg; 
</pre></div> Existence of the Debug factory and channel is checked before any output operation, as well as closed channel output. </td></tr></table><a doxytag="dgDebugExtra.h::dgd_start_scope" name="a4"></a>
<p><table border=0 cellpadding=2 cellspacing=0 width="100%"><tr><td class="doxy_md"><table border=0 cellpadding=0 cellspacing=0><tr><td class="doxy_md" nowrap valign="top"> #define dgd_start_scope</td><td class="doxy_md" valign="top">(&nbsp;</td><td class="doxy_md" nowrap valign="top">c, </td></tr><tr><td></td><td></td><td class="doxy_md" nowrap>text&nbsp;</td><td class="doxy_mdname1" nowrap valign="top">&nbsp; </td><td class="doxy_md" valign="top">)&nbsp;</td><td class="doxy_md" nowrap></td></tr></table></td></tr></table><table border=0 cellpadding=0 cellspacing=5><tr><td> &nbsp; </td><td><p> Start global indented output scope. <p> This macro in conjunction with dgd_end_scope, dgd_echo, dgd_scope and dgd_end_scope_text is used to simplify use of <a class="doxy_el" href="$(doxygen_html_namespaceDGD)">DGD</a> channels. Here indented scope is a indented &quot;{...}&quot; block. This macro creates local channel pointer and starts the indented scope. The indented scope must be ended with dgd_end_scope or dgd_end_scope_text. The global scope can contain any number of local scopes opened by dgd_scope. </td></tr></table><a doxytag="dgDebugExtra.h::dgd_scope" name="a5"></a>
<p><table border=0 cellpadding=2 cellspacing=0 width="100%"><tr><td class="doxy_md"><table border=0 cellpadding=0 cellspacing=0><tr><td class="doxy_md" nowrap valign="top"> #define dgd_scope</td><td class="doxy_md" valign="top">(&nbsp;</td><td class="doxy_md" nowrap valign="top">c, </td></tr><tr><td></td><td></td><td class="doxy_md" nowrap>text&nbsp;</td><td class="doxy_mdname1" nowrap valign="top">&nbsp; </td><td class="doxy_md" valign="top">)&nbsp;</td><td class="doxy_md" nowrap></td></tr></table></td></tr></table><table border=0 cellpadding=0 cellspacing=5><tr><td> &nbsp; </td><td><p> Start local indented output scope. <p> This macro starts local indented scope. <dl compact><dt><b>See also: </b><dd><a class="doxy_el" href="$(doxygen_html_dgDebugExtra_8h)#a4">dgd_start_scope</a> , <a class="doxy_el" href="$(doxygen_html_dgDebugExtra_8h)#a7">dgd_end_scope</a></dl></td></tr></table><a doxytag="dgDebugExtra.h::dgd_echo" name="a6"></a>
<p><table border=0 cellpadding=2 cellspacing=0 width="100%"><tr><td class="doxy_md"><table border=0 cellpadding=0 cellspacing=0><tr><td class="doxy_md" nowrap valign="top"> #define dgd_echo</td><td class="doxy_md" valign="top">(&nbsp;</td><td class="doxy_md" nowrap valign="top">text&nbsp;</td><td class="doxy_mdname1" nowrap valign="top">&nbsp; </td><td class="doxy_md" valign="top">)&nbsp;</td><td class="doxy_md" nowrap></td></tr></table></td></tr></table><table border=0 cellpadding=0 cellspacing=5><tr><td> &nbsp; </td><td><p> Echo expand. <p> This macro is similar to dgd_trace, but it can be called inside indented scope only. <dl compact><dt><b>See also: </b><dd><a class="doxy_el" href="$(doxygen_html_dgDebugExtra_8h)#a4">dgd_start_scope</a> , <a class="doxy_el" href="$(doxygen_html_dgDebugExtra_8h)#a5">dgd_scope</a> , <a class="doxy_el" href="$(doxygen_html_dgDebugExtra_8h)#a7">dgd_end_scope</a></dl></td></tr></table><a doxytag="dgDebugExtra.h::dgd_end_scope" name="a7"></a>
<p><table border=0 cellpadding=2 cellspacing=0 width="100%"><tr><td class="doxy_md"><table border=0 cellpadding=0 cellspacing=0><tr><td class="doxy_md" nowrap valign="top"> #define dgd_end_scope</td><td class="doxy_md" valign="top">(&nbsp;</td><td class="doxy_md" nowrap valign="top">c&nbsp;</td><td class="doxy_mdname1" nowrap valign="top">&nbsp; </td><td class="doxy_md" valign="top">)&nbsp;</td><td class="doxy_md" nowrap></td></tr></table></td></tr></table><table border=0 cellpadding=0 cellspacing=5><tr><td> &nbsp; </td><td><p> Close the current scope. <p></td></tr></table><a doxytag="dgDebugExtra.h::dgd_end_scope_text" name="a8"></a>
<p><table border=0 cellpadding=2 cellspacing=0 width="100%"><tr><td class="doxy_md"><table border=0 cellpadding=0 cellspacing=0><tr><td class="doxy_md" nowrap valign="top"> #define dgd_end_scope_text</td><td class="doxy_md" valign="top">(&nbsp;</td><td class="doxy_md" nowrap valign="top">c, </td></tr><tr><td></td><td></td><td class="doxy_md" nowrap>text&nbsp;</td><td class="doxy_mdname1" nowrap valign="top">&nbsp; </td><td class="doxy_md" valign="top">)&nbsp;</td><td class="doxy_md" nowrap></td></tr></table></td></tr></table><table border=0 cellpadding=0 cellspacing=5><tr><td> &nbsp; </td><td><p> Close the current scope, output the given text before closing. <p></td></tr></table><hr><address style="align: right;"><small>Generated on Mon Dec 9 18:30:00 2002 for Depression Glass Debug Library by <a href="http://www.doxygen.org/index.html"> <img align="middle" alt="doxygen" border=0 height=53 src="$(doxygen)" width=110></a>1.2.17 </small></address>
</content>

<content name="doxygen_html_dgDebugStd_8h-source" format="text/html">
<wmmeta name="title" value="dgDebugStd.h Source File" />
<h1>dgDebugStd.h</h1>
<a href="$(doxygen_html_dgDebugStd_8h)">Go to the documentation of this file.</a>
<div class="doxy_fragment"><pre>00001 <span class="doxy_comment">// -*- c++ -*-</span>
00002 <span class="doxy_comment">//</span>
00003 <span class="doxy_comment">// $Id: dgd\\doc\\html\\Attic\\doxygen_html.wmk,v 1.9 2002/12/09 16:32:20 dimka Exp $</span>
00004 <span class="doxy_comment">//</span>
00005 <span class="doxy_comment">// This program is free software; you can redistribute it and/or modify</span>
00006 <span class="doxy_comment">// it under the terms of the GNU General Public License as published by</span>
00007 <span class="doxy_comment">// the Free Software Foundation; either version 2 of the License, or</span>
00008 <span class="doxy_comment">// (at your option) any later version.</span>
00009 <span class="doxy_comment">//</span>
00010 <span class="doxy_comment">// This program is distributed in the hope that it will be useful,</span>
00011 <span class="doxy_comment">// but WITHOUT ANY WARRANTY; without even the implied warranty of</span>
00012 <span class="doxy_comment">// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the</span>
00013 <span class="doxy_comment">// GNU General Public License for more details.</span>
00014 <span class="doxy_comment">//</span>
00015 <span class="doxy_comment">// You should have received a copy of the GNU General Public License</span>
00016 <span class="doxy_comment">// along with this program; if not, write to the Free Software</span>
00017 <span class="doxy_comment">// Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA</span>
00018 <span class="doxy_comment">//</span>
00019 <span class="doxy_comment">// This file is part of Depression Glass library.</span>
00020 <span class="doxy_comment">//</span>
00021 <span class="doxy_comment">// Copyright (c) 2002. Dimitry Kloper &lt;dimka@cs.technion.ac.il&gt; . </span>
00022 <span class="doxy_comment">//</span>
00023 <span class="doxy_comment">// dgDebugStd.h -- output operators for some std types</span>
00024 <span class="doxy_comment">//</span>
00025 
00026 <span class="doxy_preprocessor">#ifndef _dgDebugStd_h_</span>
00027 <span class="doxy_preprocessor"></span><span class="doxy_preprocessor">#define _dgDebugStd_h_</span>
00028 <span class="doxy_preprocessor"></span><span class="doxy_comment"></span>
00029 <span class="doxy_comment">/**</span>
00030 <span class="doxy_comment"> * @file dgDebugStd.h</span>
00031 <span class="doxy_comment"> * Set of output operators for frequently used STL and standard types.</span>
00032 <span class="doxy_comment"> */</span>
00033 
00034 <span class="doxy_preprocessor">#include &lt;list&gt;</span>
00035 <span class="doxy_preprocessor">#include &lt;vector&gt;</span>
00036 <span class="doxy_preprocessor">#include &lt;map&gt;</span>
00037 <span class="doxy_preprocessor">#include &lt;typeinfo&gt;</span>
00038 
00039 <span class="doxy_preprocessor">#include &quot;<a class="doxy_code" href="$(doxygen_html_dgDebug_8h)">dgDebug.h</a>&quot;</span>
00040 
00041 <span class="doxy_keyword">namespace </span>DGD {
00042 <span class="doxy_comment"></span>
00043 <span class="doxy_comment">/**</span>
00044 <span class="doxy_comment"> * Pair output operator. Will print a pair in a form &quot;[first second]&quot;</span>
00045 <span class="doxy_comment"> */</span>
00046 <span class="doxy_keyword">template</span> &lt;<span class="doxy_keyword">class</span> First_type, <span class="doxy_keyword">class</span> Second_type&gt;
<a name="l00047"></a><a class="doxy_code" href="$(doxygen_html_namespaceDGD)#a19">00047</a> <span class="doxy_keyword">inline</span> <a class="doxy_code" href="$(doxygen_html_classDGD_1_1channel)">channel</a>&amp; <a class="doxy_code" href="$(doxygen_html_namespaceDGD)#a9">operator &lt;&lt; </a>( <a class="doxy_code" href="$(doxygen_html_classDGD_1_1channel)">channel</a>&amp; cnl,
00048                               <span class="doxy_keyword">const</span> std::pair&lt;First_type, Second_type&gt;&amp; p ) {
00049    cnl &lt;&lt; <span class="doxy_stringliteral">&quot;[&quot;</span> &lt;&lt; p.first &lt;&lt; <span class="doxy_stringliteral">&quot; &quot;</span> &lt;&lt; p.second &lt;&lt; <span class="doxy_stringliteral">&quot;]&quot;</span>;
00050    <span class="doxy_keywordflow">return</span> cnl;
00051 }
00052 <span class="doxy_comment"></span>
00053 <span class="doxy_comment">/**</span>
00054 <span class="doxy_comment"> * Specialzation of pair output operator. This one is used when</span>
00055 <span class="doxy_comment"> * printing an option set &lt;int argc, char** argv&gt; received by main().</span>
00056 <span class="doxy_comment"> * Prints space separated options.</span>
00057 <span class="doxy_comment"> */</span>
00058 <span class="doxy_keyword">template</span> &lt;&gt;
<a name="l00059"></a><a class="doxy_code" href="$(doxygen_html_namespaceDGD)#a20">00059</a> <span class="doxy_keyword">inline</span> <a class="doxy_code" href="$(doxygen_html_classDGD_1_1channel)">channel</a>&amp; <a class="doxy_code" href="$(doxygen_html_namespaceDGD)#a9">operator &lt;&lt; </a>( <a class="doxy_code" href="$(doxygen_html_classDGD_1_1channel)">channel</a>&amp; cnl,
00060                               <span class="doxy_keyword">const</span> std::pair&lt;int, char**&gt;&amp; params ) {
00061    cnl.<a class="doxy_code" href="$(doxygen_html_classDGD_1_1channel)#a18">wrap</a>(<span class="doxy_keyword">false</span>);
00062    <span class="doxy_keywordflow">for</span>( <span class="doxy_keywordtype">int</span> i = 0; i &lt; params.first; ++i ) {
00063       cnl &lt;&lt; params.second[i] &lt;&lt; <span class="doxy_stringliteral">&quot; &quot;</span>;
00064    }
00065    cnl.<a class="doxy_code" href="$(doxygen_html_classDGD_1_1channel)#a18">wrap</a>(<span class="doxy_keyword">true</span>);
00066    <span class="doxy_keywordflow">return</span> cnl;
00067 }
00068 <span class="doxy_comment"></span>
00069 <span class="doxy_comment">/**</span>
00070 <span class="doxy_comment"> * List output operator. Prints list in form:</span>
00071 <span class="doxy_comment"> * @code </span>
00072 <span class="doxy_comment"> * {</span>
00073 <span class="doxy_comment"> *    item1</span>
00074 <span class="doxy_comment"> *    item2</span>
00075 <span class="doxy_comment"> *    ...</span>
00076 <span class="doxy_comment"> * }</span>
00077 <span class="doxy_comment"> * @endcode</span>
00078 <span class="doxy_comment"> */</span>
00079 <span class="doxy_keyword">template</span> &lt;<span class="doxy_keyword">class</span> Item_type&gt;
<a name="l00080"></a><a class="doxy_code" href="$(doxygen_html_namespaceDGD)#a21">00080</a> <span class="doxy_keyword">inline</span> <a class="doxy_code" href="$(doxygen_html_classDGD_1_1channel)">channel</a>&amp; <a class="doxy_code" href="$(doxygen_html_namespaceDGD)#a9">operator &lt;&lt; </a>( <a class="doxy_code" href="$(doxygen_html_classDGD_1_1channel)">channel</a>&amp; cnl, 
00081                               <span class="doxy_keyword">const</span> std::list&lt;Item_type&gt;&amp; l ) {
00082    cnl &lt;&lt; <span class="doxy_stringliteral">&quot;{&quot;</span> &lt;&lt; <a class="doxy_code" href="$(doxygen_html_namespaceDGD)#a2">incr</a> &lt;&lt; std::endl;
00083    <span class="doxy_keywordflow">for</span>( std::list&lt;Item_type&gt;::const_iterator i = l.begin(); 
00084         i != l.end(); 
00085         ++i ) {
00086       cnl &lt;&lt; (*i) &lt;&lt; std::endl;
00087    }
00088    cnl &lt;&lt; <a class="doxy_code" href="$(doxygen_html_namespaceDGD)#a3">decr</a> &lt;&lt; <span class="doxy_stringliteral">&quot;}&quot;</span>;
00089    <span class="doxy_keywordflow">return</span> cnl;
00090 }
00091 <span class="doxy_comment"></span>
00092 <span class="doxy_comment">/**</span>
00093 <span class="doxy_comment"> * Vector output operator. Prints vector in form:</span>
00094 <span class="doxy_comment"> * @code </span>
00095 <span class="doxy_comment"> * {</span>
00096 <span class="doxy_comment"> *    item1</span>
00097 <span class="doxy_comment"> *    item2</span>
00098 <span class="doxy_comment"> *    ...</span>
00099 <span class="doxy_comment"> * }</span>
00100 <span class="doxy_comment"> * @endcode</span>
00101 <span class="doxy_comment"> */</span>
00102 <span class="doxy_keyword">template</span> &lt;<span class="doxy_keyword">class</span> Item_type&gt;
<a name="l00103"></a><a class="doxy_code" href="$(doxygen_html_namespaceDGD)#a22">00103</a> <span class="doxy_keyword">inline</span> <a class="doxy_code" href="$(doxygen_html_classDGD_1_1channel)">channel</a>&amp; <a class="doxy_code" href="$(doxygen_html_namespaceDGD)#a9">operator &lt;&lt; </a>( <a class="doxy_code" href="$(doxygen_html_classDGD_1_1channel)">channel</a>&amp; cnl, 
00104                               <span class="doxy_keyword">const</span> std::vector&lt;Item_type&gt;&amp; v ) {
00105    cnl &lt;&lt; <span class="doxy_stringliteral">&quot;{&quot;</span> &lt;&lt; <a class="doxy_code" href="$(doxygen_html_namespaceDGD)#a2">incr</a> &lt;&lt; std::endl;
00106    <span class="doxy_keywordflow">for</span>( std::vector&lt;Item_type&gt;::const_iterator i = v.begin(); 
00107         i != v.end(); 
00108         ++i ) {
00109       cnl &lt;&lt; (*i) &lt;&lt; std::endl;
00110    }
00111    cnl &lt;&lt; <a class="doxy_code" href="$(doxygen_html_namespaceDGD)#a3">decr</a> &lt;&lt; <span class="doxy_stringliteral">&quot;}&quot;</span>;
00112    <span class="doxy_keywordflow">return</span> cnl;
00113 }
00114 <span class="doxy_comment"></span>
00115 <span class="doxy_comment">/**</span>
00116 <span class="doxy_comment"> * Map output operator. Prints map in form:</span>
00117 <span class="doxy_comment"> * @code </span>
00118 <span class="doxy_comment"> * {</span>
00119 <span class="doxy_comment"> *    item1</span>
00120 <span class="doxy_comment"> *    item2</span>
00121 <span class="doxy_comment"> *    ...</span>
00122 <span class="doxy_comment"> * }</span>
00123 <span class="doxy_comment"> * @endcode</span>
00124 <span class="doxy_comment"> * Order of elements is defined by std::map&lt;...&gt;::iterator</span>
00125 <span class="doxy_comment"> */</span>
00126 <span class="doxy_keyword">template</span> &lt;<span class="doxy_keyword">class</span> Key_type, <span class="doxy_keyword">class</span> Value_type&gt;
<a name="l00127"></a><a class="doxy_code" href="$(doxygen_html_namespaceDGD)#a23">00127</a> <span class="doxy_keyword">inline</span> <a class="doxy_code" href="$(doxygen_html_classDGD_1_1channel)">channel</a>&amp; <a class="doxy_code" href="$(doxygen_html_namespaceDGD)#a9">operator &lt;&lt; </a>( <a class="doxy_code" href="$(doxygen_html_classDGD_1_1channel)">channel</a>&amp; cnl, 
00128                               <span class="doxy_keyword">const</span> std::map&lt;Key_type, Value_type&gt;&amp; m ) {
00129    cnl &lt;&lt; <span class="doxy_stringliteral">&quot;{&quot;</span> &lt;&lt; <a class="doxy_code" href="$(doxygen_html_namespaceDGD)#a2">incr</a> &lt;&lt; std::endl;
00130    <span class="doxy_keywordflow">for</span>( std::map&lt;Key_type, Value_type&gt;::const_iterator i = m.begin(); 
00131         i != m.end(); 
00132         ++i ) {
00133       cnl &lt;&lt; (*i) &lt;&lt; std::endl;
00134    }
00135    cnl &lt;&lt; <a class="doxy_code" href="$(doxygen_html_namespaceDGD)#a3">decr</a> &lt;&lt; <span class="doxy_stringliteral">&quot;}&quot;</span>;
00136    <span class="doxy_keywordflow">return</span> cnl;
00137 }
00138 <span class="doxy_comment"></span>
00139 <span class="doxy_comment">/**</span>
00140 <span class="doxy_comment"> * Memory location/block. This class is used to print extended</span>
00141 <span class="doxy_comment"> * information about pointers and memory blocks. It encapsulates a</span>
00142 <span class="doxy_comment"> * pointer and optionally contains information about size of memory</span>
00143 <span class="doxy_comment"> * block referenced by the pointer.</span>
00144 <span class="doxy_comment"> */</span>
00145 <span class="doxy_keyword">template</span> &lt;<span class="doxy_keyword">class</span> T&gt;
<a name="l00146"></a><a class="doxy_code" href="$(doxygen_html_structDGD_1_1dgd__reference)">00146</a> <span class="doxy_keyword">struct </span><a class="doxy_code" href="$(doxygen_html_structDGD_1_1dgd__reference)">dgd_reference</a> {
<a name="l00147"></a><a class="doxy_code" href="$(doxygen_html_structDGD_1_1dgd__reference)#m0">00147</a>       <span class="doxy_keyword">const</span> T* <span class="doxy_keyword">const</span> <a class="doxy_code" href="$(doxygen_html_structDGD_1_1dgd__reference)#m0">m_pointer</a>;
<a name="l00148"></a><a class="doxy_code" href="$(doxygen_html_structDGD_1_1dgd__reference)#m1">00148</a>       <span class="doxy_keyword">const</span> <span class="doxy_keywordtype">bool</span> <a class="doxy_code" href="$(doxygen_html_structDGD_1_1dgd__reference)#m1">m_use_as_void</a>;
<a name="l00149"></a><a class="doxy_code" href="$(doxygen_html_structDGD_1_1dgd__reference)#m2">00149</a>       <span class="doxy_keyword">const</span> <span class="doxy_keywordtype">unsigned</span> <span class="doxy_keywordtype">int</span> <a class="doxy_code" href="$(doxygen_html_structDGD_1_1dgd__reference)#m2">m_size</a>;
00150       
<a name="l00151"></a><a class="doxy_code" href="$(doxygen_html_structDGD_1_1dgd__reference)#a0">00151</a>       <a class="doxy_code" href="$(doxygen_html_structDGD_1_1dgd__reference)#a0">dgd_reference</a>() : <a class="doxy_code" href="$(doxygen_html_structDGD_1_1dgd__reference)#m0">m_pointer</a>(NULL), <a class="doxy_code" href="$(doxygen_html_structDGD_1_1dgd__reference)#m1">m_use_as_void</a>(false), <a class="doxy_code" href="$(doxygen_html_structDGD_1_1dgd__reference)#m2">m_size</a>(0) {}
<a name="l00152"></a><a class="doxy_code" href="$(doxygen_html_structDGD_1_1dgd__reference)#a1">00152</a>       <span class="doxy_keyword">explicit</span> <a class="doxy_code" href="$(doxygen_html_structDGD_1_1dgd__reference)#a0">dgd_reference</a>( <span class="doxy_keyword">const</span> T* <span class="doxy_keyword">const</span> p,
00153                               <span class="doxy_keyword">const</span> <span class="doxy_keywordtype">bool</span> use_as_void = <span class="doxy_keyword">false</span>,
00154                               <span class="doxy_keyword">const</span> <span class="doxy_keywordtype">unsigned</span> <span class="doxy_keywordtype">int</span> size = 0 ) :
00155          <a class="doxy_code" href="$(doxygen_html_structDGD_1_1dgd__reference)#m0">m_pointer</a>( p ), <a class="doxy_code" href="$(doxygen_html_structDGD_1_1dgd__reference)#m1">m_use_as_void</a>(use_as_void), <a class="doxy_code" href="$(doxygen_html_structDGD_1_1dgd__reference)#m2">m_size</a>(size) {}
00156 
<a name="l00157"></a><a class="doxy_code" href="$(doxygen_html_structDGD_1_1dgd__reference)#a2">00157</a>       <a class="doxy_code" href="$(doxygen_html_structDGD_1_1dgd__reference)#a0">dgd_reference</a>( <span class="doxy_keyword">const</span> <a class="doxy_code" href="$(doxygen_html_structDGD_1_1dgd__reference)">dgd_reference</a>&amp; peer ) : 
00158          <a class="doxy_code" href="$(doxygen_html_structDGD_1_1dgd__reference)#m0">m_pointer</a>( peer.<a class="doxy_code" href="$(doxygen_html_structDGD_1_1dgd__reference)#m0">m_pointer</a> ), 
00159          <a class="doxy_code" href="$(doxygen_html_structDGD_1_1dgd__reference)#m1">m_use_as_void</a>( peer.<a class="doxy_code" href="$(doxygen_html_structDGD_1_1dgd__reference)#m1">m_use_as_void</a> ),
00160          <a class="doxy_code" href="$(doxygen_html_structDGD_1_1dgd__reference)#m2">m_size</a>( peer.<a class="doxy_code" href="$(doxygen_html_structDGD_1_1dgd__reference)#m2">m_size</a> ) {}
00161 };
00162 
00163 <span class="doxy_comment"></span>
00164 <span class="doxy_comment">/** </span>
00165 <span class="doxy_comment"> * Memory reference manipulator. This function is used as a</span>
00166 <span class="doxy_comment"> * DGD::channel manipulator for pointer formatting. It returns</span>
00167 <span class="doxy_comment"> * dgd_reference representing the memory pointer or block. The default</span>
00168 <span class="doxy_comment"> * values are set for T* pointer representation without hexa memory dump.</span>
00169 <span class="doxy_comment"> * @param p - pointer to type T. This pointer is used for referencing</span>
00170 <span class="doxy_comment"> * only so it is full const.</span>
00171 <span class="doxy_comment"> * @param use_as_void - if true the p pointer will be treated as</span>
00172 <span class="doxy_comment"> * void*, otherwise it will be treated as T* and printed in form </span>
00173 <span class="doxy_comment"> * (T*)0xXXXXXXXX. </span>
00174 <span class="doxy_comment"> * @param size - if greater then zero p will be treated as a pointer</span>
00175 <span class="doxy_comment"> * to a memory block of that size, and when printed it will appear as</span>
00176 <span class="doxy_comment"> * hexa dump.</span>
00177 <span class="doxy_comment"> * @see DGD::mem()</span>
00178 <span class="doxy_comment"> */</span>
00179 <span class="doxy_keyword">template</span> &lt;<span class="doxy_keyword">class</span> T&gt; 
<a name="l00180"></a><a class="doxy_code" href="$(doxygen_html_namespaceDGD)#a24">00180</a> <span class="doxy_keyword">inline</span> <a class="doxy_code" href="$(doxygen_html_structDGD_1_1dgd__reference)">dgd_reference&lt;T&gt;</a> <a class="doxy_code" href="$(doxygen_html_namespaceDGD)#a24">mem_ref</a>( <span class="doxy_keyword">const</span> T* <span class="doxy_keyword">const</span> p,
00181                                  <span class="doxy_keyword">const</span> <span class="doxy_keywordtype">bool</span> use_as_void = <span class="doxy_keyword">true</span>,
00182                                  <span class="doxy_keyword">const</span> <span class="doxy_keywordtype">unsigned</span> <span class="doxy_keywordtype">int</span> size = 0 ) {
00183    <span class="doxy_keywordflow">return</span> <a class="doxy_code" href="$(doxygen_html_structDGD_1_1dgd__reference)">dgd_reference&lt;T&gt;</a>(p, use_as_void, size);
00184 }
00185 <span class="doxy_comment"></span>
00186 <span class="doxy_comment">/**</span>
00187 <span class="doxy_comment"> * Memory reference manipulator. This function is almost identical to</span>
00188 <span class="doxy_comment"> * DGD::mem_ref(), the only difference that default values are set to</span>
00189 <span class="doxy_comment"> * T* pointer with hexa memory dump of T.</span>
00190 <span class="doxy_comment"> * @see DGD::mem_ref()</span>
00191 <span class="doxy_comment"> */</span>
00192 <span class="doxy_keyword">template</span> &lt;<span class="doxy_keyword">class</span> T&gt; 
<a name="l00193"></a><a class="doxy_code" href="$(doxygen_html_namespaceDGD)#a25">00193</a> <span class="doxy_keyword">inline</span> <a class="doxy_code" href="$(doxygen_html_structDGD_1_1dgd__reference)">dgd_reference&lt;T&gt;</a> <a class="doxy_code" href="$(doxygen_html_namespaceDGD)#a25">mem</a>( <span class="doxy_keyword">const</span> T* <span class="doxy_keyword">const</span> p,
00194                              <span class="doxy_keyword">const</span> <span class="doxy_keywordtype">unsigned</span> <span class="doxy_keywordtype">int</span> size = <span class="doxy_keyword">sizeof</span>(T),
00195                              <span class="doxy_keyword">const</span> <span class="doxy_keywordtype">bool</span> use_as_void = <span class="doxy_keyword">true</span> ) {
00196    <span class="doxy_keywordflow">return</span> <a class="doxy_code" href="$(doxygen_html_structDGD_1_1dgd__reference)">dgd_reference&lt;T&gt;</a>(p, use_as_void, size);
00197 }
00198 <span class="doxy_comment"></span>
00199 <span class="doxy_comment">/**</span>
00200 <span class="doxy_comment"> * Output operator for pointer and memory dump. Prints out pointer hex</span>
00201 <span class="doxy_comment"> * value, and optionally it's type and hexa dump of referenced memory.</span>
00202 <span class="doxy_comment"> */</span>
00203 <span class="doxy_keyword">template</span> &lt;<span class="doxy_keyword">class</span> T&gt; 
<a name="l00204"></a><a class="doxy_code" href="$(doxygen_html_namespaceDGD)#a26">00204</a> <span class="doxy_keyword">inline</span> std::ostream&amp; <a class="doxy_code" href="$(doxygen_html_namespaceDGD)#a9">operator &lt;&lt; </a>( std::ostream&amp; cnl,
00205                                    <span class="doxy_keyword">const</span> <a class="doxy_code" href="$(doxygen_html_structDGD_1_1dgd__reference)">dgd_reference&lt;T&gt;</a>&amp; ptr ) {
00206    <span class="doxy_keywordflow">if</span>( !ptr.<a class="doxy_code" href="$(doxygen_html_structDGD_1_1dgd__reference)#m1">m_use_as_void</a> ) {
00207       cnl &lt;&lt; <span class="doxy_stringliteral">&quot;(&quot;</span> &lt;&lt; <span class="doxy_keyword">typeid</span>(T).name() &lt;&lt; <span class="doxy_stringliteral">&quot;*)&quot;</span>;
00208    }
00209    std::ostream::fmtflags flags = cnl.flags();
00210    cnl &lt;&lt; hex &lt;&lt; <span class="doxy_stringliteral">&quot;0x&quot;</span> &lt;&lt; (<span class="doxy_keywordtype">void</span>*)ptr.<a class="doxy_code" href="$(doxygen_html_structDGD_1_1dgd__reference)#m0">m_pointer</a>;
00211 
00212    <span class="doxy_keywordflow">if</span>( ptr.<a class="doxy_code" href="$(doxygen_html_structDGD_1_1dgd__reference)#m2">m_size</a> &gt; 0 ) {
00213       <a class="doxy_code" href="$(doxygen_html_classDGD_1_1channel)">channel</a>* dgd_cnl = dynamic_cast&lt; channel* &gt; ( &amp;cnl );
00214       <span class="doxy_keywordtype">unsigned</span> <span class="doxy_keywordtype">int</span> width = channelbuf::DefaultMaxWidth;
00215       
00216       <span class="doxy_keywordflow">if</span>( dgd_cnl ) {
00217          <span class="doxy_keywordflow">if</span>( dgd_cnl-&gt;<a class="doxy_code" href="$(doxygen_html_classDGD_1_1channel)#a18">wrap</a>() ) {
00218             width = dgd_cnl-&gt;<a class="doxy_code" href="$(doxygen_html_classDGD_1_1channel)#a16">max_width</a>() - dgd_cnl-&gt;<a class="doxy_code" href="$(doxygen_html_classDGD_1_1channel)#a12">indent</a>();
00219          }
00220       }
00221 
00222       <span class="doxy_keywordtype">unsigned</span> <span class="doxy_keywordtype">int</span> num_bytes_per_line = 
00223          std::min( (<span class="doxy_keywordtype">unsigned</span> <span class="doxy_keywordtype">int</span>)16, (width - 10) / 4 );
00224       <span class="doxy_keywordtype">unsigned</span> <span class="doxy_keywordtype">int</span> bytes_written = 0, i;
00225       <span class="doxy_keywordtype">unsigned</span> <span class="doxy_keywordtype">char</span>* mem = (<span class="doxy_keywordtype">unsigned</span> <span class="doxy_keywordtype">char</span>*)ptr.<a class="doxy_code" href="$(doxygen_html_structDGD_1_1dgd__reference)#m0">m_pointer</a>;
00226       
00227       cnl &lt;&lt; dec &lt;&lt; <span class="doxy_stringliteral">&quot; &quot;</span> &lt;&lt; ptr.<a class="doxy_code" href="$(doxygen_html_structDGD_1_1dgd__reference)#m2">m_size</a> &lt;&lt; hex &lt;&lt; <span class="doxy_stringliteral">&quot; bytes&quot;</span> &lt;&lt; std::endl;
00228       <span class="doxy_keywordflow">while</span>(bytes_written &lt; ptr.<a class="doxy_code" href="$(doxygen_html_structDGD_1_1dgd__reference)#m2">m_size</a>) {
00229          cnl &lt;&lt; (<span class="doxy_keywordtype">unsigned</span> <span class="doxy_keywordtype">long</span>)( mem + bytes_written ) &lt;&lt; <span class="doxy_stringliteral">&quot; &quot;</span>;
00230          
00231          <span class="doxy_keywordflow">for</span>(i = 0; i &lt; num_bytes_per_line; i++) {
00232             <span class="doxy_keywordflow">if</span>( bytes_written+i &lt; ptr.<a class="doxy_code" href="$(doxygen_html_structDGD_1_1dgd__reference)#m2">m_size</a> ) {
00233                cnl.width(2);
00234                cnl &lt;&lt; (<span class="doxy_keywordtype">unsigned</span> <span class="doxy_keywordtype">int</span>)(0xff &amp; mem[bytes_written+i]) &lt;&lt; <span class="doxy_stringliteral">&quot; &quot;</span>;
00235             } <span class="doxy_keywordflow">else</span> {
00236                cnl &lt;&lt; <span class="doxy_stringliteral">&quot;   &quot;</span>;
00237             }
00238          }
00239          cnl &lt;&lt; <span class="doxy_stringliteral">&quot; &quot;</span>;
00240          <span class="doxy_keywordflow">for</span>( i = 0; i &lt; num_bytes_per_line &amp;&amp; 
00241                  bytes_written+i &lt; ptr.<a class="doxy_code" href="$(doxygen_html_structDGD_1_1dgd__reference)#m2">m_size</a>; i++ ) {
00242             <span class="doxy_keywordtype">char</span> c = mem[bytes_written+i];
00243             cnl &lt;&lt; ((c &gt;= <span class="doxy_charliteral">' '</span>)?c:<span class="doxy_charliteral">'.'</span>);
00244          }
00245          bytes_written += num_bytes_per_line;
00246          cnl &lt;&lt; std::endl;
00247       }
00248    }
00249 
00250    cnl.flags( flags );
00251    <span class="doxy_keywordflow">return</span> cnl;
00252 }
00253 }; <span class="doxy_comment">// end of namespace DGD</span>
00254 
00255 <span class="doxy_preprocessor">#endif </span><span class="doxy_comment">/* _dgDebugStd_h_ */</span>
00256 
00257 <span class="doxy_comment">/* </span>
00258 <span class="doxy_comment"> * Local Variables:</span>
00259 <span class="doxy_comment"> * compile-command: &quot;make dgDebugStd.obj&quot;</span>
00260 <span class="doxy_comment"> * End:</span>
00261 <span class="doxy_comment"> */</span>
00262 
00263 
</pre></div>
<hr>
<address style="align: right;"><small>Generated on Mon Dec 9 18:29:57 2002 for Depression Glass Debug Library by <a href="http://www.doxygen.org/index.html"> <img align="middle" alt="doxygen" border=0 height=53 src="$(doxygen)" width=110></a>1.2.17 </small></address>
</content>

<content name="doxygen_html_dgDebugStd_8h" format="text/html">
<wmmeta name="title" value="dgDebugStd.h File Reference" />
<h1>dgDebugStd.h File Reference</h1>
Set of output operators for frequently used STL and standard types. <a href="#_details">More...</a>
<p><code>#include &lt;list&gt;</code><br><code>#include &lt;vector&gt;</code><br><code>#include &lt;map&gt;</code><br><code>#include &lt;typeinfo&gt;</code><br><code>#include &quot;<a class="doxy_el" href="$(doxygen_html_dgDebug_8h-source)">dgDebug.h</a>&quot;</code><br>
<p> Include dependency graph for dgDebugStd.h:
<p><center><img alt="Include dependency graph" border=0 src="$(dgDebugStd_8h__incl)" usemap="#dgDebugStd.h_map"></center><map name="dgDebugStd.h_map"><area alt="" coords="245,50,317,69" href="$(doxygen_html_dgDebug_8h)" shape="rect"></map>
<p> This graph shows which files directly or indirectly include this file:
<p><center><img alt="Included by dependency graph" border=0 src="$(dgDebugStd_8h__dep__incl)" usemap="#dgDebugStd.hdep_map"></center><map name="dgDebugStd.hdep_map"><area alt="" coords="67,66,139,85" href="$(doxygen_html_dgDebug_8h)" shape="rect"><area alt="" coords="115,0,208,18" href="$(doxygen_html_dgChannel_8cpp)" shape="rect"><area alt="" coords="232,0,315,18" href="$(doxygen_html_dgDebug_8cpp)" shape="rect"></map>
<p><a href="$(doxygen_html_dgDebugStd_8h-source)">Go to the source code of this file.</a>
<h2>Namespaces</h2>
<ul><li>namespace <a class="doxy_el" href="$(doxygen_html_namespaceDGD)">DGD</a></ul>
<hr>
<a name="_details"></a>
<h2>Detailed Description</h2>
 Set of output operators for frequently used STL and standard types. <p>
<p><hr><address style="align: right;"><small>Generated on Mon Dec 9 18:30:00 2002 for Depression Glass Debug Library by <a href="http://www.doxygen.org/index.html"> <img align="middle" alt="doxygen" border=0 height=53 src="$(doxygen)" width=110></a>1.2.17 </small></address>
</content>

<content name="doxygen_html_dgFunnel_8cpp" format="text/html">
<wmmeta name="title" value="dgFunnel.cpp File Reference" />
<h1>dgFunnel.cpp File Reference</h1>
<code>#include &lt;ctime&gt;</code>
<br>
<code>#include &quot;<a class="doxy_el" href="$(doxygen_html_dgFunnel_8h-source)">dgFunnel.h</a>&quot;</code>
<br>
<p> Include dependency graph for dgFunnel.cpp:
<p><center><img alt="Include dependency graph" border=0 src="$(dgFunnel_8cpp__incl)" usemap="#dgFunnel.cpp_map"></center><map name="dgFunnel.cpp_map"><area alt="" coords="92,200,164,218" href="$(doxygen_html_dgFunnel_8h)" shape="rect"><area alt="" coords="77,133,179,152" href="$(doxygen_html_dgChannelBuf_8h)" shape="rect"><area alt="" coords="51,66,125,85" href="$(doxygen_html_dgStream_8h)" shape="rect"></map>
<h2>Namespaces</h2>
<ul><li>namespace <a class="doxy_el" href="$(doxygen_html_namespaceDGD)">DGD</a></ul>
<hr>
<address style="align: right;"><small>Generated on Mon Dec 9 18:30:00 2002 for Depression Glass Debug Library by <a href="http://www.doxygen.org/index.html"> <img align="middle" alt="doxygen" border=0 height=53 src="$(doxygen)" width=110></a>1.2.17 </small></address>
</content>

<content name="doxygen_html_dgFunnel_8h-source" format="text/html">
<wmmeta name="title" value="dgFunnel.h Source File" />
<h1>dgFunnel.h</h1>
<a href="$(doxygen_html_dgFunnel_8h)">Go to the documentation of this file.</a>
<div class="doxy_fragment"><pre>00001 <span class="doxy_comment">// -*- c++ -*-</span>
00002 <span class="doxy_comment">//</span>
00003 <span class="doxy_comment">// $Id: dgd\\doc\\html\\Attic\\doxygen_html.wmk,v 1.9 2002/12/09 16:32:20 dimka Exp $</span>
00004 <span class="doxy_comment">//</span>
00005 <span class="doxy_comment">// This program is free software; you can redistribute it and/or modify</span>
00006 <span class="doxy_comment">// it under the terms of the GNU General Public License as published by</span>
00007 <span class="doxy_comment">// the Free Software Foundation; either version 2 of the License, or</span>
00008 <span class="doxy_comment">// (at your option) any later version.</span>
00009 <span class="doxy_comment">//</span>
00010 <span class="doxy_comment">// This program is distributed in the hope that it will be useful,</span>
00011 <span class="doxy_comment">// but WITHOUT ANY WARRANTY; without even the implied warranty of</span>
00012 <span class="doxy_comment">// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the</span>
00013 <span class="doxy_comment">// GNU General Public License for more details.</span>
00014 <span class="doxy_comment">//</span>
00015 <span class="doxy_comment">// You should have received a copy of the GNU General Public License</span>
00016 <span class="doxy_comment">// along with this program; if not, write to the Free Software</span>
00017 <span class="doxy_comment">// Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA</span>
00018 <span class="doxy_comment">//</span>
00019 <span class="doxy_comment">// This file is part of Depression Glass library.</span>
00020 <span class="doxy_comment">//</span>
00021 <span class="doxy_comment">// Copyright (c) 2002. Dimitry Kloper &lt;dimka@cs.technion.ac.il&gt; . </span>
00022 <span class="doxy_comment">//</span>
00023 <span class="doxy_comment">// dgFunnel.h -- channel funnel into physical stream</span>
00024 <span class="doxy_comment">//</span>
00025 
00026 <span class="doxy_preprocessor">#ifndef _dgFunnel_h_</span>
00027 <span class="doxy_preprocessor"></span><span class="doxy_preprocessor">#define _dgFunnel_h_</span>
00028 <span class="doxy_preprocessor"></span>
00029 <span class="doxy_preprocessor">#include &quot;<a class="doxy_code" href="$(doxygen_html_dgChannelBuf_8h)">dgChannelBuf.h</a>&quot;</span>
00030 
00031 <span class="doxy_keyword">namespace </span>DGD {
00032 
00033 <span class="doxy_keyword">class </span>funnel;
00034 
<a name="l00035"></a><a class="doxy_code" href="$(doxygen_html_classDGD_1_1funnelbuf)">00035</a> <span class="doxy_keyword">class </span><a class="doxy_code" href="$(doxygen_html_classDGD_1_1funnelbuf)">funnelbuf</a>: <span class="doxy_keyword">public</span> <a class="doxy_code" href="$(doxygen_html_classDGD_1_1channelbuf)">channelbuf</a> {
00036    <span class="doxy_keyword">public</span>:
<a name="l00037"></a><a class="doxy_code" href="$(doxygen_html_classDGD_1_1funnelbuf)#l0">00037</a>       <span class="doxy_keyword">friend</span> <span class="doxy_keyword">class </span><a class="doxy_code" href="$(doxygen_html_classDGD_1_1funnel)">funnel</a>;
00038 
<a name="l00039"></a><a class="doxy_code" href="$(doxygen_html_classDGD_1_1funnelbuf_1_1Callback)">00039</a>       <span class="doxy_keyword">class </span><a class="doxy_code" href="$(doxygen_html_classDGD_1_1funnelbuf_1_1Callback)">Callback</a> {
00040          <span class="doxy_keyword">public</span>:
00041             <span class="doxy_keyword">virtual</span> <span class="doxy_keywordtype">void</span> <a class="doxy_code" href="$(doxygen_html_classDGD_1_1funnelbuf_1_1Callback)#a0">operator () </a>( <span class="doxy_keywordtype">unsigned</span> <span class="doxy_keywordtype">long</span> line, 
00042                                        <span class="doxy_keywordtype">unsigned</span> <span class="doxy_keywordtype">long</span> column,
00043                                        <span class="doxy_keywordtype">unsigned</span> <span class="doxy_keywordtype">long</span> bytes ) = 0;
00044       };
00045 
00046    <span class="doxy_keyword">private</span>:
00047       <span class="doxy_keywordtype">void</span> <a class="doxy_code" href="$(doxygen_html_classDGD_1_1funnelbuf)#c0">post_process</a>();
00048 
00049       <span class="doxy_keywordtype">void</span> <a class="doxy_code" href="$(doxygen_html_classDGD_1_1funnelbuf)#c1">assoc</a>( std::ostream* );
00050 
00051       <span class="doxy_keywordtype">void</span> <a class="doxy_code" href="$(doxygen_html_classDGD_1_1funnelbuf)#c3">callback</a>( Callback* cb );
00052       <span class="doxy_keyword">const</span> Callback* <a class="doxy_code" href="$(doxygen_html_classDGD_1_1funnelbuf)#c3">callback</a>() <span class="doxy_keyword">const</span>;
00053 
00054    <span class="doxy_keyword">public</span>:
00055       <a class="doxy_code" href="$(doxygen_html_classDGD_1_1funnelbuf)#a0">funnelbuf</a>();
00056       <a class="doxy_code" href="$(doxygen_html_classDGD_1_1funnelbuf)#a1">~funnelbuf</a>();
00057 
00058    <span class="doxy_keyword">private</span>:
<a name="l00059"></a><a class="doxy_code" href="$(doxygen_html_classDGD_1_1funnelbuf)#o0">00059</a>       <a class="doxy_code" href="$(doxygen_html_classDGD_1_1funnelbuf_1_1Callback)">Callback</a>*     <a class="doxy_code" href="$(doxygen_html_classDGD_1_1funnelbuf)#o0">m_callback</a>;
00060 };
00061 
<a name="l00062"></a><a class="doxy_code" href="$(doxygen_html_classDGD_1_1funnel)">00062</a> <span class="doxy_keyword">class </span><a class="doxy_code" href="$(doxygen_html_classDGD_1_1funnel)">funnel</a>: <span class="doxy_keyword">public</span> std::ostream, <span class="doxy_keyword">public</span> <a class="doxy_code" href="$(doxygen_html_classDGD_1_1funnelbuf)">funnelbuf</a>::Callback {
00063    <span class="doxy_keyword">public</span>:
<a name="l00064"></a><a class="doxy_code" href="$(doxygen_html_classDGD_1_1funnel)#s0">00064</a>       <span class="doxy_keyword">typedef</span> std::ostream <a class="doxy_code" href="$(doxygen_html_classDGD_1_1funnel)#s0">Parent</a>;
00065       
00066    <span class="doxy_keyword">public</span>:
00067       <a class="doxy_code" href="$(doxygen_html_classDGD_1_1funnel)#a0">funnel</a>( std::ostream&amp; physical_stream );
00068       <a class="doxy_code" href="$(doxygen_html_classDGD_1_1funnelbuf)">funnelbuf</a>&amp;      <a class="doxy_code" href="$(doxygen_html_classDGD_1_1funnel)#a1">rdbuf</a>();
00069 
00070       <span class="doxy_keyword">virtual</span> <span class="doxy_keywordtype">void</span> <a class="doxy_code" href="$(doxygen_html_classDGD_1_1funnel)#a2">header</a>();
00071 
00072    <span class="doxy_keyword">protected</span>:
<a name="l00073"></a><a class="doxy_code" href="$(doxygen_html_classDGD_1_1funnel)#b0">00073</a>       <span class="doxy_keyword">virtual</span> <span class="doxy_keywordtype">void</span> <a class="doxy_code" href="$(doxygen_html_classDGD_1_1funnel)#b0">operator () </a>( <span class="doxy_keywordtype">unsigned</span> <span class="doxy_keywordtype">long</span> line, 
00074                                  <span class="doxy_keywordtype">unsigned</span> <span class="doxy_keywordtype">long</span> column,
00075                                  <span class="doxy_keywordtype">unsigned</span> <span class="doxy_keywordtype">long</span> bytes ) {};
00076 
00077    <span class="doxy_keyword">private</span>:
<a name="l00078"></a><a class="doxy_code" href="$(doxygen_html_classDGD_1_1funnel)#o0">00078</a>       <a class="doxy_code" href="$(doxygen_html_classDGD_1_1funnelbuf)">funnelbuf</a> <a class="doxy_code" href="$(doxygen_html_classDGD_1_1funnel)#o0">m_buffer</a>;
00079 };
00080 
00081 }; <span class="doxy_comment">// end of namespace DGD</span>
00082 
00083 <span class="doxy_preprocessor">#endif </span><span class="doxy_comment">/* _dgFunnel_h_ */</span>
00084 
00085 <span class="doxy_comment">/* </span>
00086 <span class="doxy_comment"> * Local Variables:</span>
00087 <span class="doxy_comment"> * compile-command: &quot;make dgFunnel.obj&quot;</span>
00088 <span class="doxy_comment"> * End:</span>
00089 <span class="doxy_comment"> */</span>
00090 
00091 
</pre></div>
<hr>
<address style="align: right;"><small>Generated on Mon Dec 9 18:29:57 2002 for Depression Glass Debug Library by <a href="http://www.doxygen.org/index.html"> <img align="middle" alt="doxygen" border=0 height=53 src="$(doxygen)" width=110></a>1.2.17 </small></address>
</content>

<content name="doxygen_html_dgFunnel_8h" format="text/html">
<wmmeta name="title" value="dgFunnel.h File Reference" />
<h1>dgFunnel.h File Reference</h1>
<code>#include &quot;<a class="doxy_el" href="$(doxygen_html_dgChannelBuf_8h-source)">dgChannelBuf.h</a>&quot;</code>
<br>
<p> Include dependency graph for dgFunnel.h:
<p><center><img alt="Include dependency graph" border=0 src="$(dgFunnel_8h__incl)" usemap="#dgFunnel.h_map"></center><map name="dgFunnel.h_map"><area alt="" coords="77,133,179,151" href="$(doxygen_html_dgChannelBuf_8h)" shape="rect"><area alt="" coords="51,66,125,85" href="$(doxygen_html_dgStream_8h)" shape="rect"></map>
<p> This graph shows which files directly or indirectly include this file:
<p><center><img alt="Included by dependency graph" border=0 src="$(dgFunnel_8h__dep__incl)" usemap="#dgFunnel.hdep_map"></center><map name="dgFunnel.hdep_map"><area alt="" coords="243,67,315,85" href="$(doxygen_html_dgDebug_8h)" shape="rect"><area alt="" coords="233,133,324,152" href="$(doxygen_html_dgDebugStd_8h)" shape="rect"><area alt="" coords="344,0,437,19" href="$(doxygen_html_dgChannel_8cpp)" shape="rect"><area alt="" coords="237,0,320,19" href="$(doxygen_html_dgDebug_8cpp)" shape="rect"><area alt="" coords="0,67,85,85" href="$(doxygen_html_dgFunnel_8cpp)" shape="rect"><area alt="" coords="109,67,213,85" href="$(doxygen_html_dgMultifileLog_8h)" shape="rect"><area alt="" coords="96,0,213,19" href="$(doxygen_html_dgMultifileLog_8cpp)" shape="rect"></map>
<p><a href="$(doxygen_html_dgFunnel_8h-source)">Go to the source code of this file.</a>
<h2>Namespaces</h2>
<ul><li>namespace <a class="doxy_el" href="$(doxygen_html_namespaceDGD)">DGD</a></ul>
<hr>
<address style="align: right;"><small>Generated on Mon Dec 9 18:30:01 2002 for Depression Glass Debug Library by <a href="http://www.doxygen.org/index.html"> <img align="middle" alt="doxygen" border=0 height=53 src="$(doxygen)" width=110></a>1.2.17 </small></address>
</content>

<content name="doxygen_html_dgMultifileLog_8cpp" format="text/html">
<wmmeta name="title" value="dgMultifileLog.cpp File Reference" />
<h1>dgMultifileLog.cpp File Reference</h1>
<code>#include &lt;boost/lexical_cast.hpp&gt;</code>
<br>
<code>#include &quot;<a class="doxy_el" href="$(doxygen_html_dgMultifileLog_8h-source)">dgMultifileLog.h</a>&quot;</code>
<br>
<p> Include dependency graph for dgMultifileLog.cpp:
<p><center><img alt="Include dependency graph" border=0 src="$(dgMultifileLog_8cpp__incl)" usemap="#dgMultifileLog.cpp_map"></center><map name="dgMultifileLog.cpp_map"><area alt="" coords="159,267,263,285" href="$(doxygen_html_dgMultifileLog_8h)" shape="rect"><area alt="" coords="116,133,217,152" href="$(doxygen_html_dgChannelBuf_8h)" shape="rect"><area alt="" coords="101,67,176,85" href="$(doxygen_html_dgStream_8h)" shape="rect"><area alt="" coords="137,200,209,219" href="$(doxygen_html_dgFunnel_8h)" shape="rect"></map>
<h2>Namespaces</h2>
<ul><li>namespace <a class="doxy_el" href="$(doxygen_html_namespaceDGD)">DGD</a></ul>
<hr>
<address style="align: right;"><small>Generated on Mon Dec 9 18:30:01 2002 for Depression Glass Debug Library by <a href="http://www.doxygen.org/index.html"> <img align="middle" alt="doxygen" border=0 height=53 src="$(doxygen)" width=110></a>1.2.17 </small></address>
</content>

<content name="doxygen_html_dgMultifileLog_8h-source" format="text/html">
<wmmeta name="title" value="dgMultifileLog.h Source File" />
<h1>dgMultifileLog.h</h1>
<a href="$(doxygen_html_dgMultifileLog_8h)">Go to the documentation of this file.</a>
<div class="doxy_fragment"><pre>00001 <span class="doxy_comment">// -*- c++ -*-</span>
00002 <span class="doxy_comment">//</span>
00003 <span class="doxy_comment">// $Id: dgd\\doc\\html\\Attic\\doxygen_html.wmk,v 1.9 2002/12/09 16:32:20 dimka Exp $</span>
00004 <span class="doxy_comment">//</span>
00005 <span class="doxy_comment">// This program is free software; you can redistribute it and/or modify</span>
00006 <span class="doxy_comment">// it under the terms of the GNU General Public License as published by</span>
00007 <span class="doxy_comment">// the Free Software Foundation; either version 2 of the License, or</span>
00008 <span class="doxy_comment">// (at your option) any later version.</span>
00009 <span class="doxy_comment">//</span>
00010 <span class="doxy_comment">// This program is distributed in the hope that it will be useful,</span>
00011 <span class="doxy_comment">// but WITHOUT ANY WARRANTY; without even the implied warranty of</span>
00012 <span class="doxy_comment">// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the</span>
00013 <span class="doxy_comment">// GNU General Public License for more details.</span>
00014 <span class="doxy_comment">//</span>
00015 <span class="doxy_comment">// You should have received a copy of the GNU General Public License</span>
00016 <span class="doxy_comment">// along with this program; if not, write to the Free Software</span>
00017 <span class="doxy_comment">// Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA</span>
00018 <span class="doxy_comment">//</span>
00019 <span class="doxy_comment">// This file is part of Depression Glass library.</span>
00020 <span class="doxy_comment">//</span>
00021 <span class="doxy_comment">// Copyright (c) 2002. Dimitry Kloper &lt;dimka@cs.technion.ac.il&gt; . </span>
00022 <span class="doxy_comment">//</span>
00023 <span class="doxy_comment">// dgMultifileLog.h -- multifile log funnel</span>
00024 <span class="doxy_comment">//</span>
00025 
00026 <span class="doxy_preprocessor">#ifndef _dgMultifileLog_h_</span>
00027 <span class="doxy_preprocessor"></span><span class="doxy_preprocessor">#define _dgMultifileLog_h_</span>
00028 <span class="doxy_preprocessor"></span>
00029 <span class="doxy_preprocessor">#include &lt;iostream&gt;</span>
00030 <span class="doxy_preprocessor">#include &lt;fstream&gt;</span>
00031 <span class="doxy_preprocessor">#include &lt;string&gt;</span>
00032 
00033 <span class="doxy_preprocessor">#include &quot;<a class="doxy_code" href="$(doxygen_html_dgFunnel_8h)">dgFunnel.h</a>&quot;</span>
00034 
00035 <span class="doxy_keyword">namespace </span>DGD {
00036 
<a name="l00037"></a><a class="doxy_code" href="$(doxygen_html_classDGD_1_1multifile__log)">00037</a> <span class="doxy_keyword">class </span><a class="doxy_code" href="$(doxygen_html_classDGD_1_1multifile__log)">multifile_log</a>: <span class="doxy_keyword">public</span> <a class="doxy_code" href="$(doxygen_html_classDGD_1_1funnel)">funnel</a> {
00038    <span class="doxy_keyword">public</span>:
<a name="l00039"></a><a class="doxy_code" href="$(doxygen_html_classDGD_1_1multifile__log_1_1Split__criteria)">00039</a>       <span class="doxy_keyword">class </span><a class="doxy_code" href="$(doxygen_html_classDGD_1_1multifile__log_1_1Split__criteria)">Split_criteria</a> {
00040          <span class="doxy_keyword">public</span>:
00041             <span class="doxy_keyword">virtual</span> <span class="doxy_keywordtype">bool</span> <a class="doxy_code" href="$(doxygen_html_classDGD_1_1multifile__log_1_1Split__criteria)#a0">operator () </a>( <span class="doxy_keywordtype">unsigned</span> <span class="doxy_keywordtype">long</span> volume,
00042                                        <span class="doxy_keywordtype">unsigned</span> <span class="doxy_keywordtype">long</span> line, 
00043                                        <span class="doxy_keywordtype">unsigned</span> <span class="doxy_keywordtype">long</span> column,
00044                                        <span class="doxy_keywordtype">unsigned</span> <span class="doxy_keywordtype">long</span> bytes ) <span class="doxy_keyword">const</span> = 0;
00045       };
00046 
<a name="l00047"></a><a class="doxy_code" href="$(doxygen_html_classDGD_1_1multifile__log_1_1Dont__split)">00047</a>       <span class="doxy_keyword">class </span><a class="doxy_code" href="$(doxygen_html_classDGD_1_1multifile__log_1_1Dont__split)">Dont_split</a>: <span class="doxy_keyword">public</span> <a class="doxy_code" href="$(doxygen_html_classDGD_1_1multifile__log_1_1Split__criteria)">Split_criteria</a> {
00048          <span class="doxy_keyword">public</span>:
<a name="l00049"></a><a class="doxy_code" href="$(doxygen_html_classDGD_1_1multifile__log_1_1Dont__split)#a0">00049</a>             <span class="doxy_keywordtype">bool</span> <a class="doxy_code" href="$(doxygen_html_classDGD_1_1multifile__log_1_1Dont__split)#a0">operator () </a>(  <span class="doxy_keywordtype">unsigned</span> <span class="doxy_keywordtype">long</span> volume,
00050                                 <span class="doxy_keywordtype">unsigned</span> <span class="doxy_keywordtype">long</span> line, 
00051                                <span class="doxy_keywordtype">unsigned</span> <span class="doxy_keywordtype">long</span> column,
00052                                <span class="doxy_keywordtype">unsigned</span> <span class="doxy_keywordtype">long</span> bytes )<span class="doxy_keyword"> const </span>{ <span class="doxy_keywordflow">return</span> <span class="doxy_keyword">false</span>; };
00053       };
00054 
<a name="l00055"></a><a class="doxy_code" href="$(doxygen_html_classDGD_1_1multifile__log_1_1Split__by__size)">00055</a>       <span class="doxy_keyword">class </span><a class="doxy_code" href="$(doxygen_html_classDGD_1_1multifile__log_1_1Split__by__size)">Split_by_size</a>: <span class="doxy_keyword">public</span> <a class="doxy_code" href="$(doxygen_html_classDGD_1_1multifile__log_1_1Split__criteria)">Split_criteria</a>  {
00056          <span class="doxy_keyword">public</span>:
<a name="l00057"></a><a class="doxy_code" href="$(doxygen_html_classDGD_1_1multifile__log_1_1Split__by__size)#a0">00057</a>             <a class="doxy_code" href="$(doxygen_html_classDGD_1_1multifile__log_1_1Split__by__size)#a0">Split_by_size</a>() : <a class="doxy_code" href="$(doxygen_html_classDGD_1_1multifile__log_1_1Split__by__size)#o0">m_vol_size</a>(1024*1024*5) {} <span class="doxy_comment">// 5M per volume</span>
<a name="l00058"></a><a class="doxy_code" href="$(doxygen_html_classDGD_1_1multifile__log_1_1Split__by__size)#a1">00058</a>             <a class="doxy_code" href="$(doxygen_html_classDGD_1_1multifile__log_1_1Split__by__size)#a0">Split_by_size</a>( <span class="doxy_keywordtype">unsigned</span> <span class="doxy_keywordtype">long</span> vol_size ) : <a class="doxy_code" href="$(doxygen_html_classDGD_1_1multifile__log_1_1Split__by__size)#o0">m_vol_size</a>(vol_size) {}
00059 
<a name="l00060"></a><a class="doxy_code" href="$(doxygen_html_classDGD_1_1multifile__log_1_1Split__by__size)#a2">00060</a>             <span class="doxy_keywordtype">bool</span> <a class="doxy_code" href="$(doxygen_html_classDGD_1_1multifile__log_1_1Split__by__size)#a2">operator () </a>( <span class="doxy_keywordtype">unsigned</span> <span class="doxy_keywordtype">long</span> volume,
00061                                <span class="doxy_keywordtype">unsigned</span> <span class="doxy_keywordtype">long</span> line, 
00062                                <span class="doxy_keywordtype">unsigned</span> <span class="doxy_keywordtype">long</span> column,
00063                                <span class="doxy_keywordtype">unsigned</span> <span class="doxy_keywordtype">long</span> bytes )<span class="doxy_keyword"> const </span>{ 
00064                <span class="doxy_keywordflow">return</span> ( bytes &gt;= volume * <a class="doxy_code" href="$(doxygen_html_classDGD_1_1multifile__log_1_1Split__by__size)#o0">m_vol_size</a> ); 
00065             }
00066          <span class="doxy_keyword">private</span>:
<a name="l00067"></a><a class="doxy_code" href="$(doxygen_html_classDGD_1_1multifile__log_1_1Split__by__size)#o0">00067</a>             <span class="doxy_keywordtype">unsigned</span> <span class="doxy_keywordtype">long</span> <a class="doxy_code" href="$(doxygen_html_classDGD_1_1multifile__log_1_1Split__by__size)#o0">m_vol_size</a>;
00068       };
00069 
<a name="l00070"></a><a class="doxy_code" href="$(doxygen_html_classDGD_1_1multifile__log_1_1Split__by__lines)">00070</a>       <span class="doxy_keyword">class </span><a class="doxy_code" href="$(doxygen_html_classDGD_1_1multifile__log_1_1Split__by__lines)">Split_by_lines</a>: <span class="doxy_keyword">public</span> <a class="doxy_code" href="$(doxygen_html_classDGD_1_1multifile__log_1_1Split__criteria)">Split_criteria</a>  {
00071          <span class="doxy_keyword">public</span>:
<a name="l00072"></a><a class="doxy_code" href="$(doxygen_html_classDGD_1_1multifile__log_1_1Split__by__lines)#a0">00072</a>             <a class="doxy_code" href="$(doxygen_html_classDGD_1_1multifile__log_1_1Split__by__lines)#a0">Split_by_lines</a>() : <a class="doxy_code" href="$(doxygen_html_classDGD_1_1multifile__log_1_1Split__by__lines)#o0">m_vol_size</a>(60000) {} <span class="doxy_comment">// ~5M per volume</span>
<a name="l00073"></a><a class="doxy_code" href="$(doxygen_html_classDGD_1_1multifile__log_1_1Split__by__lines)#a1">00073</a>             <a class="doxy_code" href="$(doxygen_html_classDGD_1_1multifile__log_1_1Split__by__lines)#a0">Split_by_lines</a>( <span class="doxy_keywordtype">unsigned</span> <span class="doxy_keywordtype">long</span> vol_size ) : <a class="doxy_code" href="$(doxygen_html_classDGD_1_1multifile__log_1_1Split__by__lines)#o0">m_vol_size</a>(vol_size) {}
<a name="l00074"></a><a class="doxy_code" href="$(doxygen_html_classDGD_1_1multifile__log_1_1Split__by__lines)#a2">00074</a>             <a class="doxy_code" href="$(doxygen_html_classDGD_1_1multifile__log_1_1Split__by__lines)#a0">Split_by_lines</a>( <span class="doxy_keyword">const</span> <a class="doxy_code" href="$(doxygen_html_classDGD_1_1multifile__log_1_1Split__by__lines)">Split_by_lines</a>&amp; peer ) : 
00075                <a class="doxy_code" href="$(doxygen_html_classDGD_1_1multifile__log_1_1Split__by__lines)#o0">m_vol_size</a>( peer.<a class="doxy_code" href="$(doxygen_html_classDGD_1_1multifile__log_1_1Split__by__lines)#o0">m_vol_size</a> ) {}
00076 
<a name="l00077"></a><a class="doxy_code" href="$(doxygen_html_classDGD_1_1multifile__log_1_1Split__by__lines)#a3">00077</a>             <span class="doxy_keywordtype">bool</span> <a class="doxy_code" href="$(doxygen_html_classDGD_1_1multifile__log_1_1Split__by__lines)#a3">operator () </a>( <span class="doxy_keywordtype">unsigned</span> <span class="doxy_keywordtype">long</span> volume,
00078                                <span class="doxy_keywordtype">unsigned</span> <span class="doxy_keywordtype">long</span> line, 
00079                                <span class="doxy_keywordtype">unsigned</span> <span class="doxy_keywordtype">long</span> column,
00080                                <span class="doxy_keywordtype">unsigned</span> <span class="doxy_keywordtype">long</span> bytes )<span class="doxy_keyword"> const </span>{ 
00081                <span class="doxy_keywordflow">return</span> ( line &gt;= volume * <a class="doxy_code" href="$(doxygen_html_classDGD_1_1multifile__log_1_1Split__by__lines)#o0">m_vol_size</a> ); 
00082             }
00083          <span class="doxy_keyword">private</span>:
<a name="l00084"></a><a class="doxy_code" href="$(doxygen_html_classDGD_1_1multifile__log_1_1Split__by__lines)#o0">00084</a>             <span class="doxy_keywordtype">unsigned</span> <span class="doxy_keywordtype">long</span> <a class="doxy_code" href="$(doxygen_html_classDGD_1_1multifile__log_1_1Split__by__lines)#o0">m_vol_size</a>;
00085       };
00086 
00087    <span class="doxy_keyword">public</span>:
00088       <span class="doxy_keyword">static</span> Dont_split <a class="doxy_code" href="$(doxygen_html_classDGD_1_1multifile__log)#p0">dont_split</a>;
00089       <span class="doxy_keyword">static</span> Split_by_size <a class="doxy_code" href="$(doxygen_html_classDGD_1_1multifile__log)#p1">split_by_size</a>;
00090       <span class="doxy_keyword">static</span> Split_by_lines <a class="doxy_code" href="$(doxygen_html_classDGD_1_1multifile__log)#p2">split_by_lines</a>;
00091             
00092    <span class="doxy_keyword">public</span>:
00093       <a class="doxy_code" href="$(doxygen_html_classDGD_1_1multifile__log)#a0">multifile_log</a>( <span class="doxy_keyword">const</span> <span class="doxy_keywordtype">char</span>* name, 
00094                      Split_criteria* criteria = &amp;<a class="doxy_code" href="$(doxygen_html_classDGD_1_1multifile__log)#p1">split_by_size</a> );
00095       <a class="doxy_code" href="$(doxygen_html_classDGD_1_1multifile__log)#a1">~multifile_log</a>();
00096 
00097    <span class="doxy_keyword">private</span>:
00098       <span class="doxy_keywordtype">void</span> <a class="doxy_code" href="$(doxygen_html_classDGD_1_1multifile__log)#c0">operator () </a>( <span class="doxy_keywordtype">unsigned</span> <span class="doxy_keywordtype">long</span> line, 
00099                          <span class="doxy_keywordtype">unsigned</span> <span class="doxy_keywordtype">long</span> column,
00100                          <span class="doxy_keywordtype">unsigned</span> <span class="doxy_keywordtype">long</span> bytes );
00101       std::string <a class="doxy_code" href="$(doxygen_html_classDGD_1_1multifile__log)#c1">real_name</a>() <span class="doxy_keyword">const</span>;
00102       
00103    <span class="doxy_keyword">private</span>:
<a name="l00104"></a><a class="doxy_code" href="$(doxygen_html_classDGD_1_1multifile__log)#o0">00104</a>       std::ofstream <a class="doxy_code" href="$(doxygen_html_classDGD_1_1multifile__log)#o0">m_file</a>;
<a name="l00105"></a><a class="doxy_code" href="$(doxygen_html_classDGD_1_1multifile__log)#o1">00105</a>       std::string   <a class="doxy_code" href="$(doxygen_html_classDGD_1_1multifile__log)#o1">m_name</a>;
<a name="l00106"></a><a class="doxy_code" href="$(doxygen_html_classDGD_1_1multifile__log)#o2">00106</a>       <span class="doxy_keywordtype">unsigned</span> <span class="doxy_keywordtype">int</span>  <a class="doxy_code" href="$(doxygen_html_classDGD_1_1multifile__log)#o2">m_part_count</a>;
<a name="l00107"></a><a class="doxy_code" href="$(doxygen_html_classDGD_1_1multifile__log)#o3">00107</a>       <a class="doxy_code" href="$(doxygen_html_classDGD_1_1multifile__log_1_1Split__criteria)">Split_criteria</a>* <a class="doxy_code" href="$(doxygen_html_classDGD_1_1multifile__log)#o3">m_split</a>;
00108 };
00109 
00110 
00111 }; <span class="doxy_comment">// end of namespace DGD</span>
00112 
00113 <span class="doxy_preprocessor">#endif </span><span class="doxy_comment">/* _dgMultifileLog_h_ */</span>
00114 
00115 <span class="doxy_comment">/* </span>
00116 <span class="doxy_comment"> * Local Variables:</span>
00117 <span class="doxy_comment"> * compile-command: &quot;make dgMultifileLog.obj&quot;</span>
00118 <span class="doxy_comment"> * End:</span>
00119 <span class="doxy_comment"> */</span>
00120 
00121 
</pre></div>
<hr>
<address style="align: right;"><small>Generated on Mon Dec 9 18:29:57 2002 for Depression Glass Debug Library by <a href="http://www.doxygen.org/index.html"> <img align="middle" alt="doxygen" border=0 height=53 src="$(doxygen)" width=110></a>1.2.17 </small></address>
</content>

<content name="doxygen_html_dgMultifileLog_8h" format="text/html">
<wmmeta name="title" value="dgMultifileLog.h File Reference" />
<h1>dgMultifileLog.h File Reference</h1>
<code>#include &lt;iostream&gt;</code>
<br>
<code>#include &lt;fstream&gt;</code>
<br>
<code>#include &lt;string&gt;</code>
<br>
<code>#include &quot;<a class="doxy_el" href="$(doxygen_html_dgFunnel_8h-source)">dgFunnel.h</a>&quot;</code>
<br>
<p> Include dependency graph for dgMultifileLog.h:
<p><center><img alt="Include dependency graph" border=0 src="$(dgMultifileLog_8h__incl)" usemap="#dgMultifileLog.h_map"></center><map name="dgMultifileLog.h_map"><area alt="" coords="116,133,217,152" href="$(doxygen_html_dgChannelBuf_8h)" shape="rect"><area alt="" coords="101,66,176,85" href="$(doxygen_html_dgStream_8h)" shape="rect"><area alt="" coords="137,200,209,218" href="$(doxygen_html_dgFunnel_8h)" shape="rect"></map>
<p> This graph shows which files directly or indirectly include this file:
<p><center><img alt="Included by dependency graph" border=0 src="$(dgMultifileLog_8h__dep__incl)" usemap="#dgMultifileLog.hdep_map"></center><map name="dgMultifileLog.hdep_map"><area alt="" coords="0,0,117,18" href="$(doxygen_html_dgMultifileLog_8cpp)" shape="rect"></map>
<p><a href="$(doxygen_html_dgMultifileLog_8h-source)">Go to the source code of this file.</a>
<h2>Namespaces</h2>
<ul><li>namespace <a class="doxy_el" href="$(doxygen_html_namespaceDGD)">DGD</a></ul>
<hr>
<address style="align: right;"><small>Generated on Mon Dec 9 18:30:01 2002 for Depression Glass Debug Library by <a href="http://www.doxygen.org/index.html"> <img align="middle" alt="doxygen" border=0 height=53 src="$(doxygen)" width=110></a>1.2.17 </small></address>
</content>

<content name="doxygen_html_dgOptionFilter_8cpp" format="text/html">
<wmmeta name="title" value="dgOptionFilter.cpp File Reference" />
<h1>dgOptionFilter.cpp File Reference</h1>
Implementation of <a class="doxy_el" href="$(doxygen_html_classDGD_1_1option__filter)">DGD::option_filter</a>
. <a href="#_details">More...</a>
<p><code>#include &lt;list&gt;</code><br><code>#include &lt;vector&gt;</code><br><code>#include &lt;algorithm&gt;</code><br><code>#include &lt;regular_expression.h&gt;</code><br><code>#include &quot;<a class="doxy_el" href="$(doxygen_html_dgOptionFilter_8h-source)">dgOptionFilter.h</a>&quot;</code><br>
<p> Include dependency graph for dgOptionFilter.cpp:
<p><center><img alt="Include dependency graph" border=0 src="$(dgOptionFilter_8cpp__incl)" usemap="#dgOptionFilter.cpp_map"></center><map name="dgOptionFilter.cpp_map"><area alt="" coords="112,67,213,85" href="$(doxygen_html_dgOptionFilter_8h)" shape="rect"></map>
<h2>Namespaces</h2>
<ul><li>namespace <a class="doxy_el" href="$(doxygen_html_namespaceDGD)">DGD</a></ul>
<hr>
<a name="_details"></a>
<h2>Detailed Description</h2>
 Implementation of <a class="doxy_el" href="$(doxygen_html_classDGD_1_1option__filter)">DGD::option_filter</a>
. <p>
<p><hr><address style="align: right;"><small>Generated on Mon Dec 9 18:30:01 2002 for Depression Glass Debug Library by <a href="http://www.doxygen.org/index.html"> <img align="middle" alt="doxygen" border=0 height=53 src="$(doxygen)" width=110></a>1.2.17 </small></address>
</content>

<content name="doxygen_html_dgOptionFilter_8h-source" format="text/html">
<wmmeta name="title" value="dgOptionFilter.h Source File" />
<h1>dgOptionFilter.h</h1>
<a href="$(doxygen_html_dgOptionFilter_8h)">Go to the documentation of this file.</a>
<div class="doxy_fragment"><pre>00001 <span class="doxy_comment">// -*- c++ -*-</span>
00002 <span class="doxy_comment">//</span>
00003 <span class="doxy_comment">// $Id: dgd\\doc\\html\\Attic\\doxygen_html.wmk,v 1.9 2002/12/09 16:32:20 dimka Exp $</span>
00004 <span class="doxy_comment">//</span>
00005 <span class="doxy_comment">// This program is free software; you can redistribute it and/or modify</span>
00006 <span class="doxy_comment">// it under the terms of the GNU General Public License as published by</span>
00007 <span class="doxy_comment">// the Free Software Foundation; either version 2 of the License, or</span>
00008 <span class="doxy_comment">// (at your option) any later version.</span>
00009 <span class="doxy_comment">//</span>
00010 <span class="doxy_comment">// This program is distributed in the hope that it will be useful,</span>
00011 <span class="doxy_comment">// but WITHOUT ANY WARRANTY; without even the implied warranty of</span>
00012 <span class="doxy_comment">// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the</span>
00013 <span class="doxy_comment">// GNU General Public License for more details.</span>
00014 <span class="doxy_comment">//</span>
00015 <span class="doxy_comment">// You should have received a copy of the GNU General Public License</span>
00016 <span class="doxy_comment">// along with this program; if not, write to the Free Software</span>
00017 <span class="doxy_comment">// Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA</span>
00018 <span class="doxy_comment">//</span>
00019 <span class="doxy_comment">// This file is part of Depression Glass library.</span>
00020 <span class="doxy_comment">//</span>
00021 <span class="doxy_comment">// Copyright (c) 2002. Dimitry Kloper &lt;dimka@cs.technion.ac.il&gt; . </span>
00022 <span class="doxy_comment">//</span>
00023 <span class="doxy_comment">// dgOptionFilter.h -- simple class which can separate command line </span>
00024 <span class="doxy_comment">//                     options into sets</span>
00025 <span class="doxy_comment">//</span>
00026 
00027 <span class="doxy_preprocessor">#ifndef _dgOptionFilter_h_</span>
00028 <span class="doxy_preprocessor"></span><span class="doxy_preprocessor">#define _dgOptionFilter_h_</span>
00029 <span class="doxy_preprocessor"></span><span class="doxy_comment"></span>
00030 <span class="doxy_comment">/**</span>
00031 <span class="doxy_comment"> * @file dgOptionFilter.h</span>
00032 <span class="doxy_comment"> * Declaration of DGD::option_filter.</span>
00033 <span class="doxy_comment"> */</span>
00034 
00035 <span class="doxy_preprocessor">#include &lt;vector&gt;</span>
00036 
00037 <span class="doxy_keyword">namespace </span>DGD {
00038 <span class="doxy_comment"></span>
00039 <span class="doxy_comment">/**</span>
00040 <span class="doxy_comment"> * Command line options set filter. This class is designed to separate</span>
00041 <span class="doxy_comment"> * a set of command line options as received by @code main(int argc,</span>
00042 <span class="doxy_comment"> * char** argv) @endcode into subsets. This can be used by application</span>
00043 <span class="doxy_comment"> * using DGD::Debug for separating debug options from the</span>
00044 <span class="doxy_comment"> * application-specific options. </span>
00045 <span class="doxy_comment"> * Terminology:</span>
00046 <span class="doxy_comment"> * &lt;dl&gt;</span>
00047 <span class="doxy_comment"> * &lt;dt&gt; Options set</span>
00048 <span class="doxy_comment"> * &lt;dd&gt; In the context of this class a pair of &lt;int,char**&gt;</span>
00049 <span class="doxy_comment"> * representing a set of option strings.</span>
00050 <span class="doxy_comment"> * &lt;dt&gt; Option set filter</span>
00051 <span class="doxy_comment"> * &lt;dd&gt; A regular expression which is applied on the given option set</span>
00052 <span class="doxy_comment"> * (usually full option set received by main()). If the option matches</span>
00053 <span class="doxy_comment"> * the filter it is copied to the option set associated with that filter.</span>
00054 <span class="doxy_comment"> * &lt;/dl&gt;</span>
00055 <span class="doxy_comment"> * @see DGD::Debug</span>
00056 <span class="doxy_comment"> */</span>
<a name="l00057"></a><a class="doxy_code" href="$(doxygen_html_classDGD_1_1option__filter)">00057</a> <span class="doxy_keyword">class </span><a class="doxy_code" href="$(doxygen_html_classDGD_1_1option__filter)">option_filter</a> {
00058    <span class="doxy_keyword">public</span>:
<a name="l00059"></a><a class="doxy_code" href="$(doxygen_html_classDGD_1_1option__filter_1_1option__set__type)">00059</a>       <span class="doxy_keyword">class </span><a class="doxy_code" href="$(doxygen_html_classDGD_1_1option__filter_1_1option__set__type)">option_set_type</a> {
00060          <span class="doxy_keyword">public</span>:
00061 
<a name="l00062"></a><a class="doxy_code" href="$(doxygen_html_classDGD_1_1option__filter_1_1option__set__type)#m0">00062</a>             <span class="doxy_keywordtype">int</span> <a class="doxy_code" href="$(doxygen_html_classDGD_1_1option__filter_1_1option__set__type)#m0">argc</a>;
<a name="l00063"></a><a class="doxy_code" href="$(doxygen_html_classDGD_1_1option__filter_1_1option__set__type)#m1">00063</a>             <span class="doxy_keywordtype">char</span>** <a class="doxy_code" href="$(doxygen_html_classDGD_1_1option__filter_1_1option__set__type)#m1">argv</a>;
00064 
<a name="l00065"></a><a class="doxy_code" href="$(doxygen_html_classDGD_1_1option__filter_1_1option__set__type)#a0">00065</a>             <a class="doxy_code" href="$(doxygen_html_classDGD_1_1option__filter_1_1option__set__type)#a0">option_set_type</a>() : <a class="doxy_code" href="$(doxygen_html_classDGD_1_1option__filter_1_1option__set__type)#m0">argc</a>(0), <a class="doxy_code" href="$(doxygen_html_classDGD_1_1option__filter_1_1option__set__type)#m1">argv</a>(NULL) {}
00066             
<a name="l00067"></a><a class="doxy_code" href="$(doxygen_html_classDGD_1_1option__filter_1_1option__set__type)#a1">00067</a>             <span class="doxy_keywordtype">void</span> <a class="doxy_code" href="$(doxygen_html_classDGD_1_1option__filter_1_1option__set__type)#a1">allocate</a>( <span class="doxy_keywordtype">int</span> n ) {
00068                <a class="doxy_code" href="$(doxygen_html_classDGD_1_1option__filter_1_1option__set__type)#m0">argc</a> = n;
00069                <a class="doxy_code" href="$(doxygen_html_classDGD_1_1option__filter_1_1option__set__type)#m1">argv</a> = <span class="doxy_keyword">new</span> <span class="doxy_keywordtype">char</span>*[ <a class="doxy_code" href="$(doxygen_html_classDGD_1_1option__filter_1_1option__set__type)#m0">argc</a> ];
00070                std::fill( <a class="doxy_code" href="$(doxygen_html_classDGD_1_1option__filter_1_1option__set__type)#m1">argv</a>, <a class="doxy_code" href="$(doxygen_html_classDGD_1_1option__filter_1_1option__set__type)#m1">argv</a> + <a class="doxy_code" href="$(doxygen_html_classDGD_1_1option__filter_1_1option__set__type)#m0">argc</a>, (<span class="doxy_keywordtype">char</span>*)NULL );
00071             }
00072 
<a name="l00073"></a><a class="doxy_code" href="$(doxygen_html_classDGD_1_1option__filter_1_1option__set__type)#a2">00073</a>             <a class="doxy_code" href="$(doxygen_html_classDGD_1_1option__filter_1_1option__set__type)#a2">~option_set_type</a>() {
00074                <span class="doxy_keywordflow">if</span>( argv ) <span class="doxy_keyword">delete</span> [] <a class="doxy_code" href="$(doxygen_html_classDGD_1_1option__filter_1_1option__set__type)#m1">argv</a>;
00075             }
00076       };
00077             
<a name="l00078"></a><a class="doxy_code" href="$(doxygen_html_classDGD_1_1option__filter)#s0">00078</a>       <span class="doxy_keyword">typedef</span> std::vector&lt;option_set_type&gt; <a class="doxy_code" href="$(doxygen_html_classDGD_1_1option__filter)#s0">option_set_container</a>;
00079 <span class="doxy_comment"></span>
00080 <span class="doxy_comment">      /**</span>
00081 <span class="doxy_comment">       * This operator takes &lt;argc,argv&gt; as received by main function,</span>
00082 <span class="doxy_comment">       * then it takes a set of regular expressions defined by &lt;filtc, filtv&gt;</span>
00083 <span class="doxy_comment">       * and returns a set (vector) of option subsets. First set is generated</span>
00084 <span class="doxy_comment">       * by the first filter, second set by the second filter and so on, </span>
00085 <span class="doxy_comment">       * the last set contains options which were not selected by any filter.</span>
00086 <span class="doxy_comment">       * so the following is always true result-&gt;size() == filtc + 1</span>
00087 <span class="doxy_comment">       * @see DGD::Debug</span>
00088 <span class="doxy_comment">       */</span>
00089       <a class="doxy_code" href="$(doxygen_html_classDGD_1_1option__filter)#s0">option_set_container</a>* <a class="doxy_code" href="$(doxygen_html_classDGD_1_1option__filter)#a0">operator () </a>( <span class="doxy_keywordtype">int</span> argc, <span class="doxy_keywordtype">char</span>** argv,
00090                                           <span class="doxy_keywordtype">int</span> filtc, <span class="doxy_keywordtype">char</span>** filtv );
00091 };
00092 
00093 }; <span class="doxy_comment">// end of namespace DGD</span>
00094 
00095 <span class="doxy_preprocessor">#endif </span><span class="doxy_comment">/* _dgOptionFilter_h_ */</span>
00096 
00097 <span class="doxy_comment">/* </span>
00098 <span class="doxy_comment"> * Local Variables:</span>
00099 <span class="doxy_comment"> * compile-command: &quot;make dgOptionFilter.obj&quot;</span>
00100 <span class="doxy_comment"> * End:</span>
00101 <span class="doxy_comment"> */</span>
00102 
00103 
</pre></div>
<hr>
<address style="align: right;"><small>Generated on Mon Dec 9 18:29:57 2002 for Depression Glass Debug Library by <a href="http://www.doxygen.org/index.html"> <img align="middle" alt="doxygen" border=0 height=53 src="$(doxygen)" width=110></a>1.2.17 </small></address>
</content>

<content name="doxygen_html_dgOptionFilter_8h" format="text/html">
<wmmeta name="title" value="dgOptionFilter.h File Reference" />
<h1>dgOptionFilter.h File Reference</h1>
Declaration of <a class="doxy_el" href="$(doxygen_html_classDGD_1_1option__filter)">DGD::option_filter</a>
. <a href="#_details">More...</a>
<p><code>#include &lt;vector&gt;</code><br>
<p> Include dependency graph for dgOptionFilter.h:
<p><center><img alt="Include dependency graph" border=0 src="$(dgOptionFilter_8h__incl)" usemap="#dgOptionFilter.h_map"></center>
<p> This graph shows which files directly or indirectly include this file:
<p><center><img alt="Included by dependency graph" border=0 src="$(dgOptionFilter_8h__dep__incl)" usemap="#dgOptionFilter.hdep_map"></center><map name="dgOptionFilter.hdep_map"><area alt="" coords="0,0,115,18" href="$(doxygen_html_dgOptionFilter_8cpp)" shape="rect"></map>
<p><a href="$(doxygen_html_dgOptionFilter_8h-source)">Go to the source code of this file.</a>
<h2>Namespaces</h2>
<ul><li>namespace <a class="doxy_el" href="$(doxygen_html_namespaceDGD)">DGD</a></ul>
<hr>
<a name="_details"></a>
<h2>Detailed Description</h2>
 Declaration of <a class="doxy_el" href="$(doxygen_html_classDGD_1_1option__filter)">DGD::option_filter</a>
. <p>
<p><hr><address style="align: right;"><small>Generated on Mon Dec 9 18:30:02 2002 for Depression Glass Debug Library by <a href="http://www.doxygen.org/index.html"> <img align="middle" alt="doxygen" border=0 height=53 src="$(doxygen)" width=110></a>1.2.17 </small></address>
</content>

<content name="doxygen_html_dgStream_8cpp" format="text/html">
<wmmeta name="title" value="dgStream.cpp File Reference" />
<h1>dgStream.cpp File Reference</h1>
<code>#include &quot;<a class="doxy_el" href="$(doxygen_html_dgStream_8h-source)">dgStream.h</a>&quot;</code>
<br>
<p> Include dependency graph for dgStream.cpp:
<p><center><img alt="Include dependency graph" border=0 src="$(dgStream_8cpp__incl)" usemap="#dgStream.cpp_map"></center><map name="dgStream.cpp_map"><area alt="" coords="48,67,123,85" href="$(doxygen_html_dgStream_8h)" shape="rect"></map>
<h2>Namespaces</h2>
<ul><li>namespace <a class="doxy_el" href="$(doxygen_html_namespaceDGD)">DGD</a></ul>
<hr>
<address style="align: right;"><small>Generated on Fri Nov 1 23:27:56 2002 for Depression Glass Debug Library by <a href="http://www.doxygen.org/index.html"> <img align="middle" alt="doxygen" border=0 height=53 src="$(doxygen)" width=110></a>1.2.17 </small></address>
</content>

<content name="doxygen_html_dgStream_8h-source" format="text/html">
<wmmeta name="title" value="dgStream.h Source File" />
<h1>dgStream.h</h1>
<a href="$(doxygen_html_dgStream_8h)">Go to the documentation of this file.</a>
<div class="doxy_fragment"><pre>00001 <span class="doxy_comment">// -*- c++ -*-</span>
00002 <span class="doxy_comment">//</span>
00003 <span class="doxy_comment">// $Id: dgd\\doc\\html\\Attic\\doxygen_html.wmk,v 1.9 2002/12/09 16:32:20 dimka Exp $</span>
00004 <span class="doxy_comment">//</span>
00005 <span class="doxy_comment">// This program is free software; you can redistribute it and/or modify</span>
00006 <span class="doxy_comment">// it under the terms of the GNU General Public License as published by</span>
00007 <span class="doxy_comment">// the Free Software Foundation; either version 2 of the License, or</span>
00008 <span class="doxy_comment">// (at your option) any later version.</span>
00009 <span class="doxy_comment">//</span>
00010 <span class="doxy_comment">// This program is distributed in the hope that it will be useful,</span>
00011 <span class="doxy_comment">// but WITHOUT ANY WARRANTY; without even the implied warranty of</span>
00012 <span class="doxy_comment">// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the</span>
00013 <span class="doxy_comment">// GNU General Public License for more details.</span>
00014 <span class="doxy_comment">//</span>
00015 <span class="doxy_comment">// You should have received a copy of the GNU General Public License</span>
00016 <span class="doxy_comment">// along with this program; if not, write to the Free Software</span>
00017 <span class="doxy_comment">// Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA</span>
00018 <span class="doxy_comment">//</span>
00019 <span class="doxy_comment">// This file is part of Depression Glass library.</span>
00020 <span class="doxy_comment">//</span>
00021 <span class="doxy_comment">// Copyright (c) 2002. Dimitry Kloper &lt;dimka@cs.technion.ac.il&gt; . </span>
00022 <span class="doxy_comment">//</span>
00023 <span class="doxy_comment">// dgStream.h -- definition of dgstream</span>
00024 <span class="doxy_comment">//</span>
00025 
00026 <span class="doxy_preprocessor">#ifndef _dgStream_h_</span>
00027 <span class="doxy_preprocessor"></span><span class="doxy_preprocessor">#define _dgStream_h_</span>
00028 <span class="doxy_preprocessor"></span><span class="doxy_comment"></span>
00029 <span class="doxy_comment">/**</span>
00030 <span class="doxy_comment"> * @file dgStream.h</span>
00031 <span class="doxy_comment"> * Declaration of DGD::stream</span>
00032 <span class="doxy_comment"> */</span>
00033 
00034 <span class="doxy_preprocessor">#include &lt;iostream&gt;</span>
00035 <span class="doxy_preprocessor">#include &lt;boost/smart_ptr.hpp&gt;</span>
00036 
00037 <span class="doxy_keyword">namespace </span>DGD {
00038 <span class="doxy_comment"></span>
00039 <span class="doxy_comment">/**</span>
00040 <span class="doxy_comment"> * Right now DGD::stream is a simple smart pointer to any std::ostream</span>
00041 <span class="doxy_comment"> * or its children. </span>
00042 <span class="doxy_comment"> * @see DGD::debug</span>
00043 <span class="doxy_comment"> * @see DGD::assoc()</span>
00044 <span class="doxy_comment"> */</span>
<a name="l00045"></a><a class="doxy_code" href="$(doxygen_html_namespaceDGD)#a5">00045</a> <span class="doxy_keyword">typedef</span> boost::shared_ptr&lt; std::ostream &gt; <a class="doxy_code" href="$(doxygen_html_namespaceDGD)#a5">stream</a>;
00046 
00047 }; <span class="doxy_comment">// end of namespace DGD</span>
00048 
00049 <span class="doxy_preprocessor">#endif </span><span class="doxy_comment">/* _dgStream_h_ */</span>
00050 
00051 <span class="doxy_comment">/* </span>
00052 <span class="doxy_comment"> * Local Variables:</span>
00053 <span class="doxy_comment"> * compile-command: &quot;make dgStream.obj&quot;</span>
00054 <span class="doxy_comment"> * End:</span>
00055 <span class="doxy_comment"> */</span>
00056 
00057 
00058 
</pre></div>
<hr>
<address style="align: right;"><small>Generated on Mon Dec 9 18:29:57 2002 for Depression Glass Debug Library by <a href="http://www.doxygen.org/index.html"> <img align="middle" alt="doxygen" border=0 height=53 src="$(doxygen)" width=110></a>1.2.17 </small></address>
</content>

<content name="doxygen_html_dgStream_8h" format="text/html">
<wmmeta name="title" value="dgStream.h File Reference" />
<h1>dgStream.h File Reference</h1>
Declaration of <a class="doxy_el" href="$(doxygen_html_namespaceDGD)#a5">DGD::stream</a>
. <a href="#_details">More...</a>
<p><code>#include &lt;iostream&gt;</code><br><code>#include &lt;boost/smart_ptr.hpp&gt;</code><br>
<p> Include dependency graph for dgStream.h:
<p><center><img alt="Include dependency graph" border=0 src="$(dgStream_8h__incl)" usemap="#dgStream.h_map"></center>
<p> This graph shows which files directly or indirectly include this file:
<p><center><img alt="Included by dependency graph" border=0 src="$(dgStream_8h__dep__incl)" usemap="#dgStream.hdep_map"></center><map name="dgStream.hdep_map"><area alt="" coords="241,267,343,285" href="$(doxygen_html_dgChannelBuf_8h)" shape="rect"><area alt="" coords="252,200,332,219" href="$(doxygen_html_dgChannel_8h)" shape="rect"><area alt="" coords="251,67,323,85" href="$(doxygen_html_dgDebug_8h)" shape="rect"><area alt="" coords="257,133,372,152" href="$(doxygen_html_dgChannelManip_8h)" shape="rect"><area alt="" coords="111,133,183,152" href="$(doxygen_html_dgFunnel_8h)" shape="rect"><area alt="" coords="301,0,395,19" href="$(doxygen_html_dgChannel_8cpp)" shape="rect"><area alt="" coords="0,67,85,85" href="$(doxygen_html_dgFunnel_8cpp)" shape="rect"><area alt="" coords="109,67,213,85" href="$(doxygen_html_dgMultifileLog_8h)" shape="rect"><area alt="" coords="356,200,468,219" href="$(doxygen_html_dgChannelBuf_8cpp)" shape="rect"></map>
<p><a href="$(doxygen_html_dgStream_8h-source)">Go to the source code of this file.</a>
<h2>Namespaces</h2>
<ul><li>namespace <a class="doxy_el" href="$(doxygen_html_namespaceDGD)">DGD</a></ul>
<hr>
<a name="_details"></a>
<h2>Detailed Description</h2>
 Declaration of <a class="doxy_el" href="$(doxygen_html_namespaceDGD)#a5">DGD::stream</a>
. <p>
<p><hr><address style="align: right;"><small>Generated on Mon Dec 9 18:30:02 2002 for Depression Glass Debug Library by <a href="http://www.doxygen.org/index.html"> <img align="middle" alt="doxygen" border=0 height=53 src="$(doxygen)" width=110></a>1.2.17 </small></address>
</content>

<content name="doxygen_html_example" format="text/html">
<wmmeta name="title" value="" />
<div class="doxy_fragment"><pre><span class="doxy_comment">// format output with channelbuf</span>

<span class="doxy_preprocessor">#include &lt;<a class="doxy_code" href="$(doxygen_html_dgChannelBuf_8h)">dgChannelBuf.h</a>&gt;</span>
<span class="doxy_preprocessor">#include &lt;<a class="doxy_code" href="$(doxygen_html_dgStream_8h)">dgStream.h</a>&gt;</span>

main( <span class="doxy_keywordtype">int</span> argc, <span class="doxy_keywordtype">char</span>** argv ) {
   <a class="doxy_code" href="$(doxygen_html_classDGD_1_1channelbuf)">DGD::channelbuf</a> formatter;

   formatter.pubsetbuf( NULL, 100 );
   formatter.<a class="doxy_code" href="$(doxygen_html_classDGD_1_1channelbuf)#a2">assoc</a>( &amp;std::cout );

   std::ostream formatting_stream( &amp;formatter );

   formatting_stream &lt;&lt; <span class="doxy_stringliteral">&quot;Hello! This is actally very very very &quot;</span> 
                     &lt;&lt; <span class="doxy_stringliteral">&quot;very very very very very very very very &quot;</span> 
                     &lt;&lt; <span class="doxy_stringliteral">&quot;very very very very very very very long line!&quot;</span> 
                     &lt;&lt; std::endl;
   <span class="doxy_keywordflow">return</span> 0;
}
</pre></div>
 Our main function starts like this: <div class="doxy_fragment"><pre>    main( <span class="doxy_keywordtype">int</span> argc, <span class="doxy_keywordtype">char</span>** argv ) {
</pre></div>
 First we create a object <code>t</code>
 of the Test class. <div class="doxy_fragment"><pre>       <a class="doxy_code" href="$(doxygen_html_classDGD_1_1channelbuf)">DGD::channelbuf</a> formatter;
</pre></div>
 Then we call the example member function <div class="doxy_fragment"><pre>       formatter.pubsetbuf( NULL, 100 );
</pre></div>
 After that our little test routine ends. <div class="doxy_fragment"><pre></pre></div>
<hr>
<address style="align: right;"><small>Generated on Thu Nov 21 10:20:55 2002 for Depression Glass Debug Library by <a href="http://www.doxygen.org/index.html"> <img align="middle" alt="doxygen" border=0 height=53 src="$(doxygen)" width=110></a>1.2.17 </small></address>
</content>

<content name="doxygen_html_files" format="text/html">
<wmmeta name="title" value="File Index" />
<h1>Depression Glass Debug Library File List</h1>
Here is a list of all files with brief descriptions:<table><tr><td class="doxy_indexkey"><a class="doxy_el" href="$(doxygen_html_dgChannel_8cpp)">dgChannel.cpp</a></td><td class="doxy_indexvalue">Implementation of <a class="doxy_el" href="$(doxygen_html_classDGD_1_1channel)">DGD::channel</a></td></tr><tr><td class="doxy_indexkey"><a class="doxy_el" href="$(doxygen_html_dgChannel_8h)">dgChannel.h</a> <a href="$(doxygen_html_dgChannel_8h-source)">[code]</a></td><td class="doxy_indexvalue">Declaration of <a class="doxy_el" href="$(doxygen_html_classDGD_1_1channel)">DGD::channel</a></td></tr><tr><td class="doxy_indexkey"><a class="doxy_el" href="$(doxygen_html_dgChannelBuf_8cpp)">dgChannelBuf.cpp</a></td><td class="doxy_indexvalue">Implementation of <a class="doxy_el" href="$(doxygen_html_classDGD_1_1channelbuf)">DGD::channelbuf</a></td></tr><tr><td class="doxy_indexkey"><a class="doxy_el" href="$(doxygen_html_dgChannelBuf_8h)">dgChannelBuf.h</a> <a href="$(doxygen_html_dgChannelBuf_8h-source)">[code]</a></td><td class="doxy_indexvalue">Declaration of <a class="doxy_el" href="$(doxygen_html_classDGD_1_1channelbuf)">DGD::channelbuf</a></td></tr><tr><td class="doxy_indexkey"><a class="doxy_el" href="$(doxygen_html_dgChannelManip_8h)">dgChannelManip.h</a> <a href="$(doxygen_html_dgChannelManip_8h-source)">[code]</a></td><td class="doxy_indexvalue">Manipulators for <a class="doxy_el" href="$(doxygen_html_classDGD_1_1channel)">DGD::channel</a></td></tr><tr><td class="doxy_indexkey"><a class="doxy_el" href="$(doxygen_html_dgConfig_8h)">dgConfig.h</a> <a href="$(doxygen_html_dgConfig_8h-source)">[code]</a></td><td class="doxy_indexvalue"></td></tr><tr><td class="doxy_indexkey"><a class="doxy_el" href="$(doxygen_html_dgDebug_8cpp)">dgDebug.cpp</a></td><td class="doxy_indexvalue">Implementation of <a class="doxy_el" href="$(doxygen_html_classDGD_1_1Debug)">DGD::Debug</a></td></tr><tr><td class="doxy_indexkey"><a class="doxy_el" href="$(doxygen_html_dgDebug_8h)">dgDebug.h</a> <a href="$(doxygen_html_dgDebug_8h-source)">[code]</a></td><td class="doxy_indexvalue">Declaration of <a class="doxy_el" href="$(doxygen_html_classDGD_1_1Debug)">DGD::Debug</a></td></tr><tr><td class="doxy_indexkey"><a class="doxy_el" href="$(doxygen_html_dgDebugExtra_8h)">dgDebugExtra.h</a> <a href="$(doxygen_html_dgDebugExtra_8h-source)">[code]</a></td><td class="doxy_indexvalue">Set of useful macros for use with <a class="doxy_el" href="$(doxygen_html_namespaceDGD)">DGD</a></td></tr><tr><td class="doxy_indexkey"><a class="doxy_el" href="$(doxygen_html_dgDebugStd_8h)">dgDebugStd.h</a> <a href="$(doxygen_html_dgDebugStd_8h-source)">[code]</a></td><td class="doxy_indexvalue">Set of output operators for frequently used STL and standard types</td></tr><tr><td class="doxy_indexkey"><a class="doxy_el" href="$(doxygen_html_dgFunnel_8cpp)">dgFunnel.cpp</a></td><td class="doxy_indexvalue"></td></tr><tr><td class="doxy_indexkey"><a class="doxy_el" href="$(doxygen_html_dgFunnel_8h)">dgFunnel.h</a> <a href="$(doxygen_html_dgFunnel_8h-source)">[code]</a></td><td class="doxy_indexvalue"></td></tr><tr><td class="doxy_indexkey"><a class="doxy_el" href="$(doxygen_html_dgMultifileLog_8cpp)">dgMultifileLog.cpp</a></td><td class="doxy_indexvalue"></td></tr><tr><td class="doxy_indexkey"><a class="doxy_el" href="$(doxygen_html_dgMultifileLog_8h)">dgMultifileLog.h</a> <a href="$(doxygen_html_dgMultifileLog_8h-source)">[code]</a></td><td class="doxy_indexvalue"></td></tr><tr><td class="doxy_indexkey"><a class="doxy_el" href="$(doxygen_html_dgOptionFilter_8cpp)">dgOptionFilter.cpp</a></td><td class="doxy_indexvalue">Implementation of <a class="doxy_el" href="$(doxygen_html_classDGD_1_1option__filter)">DGD::option_filter</a></td></tr><tr><td class="doxy_indexkey"><a class="doxy_el" href="$(doxygen_html_dgOptionFilter_8h)">dgOptionFilter.h</a> <a href="$(doxygen_html_dgOptionFilter_8h-source)">[code]</a></td><td class="doxy_indexvalue">Declaration of <a class="doxy_el" href="$(doxygen_html_classDGD_1_1option__filter)">DGD::option_filter</a></td></tr><tr><td class="doxy_indexkey"><a class="doxy_el" href="$(doxygen_html_dgStream_8h)">dgStream.h</a> <a href="$(doxygen_html_dgStream_8h-source)">[code]</a></td><td class="doxy_indexvalue">Declaration of <a class="doxy_el" href="$(doxygen_html_namespaceDGD)#a5">DGD::stream</a></td></tr></table>
<hr>
<address style="align: right;"><small>Generated on Mon Dec 9 18:29:57 2002 for Depression Glass Debug Library by <a href="http://www.doxygen.org/index.html"> <img align="middle" alt="doxygen" border=0 height=53 src="$(doxygen)" width=110></a>1.2.17 </small></address>
</content>

<content name="doxygen_html_functions" format="text/html">
<wmmeta name="title" value="Compound Member Index" />
<h1>Depression Glass Debug Library Compound Members</h1>
<center><a href="#index_a">a</a>&nbsp;|&nbsp;<a href="#index_b">b</a>&nbsp;|&nbsp;<a href="#index_c">c</a>&nbsp;|&nbsp;<a href="#index_d">d</a>&nbsp;|&nbsp;<a href="#index_f">f</a>&nbsp;|&nbsp;<a href="#index_h">h</a>&nbsp;|&nbsp;<a href="#index_i">i</a>&nbsp;|&nbsp;<a href="#index_l">l</a>&nbsp;|&nbsp;<a href="#index_m">m</a>&nbsp;|&nbsp;<a href="#index_n">n</a>&nbsp;|&nbsp;<a href="#index_o">o</a>&nbsp;|&nbsp;<a href="#index_p">p</a>&nbsp;|&nbsp;<a href="#index_r">r</a>&nbsp;|&nbsp;<a href="#index_s">s</a>&nbsp;|&nbsp;<a href="#index_w">w</a>&nbsp;|&nbsp;<a href="#index_~">~</a></center>
<p> Here is a list of all class members with links to the class documentation for each member:
<h3><a name="index_a">- a -</a></h3>
<ul><li>allocate() : <a class="doxy_el" href="$(doxygen_html_classDGD_1_1option__filter_1_1option__set__type)#a1">DGD::option_filter::option_set_type</a><li>append_file() : <a class="doxy_el" href="$(doxygen_html_classDGD_1_1Debug)#a4">DGD::Debug</a><li>apply_options() : <a class="doxy_el" href="$(doxygen_html_classDGD_1_1Debug)#b0">DGD::Debug</a><li>argc : <a class="doxy_el" href="$(doxygen_html_classDGD_1_1option__filter_1_1option__set__type)#m0">DGD::option_filter::option_set_type</a><li>argv : <a class="doxy_el" href="$(doxygen_html_classDGD_1_1option__filter_1_1option__set__type)#m1">DGD::option_filter::option_set_type</a><li>assoc() : <a class="doxy_el" href="$(doxygen_html_classDGD_1_1funnelbuf)#c1">DGD::funnelbuf</a>, <a class="doxy_el" href="$(doxygen_html_classDGD_1_1channelbuf)#a2">DGD::channelbuf</a><li>Assoc_list : <a class="doxy_el" href="$(doxygen_html_classDGD_1_1channelbuf)#t0">DGD::channelbuf</a></ul>
<h3><a name="index_b">- b -</a></h3>
<ul><li>bad_params() : <a class="doxy_el" href="$(doxygen_html_classDGD_1_1bad__params)#a1">DGD::bad_params</a><li>bytes_written() : <a class="doxy_el" href="$(doxygen_html_classDGD_1_1channelbuf)#a24">DGD::channelbuf</a></ul>
<h3><a name="index_c">- c -</a></h3>
<ul><li>callback() : <a class="doxy_el" href="$(doxygen_html_classDGD_1_1funnelbuf)#c3">DGD::funnelbuf</a><li>channel() : <a class="doxy_el" href="$(doxygen_html_classDGD_1_1channel)#a0">DGD::channel</a><li>Channel_iterator : <a class="doxy_el" href="$(doxygen_html_classDGD_1_1Debug)#t1">DGD::Debug</a><li>Channel_list : <a class="doxy_el" href="$(doxygen_html_classDGD_1_1Debug)#t0">DGD::Debug</a><li>channel_manip() : <a class="doxy_el" href="$(doxygen_html_classDGD_1_1channel__manip)#a0">DGD::channel_manip&lt; Arg_type &gt;</a><li>channel_manip_nop() : <a class="doxy_el" href="$(doxygen_html_classDGD_1_1channel__manip__nop)#a0">DGD::channel_manip_nop</a><li>channel_manip_void() : <a class="doxy_el" href="$(doxygen_html_classDGD_1_1channel__manip__void)#a0">DGD::channel_manip_void</a><li>channel_ptr : <a class="doxy_el" href="$(doxygen_html_classDGD_1_1Debug)#s2">DGD::Debug</a><li>channel_ref : <a class="doxy_el" href="$(doxygen_html_classDGD_1_1Debug)#s0">DGD::Debug</a><li>channelbuf() : <a class="doxy_el" href="$(doxygen_html_classDGD_1_1channelbuf)#a0">DGD::channelbuf</a><li>close() : <a class="doxy_el" href="$(doxygen_html_classDGD_1_1channel)#a2">DGD::channel</a><li>column() : <a class="doxy_el" href="$(doxygen_html_classDGD_1_1channelbuf)#a6">DGD::channelbuf</a><li>create_channel() : <a class="doxy_el" href="$(doxygen_html_classDGD_1_1Debug)#a6">DGD::Debug</a><li>create_factory() : <a class="doxy_el" href="$(doxygen_html_classDGD_1_1Debug)#d1">DGD::Debug</a><li>create_file() : <a class="doxy_el" href="$(doxygen_html_classDGD_1_1Debug)#a3">DGD::Debug</a><li>current() : <a class="doxy_el" href="$(doxygen_html_classDGD_1_1Debug)#a10">DGD::Debug</a></ul>
<h3><a name="index_d">- d -</a></h3>
<ul><li>dassoc() : <a class="doxy_el" href="$(doxygen_html_classDGD_1_1channelbuf)#a4">DGD::channelbuf</a><li>Debug() : <a class="doxy_el" href="$(doxygen_html_classDGD_1_1Debug)#a0">DGD::Debug</a><li>debug_factory : <a class="doxy_el" href="$(doxygen_html_classDGD_1_1Debug)#p0">DGD::Debug</a><li>debug_factory_ref : <a class="doxy_el" href="$(doxygen_html_classDGD_1_1Debug)#s1">DGD::Debug</a><li>decr_indent() : <a class="doxy_el" href="$(doxygen_html_classDGD_1_1channelbuf)#a10">DGD::channelbuf</a>, <a class="doxy_el" href="$(doxygen_html_classDGD_1_1channel)#a11">DGD::channel</a><li>DefaultBufferSize : <a class="doxy_el" href="$(doxygen_html_classDGD_1_1channelbuf)#s6s2">DGD::channelbuf</a><li>DefaultIndentStep : <a class="doxy_el" href="$(doxygen_html_classDGD_1_1channelbuf)#s6s5">DGD::channelbuf</a><li>DefaultMaxWidth : <a class="doxy_el" href="$(doxygen_html_classDGD_1_1channelbuf)#s6s3">DGD::channelbuf</a><li>DefaultMinWidth : <a class="doxy_el" href="$(doxygen_html_classDGD_1_1channelbuf)#s6s4">DGD::channelbuf</a><li>DefaultValues : <a class="doxy_el" href="$(doxygen_html_classDGD_1_1channelbuf)#s6">DGD::channelbuf</a><li>dgd_reference() : <a class="doxy_el" href="$(doxygen_html_structDGD_1_1dgd__reference)#a2">DGD::dgd_reference&lt; T &gt;</a><li>dont_split : <a class="doxy_el" href="$(doxygen_html_classDGD_1_1multifile__log)#p0">DGD::multifile_log</a></ul>
<h3><a name="index_f">- f -</a></h3>
<ul><li>factory() : <a class="doxy_el" href="$(doxygen_html_classDGD_1_1Debug)#d0">DGD::Debug</a><li>File_list : <a class="doxy_el" href="$(doxygen_html_classDGD_1_1Debug)#t2">DGD::Debug</a><li>find_one_of() : <a class="doxy_el" href="$(doxygen_html_classDGD_1_1channelbuf)#b3">DGD::channelbuf</a><li>funnel : <a class="doxy_el" href="$(doxygen_html_classDGD_1_1funnel)#a0">DGD::funnel</a>, <a class="doxy_el" href="$(doxygen_html_classDGD_1_1funnelbuf)#l0">DGD::funnelbuf</a><li>funnelbuf() : <a class="doxy_el" href="$(doxygen_html_classDGD_1_1funnelbuf)#a0">DGD::funnelbuf</a></ul>
<h3><a name="index_h">- h -</a></h3>
<ul><li>header() : <a class="doxy_el" href="$(doxygen_html_classDGD_1_1funnel)#a2">DGD::funnel</a>, <a class="doxy_el" href="$(doxygen_html_classDGD_1_1channel)#a24">DGD::channel</a></ul>
<h3><a name="index_i">- i -</a></h3>
<ul><li>incr_indent() : <a class="doxy_el" href="$(doxygen_html_classDGD_1_1channelbuf)#a9">DGD::channelbuf</a>, <a class="doxy_el" href="$(doxygen_html_classDGD_1_1channel)#a10">DGD::channel</a><li>indent() : <a class="doxy_el" href="$(doxygen_html_classDGD_1_1channelbuf)#a12">DGD::channelbuf</a>, <a class="doxy_el" href="$(doxygen_html_classDGD_1_1channel)#a13">DGD::channel</a><li>indent_step() : <a class="doxy_el" href="$(doxygen_html_classDGD_1_1channelbuf)#a8">DGD::channelbuf</a>, <a class="doxy_el" href="$(doxygen_html_classDGD_1_1channel)#a9">DGD::channel</a><li>is_dos_eol() : <a class="doxy_el" href="$(doxygen_html_classDGD_1_1channelbuf)#b4">DGD::channelbuf</a><li>is_open() : <a class="doxy_el" href="$(doxygen_html_classDGD_1_1channel)#a3">DGD::channel</a></ul>
<h3><a name="index_l">- l -</a></h3>
<ul><li>line() : <a class="doxy_el" href="$(doxygen_html_classDGD_1_1channelbuf)#a5">DGD::channelbuf</a></ul>
<h3><a name="index_m">- m -</a></h3>
<ul><li>m_args_info : <a class="doxy_el" href="$(doxygen_html_classDGD_1_1Debug)#o4">DGD::Debug</a><li>m_argument : <a class="doxy_el" href="$(doxygen_html_classDGD_1_1channel__manip)#m1">DGD::channel_manip&lt; Arg_type &gt;</a><li>m_assoc : <a class="doxy_el" href="$(doxygen_html_classDGD_1_1channelbuf)#o0">DGD::channelbuf</a><li>m_buffer : <a class="doxy_el" href="$(doxygen_html_classDGD_1_1funnel)#o0">DGD::funnel</a>, <a class="doxy_el" href="$(doxygen_html_classDGD_1_1channel)#o2">DGD::channel</a><li>m_bytes : <a class="doxy_el" href="$(doxygen_html_classDGD_1_1channelbuf)#o11">DGD::channelbuf</a><li>m_callback : <a class="doxy_el" href="$(doxygen_html_classDGD_1_1funnelbuf)#o0">DGD::funnelbuf</a><li>m_channels : <a class="doxy_el" href="$(doxygen_html_classDGD_1_1Debug)#o0">DGD::Debug</a><li>m_column : <a class="doxy_el" href="$(doxygen_html_classDGD_1_1channelbuf)#o2">DGD::channelbuf</a><li>m_current_channel : <a class="doxy_el" href="$(doxygen_html_classDGD_1_1Debug)#o1">DGD::Debug</a><li>m_file : <a class="doxy_el" href="$(doxygen_html_classDGD_1_1multifile__log)#o0">DGD::multifile_log</a><li>m_files : <a class="doxy_el" href="$(doxygen_html_classDGD_1_1Debug)#o2">DGD::Debug</a><li>m_indent : <a class="doxy_el" href="$(doxygen_html_classDGD_1_1channelbuf)#o3">DGD::channelbuf</a><li>m_indent_step : <a class="doxy_el" href="$(doxygen_html_classDGD_1_1channelbuf)#o4">DGD::channelbuf</a><li>m_is_open : <a class="doxy_el" href="$(doxygen_html_classDGD_1_1channel)#o0">DGD::channel</a><li>m_line : <a class="doxy_el" href="$(doxygen_html_classDGD_1_1channelbuf)#o1">DGD::channelbuf</a><li>m_main_file : <a class="doxy_el" href="$(doxygen_html_classDGD_1_1Debug)#o3">DGD::Debug</a><li>m_max_width : <a class="doxy_el" href="$(doxygen_html_classDGD_1_1channelbuf)#o6">DGD::channelbuf</a><li>m_method : <a class="doxy_el" href="$(doxygen_html_classDGD_1_1channel__manip__void)#m0">DGD::channel_manip_void</a>, <a class="doxy_el" href="$(doxygen_html_classDGD_1_1channel__manip)#m0">DGD::channel_manip&lt; Arg_type &gt;</a><li>m_min_width : <a class="doxy_el" href="$(doxygen_html_classDGD_1_1channelbuf)#o5">DGD::channelbuf</a><li>m_name : <a class="doxy_el" href="$(doxygen_html_classDGD_1_1multifile__log)#o1">DGD::multifile_log</a>, <a class="doxy_el" href="$(doxygen_html_classDGD_1_1channel)#o1">DGD::channel</a><li>m_part_count : <a class="doxy_el" href="$(doxygen_html_classDGD_1_1multifile__log)#o2">DGD::multifile_log</a><li>m_pointer : <a class="doxy_el" href="$(doxygen_html_structDGD_1_1dgd__reference)#m0">DGD::dgd_reference&lt; T &gt;</a><li>m_size : <a class="doxy_el" href="$(doxygen_html_structDGD_1_1dgd__reference)#m2">DGD::dgd_reference&lt; T &gt;</a><li>m_spaces : <a class="doxy_el" href="$(doxygen_html_classDGD_1_1channelbuf)#o10">DGD::channelbuf</a><li>m_split : <a class="doxy_el" href="$(doxygen_html_classDGD_1_1multifile__log)#o3">DGD::multifile_log</a><li>m_tmp_buffer : <a class="doxy_el" href="$(doxygen_html_classDGD_1_1channel)#o3">DGD::channel</a><li>m_use_as_void : <a class="doxy_el" href="$(doxygen_html_structDGD_1_1dgd__reference)#m1">DGD::dgd_reference&lt; T &gt;</a><li>m_vol_size : <a class="doxy_el" href="$(doxygen_html_classDGD_1_1multifile__log_1_1Split__by__lines)#o0">DGD::multifile_log::Split_by_lines</a>, <a class="doxy_el" href="$(doxygen_html_classDGD_1_1multifile__log_1_1Split__by__size)#o0">DGD::multifile_log::Split_by_size</a><li>m_what : <a class="doxy_el" href="$(doxygen_html_classDGD_1_1bad__params)#o0">DGD::bad_params</a><li>m_word_pos : <a class="doxy_el" href="$(doxygen_html_classDGD_1_1channelbuf)#o9">DGD::channelbuf</a><li>m_word_wrap : <a class="doxy_el" href="$(doxygen_html_classDGD_1_1channelbuf)#o8">DGD::channelbuf</a><li>m_wrap : <a class="doxy_el" href="$(doxygen_html_classDGD_1_1channelbuf)#o7">DGD::channelbuf</a><li>main_file() : <a class="doxy_el" href="$(doxygen_html_classDGD_1_1Debug)#a5">DGD::Debug</a><li>max_width() : <a class="doxy_el" href="$(doxygen_html_classDGD_1_1channelbuf)#a16">DGD::channelbuf</a>, <a class="doxy_el" href="$(doxygen_html_classDGD_1_1channel)#a17">DGD::channel</a><li>method_type : <a class="doxy_el" href="$(doxygen_html_classDGD_1_1channel__manip__void)#s0">DGD::channel_manip_void</a>, <a class="doxy_el" href="$(doxygen_html_classDGD_1_1channel__manip)#s0">DGD::channel_manip&lt; Arg_type &gt;</a><li>min_width() : <a class="doxy_el" href="$(doxygen_html_classDGD_1_1channelbuf)#a14">DGD::channelbuf</a>, <a class="doxy_el" href="$(doxygen_html_classDGD_1_1channel)#a15">DGD::channel</a><li>multifile_log() : <a class="doxy_el" href="$(doxygen_html_classDGD_1_1multifile__log)#a0">DGD::multifile_log</a></ul>
<h3><a name="index_n">- n -</a></h3>
<ul><li>name() : <a class="doxy_el" href="$(doxygen_html_classDGD_1_1channel)#a5">DGD::channel</a></ul>
<h3><a name="index_o">- o -</a></h3>
<ul><li>open() : <a class="doxy_el" href="$(doxygen_html_classDGD_1_1channel)#a1">DGD::channel</a><li>operator bool() : <a class="doxy_el" href="$(doxygen_html_classDGD_1_1channel)#a4">DGD::channel</a><li>operator channel_ref() : <a class="doxy_el" href="$(doxygen_html_classDGD_1_1Debug)#a7">DGD::Debug</a><li>operator()() : <a class="doxy_el" href="$(doxygen_html_classDGD_1_1option__filter)#a0">DGD::option_filter</a>, <a class="doxy_el" href="$(doxygen_html_classDGD_1_1multifile__log)#c0">DGD::multifile_log</a>, <a class="doxy_el" href="$(doxygen_html_classDGD_1_1multifile__log_1_1Split__by__lines)#a3">DGD::multifile_log::Split_by_lines</a>, <a class="doxy_el" href="$(doxygen_html_classDGD_1_1multifile__log_1_1Split__by__size)#a2">DGD::multifile_log::Split_by_size</a>, <a class="doxy_el" href="$(doxygen_html_classDGD_1_1multifile__log_1_1Dont__split)#a0">DGD::multifile_log::Dont_split</a>, <a class="doxy_el" href="$(doxygen_html_classDGD_1_1multifile__log_1_1Split__criteria)#a0">DGD::multifile_log::Split_criteria</a>, <a class="doxy_el" href="$(doxygen_html_classDGD_1_1funnel)#b0">DGD::funnel</a>, <a class="doxy_el" href="$(doxygen_html_classDGD_1_1funnelbuf_1_1Callback)#a0">DGD::funnelbuf::Callback</a><li>operator[]() : <a class="doxy_el" href="$(doxygen_html_classDGD_1_1Debug)#a8">DGD::Debug</a><li>option_set_container : <a class="doxy_el" href="$(doxygen_html_classDGD_1_1option__filter)#s0">DGD::option_filter</a><li>option_set_type() : <a class="doxy_el" href="$(doxygen_html_classDGD_1_1option__filter_1_1option__set__type)#a0">DGD::option_filter::option_set_type</a><li>overflow() : <a class="doxy_el" href="$(doxygen_html_classDGD_1_1channelbuf)#z0_2">DGD::channelbuf</a></ul>
<h3><a name="index_p">- p -</a></h3>
<ul><li>Parent : <a class="doxy_el" href="$(doxygen_html_classDGD_1_1funnel)#s0">DGD::funnel</a>, <a class="doxy_el" href="$(doxygen_html_classDGD_1_1channelbuf)#s0">DGD::channelbuf</a>, <a class="doxy_el" href="$(doxygen_html_classDGD_1_1channel)#s0">DGD::channel</a><li>position() : <a class="doxy_el" href="$(doxygen_html_classDGD_1_1channelbuf)#a23">DGD::channelbuf</a><li>position_type : <a class="doxy_el" href="$(doxygen_html_classDGD_1_1channelbuf)#s1">DGD::channelbuf</a><li>post_process() : <a class="doxy_el" href="$(doxygen_html_classDGD_1_1funnelbuf)#c0">DGD::funnelbuf</a>, <a class="doxy_el" href="$(doxygen_html_classDGD_1_1channelbuf)#b2">DGD::channelbuf</a><li>process_options() : <a class="doxy_el" href="$(doxygen_html_classDGD_1_1Debug)#a2">DGD::Debug</a><li>propagate() : <a class="doxy_el" href="$(doxygen_html_classDGD_1_1channelbuf)#b1">DGD::channelbuf</a></ul>
<h3><a name="index_r">- r -</a></h3>
<ul><li>rdbuf() : <a class="doxy_el" href="$(doxygen_html_classDGD_1_1funnel)#a1">DGD::funnel</a>, <a class="doxy_el" href="$(doxygen_html_classDGD_1_1channel)#a7">DGD::channel</a><li>real_name() : <a class="doxy_el" href="$(doxygen_html_classDGD_1_1multifile__log)#c1">DGD::multifile_log</a></ul>
<h3><a name="index_s">- s -</a></h3>
<ul><li>setbuf() : <a class="doxy_el" href="$(doxygen_html_classDGD_1_1channelbuf)#z0_0">DGD::channelbuf</a><li>space_chars() : <a class="doxy_el" href="$(doxygen_html_classDGD_1_1channelbuf)#a22">DGD::channelbuf</a>, <a class="doxy_el" href="$(doxygen_html_classDGD_1_1channel)#a23">DGD::channel</a><li>split_by_lines : <a class="doxy_el" href="$(doxygen_html_classDGD_1_1multifile__log)#p2">DGD::multifile_log</a><li>Split_by_lines() : <a class="doxy_el" href="$(doxygen_html_classDGD_1_1multifile__log_1_1Split__by__lines)#a2">DGD::multifile_log::Split_by_lines</a><li>Split_by_size() : <a class="doxy_el" href="$(doxygen_html_classDGD_1_1multifile__log_1_1Split__by__size)#a1">DGD::multifile_log::Split_by_size</a><li>split_by_size : <a class="doxy_el" href="$(doxygen_html_classDGD_1_1multifile__log)#p1">DGD::multifile_log</a><li>sync() : <a class="doxy_el" href="$(doxygen_html_classDGD_1_1channelbuf)#z0_1">DGD::channelbuf</a></ul>
<h3><a name="index_w">- w -</a></h3>
<ul><li>what() : <a class="doxy_el" href="$(doxygen_html_classDGD_1_1exit__required)#a0">DGD::exit_required</a>, <a class="doxy_el" href="$(doxygen_html_classDGD_1_1debug__disabled)#a0">DGD::debug_disabled</a>, <a class="doxy_el" href="$(doxygen_html_classDGD_1_1bad__params)#a2">DGD::bad_params</a><li>word_wrap() : <a class="doxy_el" href="$(doxygen_html_classDGD_1_1channelbuf)#a20">DGD::channelbuf</a>, <a class="doxy_el" href="$(doxygen_html_classDGD_1_1channel)#a21">DGD::channel</a><li>wrap() : <a class="doxy_el" href="$(doxygen_html_classDGD_1_1channelbuf)#a18">DGD::channelbuf</a>, <a class="doxy_el" href="$(doxygen_html_classDGD_1_1channel)#a19">DGD::channel</a></ul>
<h3><a name="index_~">- ~ -</a></h3>
<ul><li>~channelbuf() : <a class="doxy_el" href="$(doxygen_html_classDGD_1_1channelbuf)#a1">DGD::channelbuf</a><li>~Debug() : <a class="doxy_el" href="$(doxygen_html_classDGD_1_1Debug)#a1">DGD::Debug</a><li>~funnelbuf() : <a class="doxy_el" href="$(doxygen_html_classDGD_1_1funnelbuf)#a1">DGD::funnelbuf</a><li>~multifile_log() : <a class="doxy_el" href="$(doxygen_html_classDGD_1_1multifile__log)#a1">DGD::multifile_log</a><li>~option_set_type() : <a class="doxy_el" href="$(doxygen_html_classDGD_1_1option__filter_1_1option__set__type)#a2">DGD::option_filter::option_set_type</a></ul>
<hr>
<address style="align: right;"><small>Generated on Mon Dec 9 18:30:02 2002 for Depression Glass Debug Library by <a href="http://www.doxygen.org/index.html"> <img align="middle" alt="doxygen" border=0 height=53 src="$(doxygen)" width=110></a>1.2.17 </small></address>
</content>

<content name="doxygen_html_globals" format="text/html">
<wmmeta name="title" value="File Member Index" />
<h1>Depression Glass Debug Library File Members</h1>
<center><a href="#index_d">d</a></center>
<p> Here is a list of all file members with links to the files they belong to:
<h3><a name="index_d">- d -</a></h3>
<ul><li>DG_VERSION_STRING : <a class="doxy_el" href="$(doxygen_html_dgConfig_8h)#a0">dgConfig.h</a><li>dgd_channel : <a class="doxy_el" href="$(doxygen_html_dgDebugExtra_8h)#a2">dgDebugExtra.h</a><li>dgd_echo : <a class="doxy_el" href="$(doxygen_html_dgDebugExtra_8h)#a6">dgDebugExtra.h</a><li>dgd_end_scope : <a class="doxy_el" href="$(doxygen_html_dgDebugExtra_8h)#a7">dgDebugExtra.h</a><li>dgd_end_scope_text : <a class="doxy_el" href="$(doxygen_html_dgDebugExtra_8h)#a8">dgDebugExtra.h</a><li>dgd_expand : <a class="doxy_el" href="$(doxygen_html_dgDebugExtra_8h)#a1">dgDebugExtra.h</a><li>dgd_file : <a class="doxy_el" href="$(doxygen_html_dgDebugExtra_8h)#a0">dgDebugExtra.h</a><li>dgd_scope : <a class="doxy_el" href="$(doxygen_html_dgDebugExtra_8h)#a5">dgDebugExtra.h</a><li>dgd_start_scope : <a class="doxy_el" href="$(doxygen_html_dgDebugExtra_8h)#a4">dgDebugExtra.h</a><li>dgd_trace : <a class="doxy_el" href="$(doxygen_html_dgDebugExtra_8h)#a3">dgDebugExtra.h</a></ul>
<hr>
<address style="align: right;"><small>Generated on Mon Dec 9 18:30:06 2002 for Depression Glass Debug Library by <a href="http://www.doxygen.org/index.html"> <img align="middle" alt="doxygen" border=0 height=53 src="$(doxygen)" width=110></a>1.2.17 </small></address>
</content>

<content name="doxygen_html_graph_legend" format="text/html">
<wmmeta name="title" value="Graph Legend" />
<h1>Graph Legend</h1>
This page explains how to interpret the graphs that are generated by doxygen. <p> Consider the following example: <div class="doxy_fragment"><pre><span class="doxy_comment">/*! Invisible class because of truncation */</span>
<span class="doxy_keyword">class </span>Invisible { };
<span class="doxy_comment"></span>
<span class="doxy_comment">/*! Truncated class, inheritance relation is hidden */</span>
<span class="doxy_keyword">class </span>Truncated : <span class="doxy_keyword">public</span> Invisible { };

<span class="doxy_comment">/* Class not documented with doxygen comments */</span>
<span class="doxy_keyword">class </span>Undocumented { };
<span class="doxy_comment"></span>
<span class="doxy_comment">/*! Class that is inherited using public inheritance */</span>
<span class="doxy_keyword">class </span>PublicBase : <span class="doxy_keyword">public</span> Truncated { };
<span class="doxy_comment"></span>
<span class="doxy_comment">/*! A template class */</span>
<span class="doxy_keyword">template</span>&lt;<span class="doxy_keyword">class</span> T&gt; <span class="doxy_keyword">class </span>Templ { };
<span class="doxy_comment"></span>
<span class="doxy_comment">/*! Class that is inherited using protected inheritance */</span>
<span class="doxy_keyword">class </span>ProtectedBase { };
<span class="doxy_comment"></span>
<span class="doxy_comment">/*! Class that is inherited using private inheritance */</span>
<span class="doxy_keyword">class </span>PrivateBase { };
<span class="doxy_comment"></span>
<span class="doxy_comment">/*! Class that is used by the Inherited class */</span>
<span class="doxy_keyword">class </span>Used { };
<span class="doxy_comment"></span>
<span class="doxy_comment">/*! Super class that inherits a number of other classes */</span>
<span class="doxy_keyword">class </span>Inherited : <span class="doxy_keyword">public</span> PublicBase,
                  <span class="doxy_keyword">protected</span> ProtectedBase,
                  <span class="doxy_keyword">private</span> PrivateBase,
                  <span class="doxy_keyword">public</span> Undocumented
                  <span class="doxy_keyword">public</span> Templ&lt;int&gt;
{
  <span class="doxy_keyword">private</span>:
    Used *m_usedClass;
};
</pre></div> If the <code>MAX_DOT_GRAPH_HEIGHT</code> tag in the configuration file is set to 240 this will result in the following graph: 
<p><center><img alt="" src="$(graph_legend)"></center>
<p> The boxes in the above graph have the following meaning: <ul><li>A filled black box represents the struct or class for which the graph is generated. <li>A box with a black border denotes a documented struct or class. <li>A box with a grey border denotes an undocumented struct or class. <li>A box with a red border denotes a documented struct or class forwhich not all inheritance/containment relations are shown. A graph is truncated if it does not fit within the specified boundaries. </ul> The arrows have the following meaning: <ul><li>A dark blue arrow is used to visualize a public inheritance relation between two classes. <li>A dark green arrow is used for protected inheritance. <li>A dark red arrow is used for private inheritance. <li>A purple dashed arrow is used if a class is contained or used by another class. The arrow is labeled with the variable(s) through which the pointed class or struct is accessible. <li>A yellow dashed arrow denotes a relation between a template instance and the template class it was instantiated from. The arrow is labeled with the template parameters of the instance. </ul><hr><address style="align: right;"><small>Generated on Mon Dec 9 18:30:06 2002 for Depression Glass Debug Library by <a href="http://www.doxygen.org/index.html"> <img align="middle" alt="doxygen" border=0 height=53 src="$(doxygen)" width=110></a>1.2.17 </small></address>
</content>

<content name="doxygen_html_hierarchy" format="text/html">
<wmmeta name="title" value="Hierarchical Index" />
<h1>Depression Glass Debug Library Class Hierarchy</h1>
<a href="$(doxygen_html_inherits)">Go to the graphical class hierarchy</a>
<p> This inheritance list is sorted roughly, but not completely, alphabetically:<ul><li><a class="doxy_el" href="$(doxygen_html_classDGD_1_1bad__params)">DGD::bad_params</a><li><a class="doxy_el" href="$(doxygen_html_classDGD_1_1channel)">DGD::channel</a><li><a class="doxy_el" href="$(doxygen_html_classDGD_1_1channel__manip)">DGD::channel_manip&lt; Arg_type &gt;</a><li><a class="doxy_el" href="$(doxygen_html_classDGD_1_1channel__manip__nop)">DGD::channel_manip_nop</a><li><a class="doxy_el" href="$(doxygen_html_classDGD_1_1channel__manip__void)">DGD::channel_manip_void</a><li><a class="doxy_el" href="$(doxygen_html_classDGD_1_1channelbuf)">DGD::channelbuf</a><ul><li><a class="doxy_el" href="$(doxygen_html_classDGD_1_1funnelbuf)">DGD::funnelbuf</a></ul><li><a class="doxy_el" href="$(doxygen_html_classDGD_1_1Debug)">DGD::Debug</a><li><a class="doxy_el" href="$(doxygen_html_classDGD_1_1debug__disabled)">DGD::debug_disabled</a><li><a class="doxy_el" href="$(doxygen_html_structDGD_1_1dgd__reference)">DGD::dgd_reference&lt; T &gt;</a><li><a class="doxy_el" href="$(doxygen_html_classDGD_1_1exit__required)">DGD::exit_required</a><li><a class="doxy_el" href="$(doxygen_html_classDGD_1_1funnelbuf_1_1Callback)">DGD::funnelbuf::Callback</a><ul><li><a class="doxy_el" href="$(doxygen_html_classDGD_1_1funnel)">DGD::funnel</a><ul><li><a class="doxy_el" href="$(doxygen_html_classDGD_1_1multifile__log)">DGD::multifile_log</a></ul></ul><li><a class="doxy_el" href="$(doxygen_html_classDGD_1_1multifile__log_1_1Split__criteria)">DGD::multifile_log::Split_criteria</a><ul><li><a class="doxy_el" href="$(doxygen_html_classDGD_1_1multifile__log_1_1Dont__split)">DGD::multifile_log::Dont_split</a><li><a class="doxy_el" href="$(doxygen_html_classDGD_1_1multifile__log_1_1Split__by__lines)">DGD::multifile_log::Split_by_lines</a><li><a class="doxy_el" href="$(doxygen_html_classDGD_1_1multifile__log_1_1Split__by__size)">DGD::multifile_log::Split_by_size</a></ul><li><a class="doxy_el" href="$(doxygen_html_classDGD_1_1option__filter)">DGD::option_filter</a><li><a class="doxy_el" href="$(doxygen_html_classDGD_1_1option__filter_1_1option__set__type)">DGD::option_filter::option_set_type</a></ul><hr><address style="align: right;"><small>Generated on Mon Dec 9 18:30:02 2002 for Depression Glass Debug Library by <a href="http://www.doxygen.org/index.html"> <img align="middle" alt="doxygen" border=0 height=53 src="$(doxygen)" width=110></a>1.2.17 </small></address>
</content>

<content name="doxygen_html_index" format="text/html">
<wmmeta name="title" value="Main Page" />
<h1>Depression Glass Debug Library Documentation</h1>
<p>
<h3 align="center">dgd-0.22 Mon Dec 9 18:14:50 2002</h3>
<ul><li><a class="doxy_qindex" href="$(doxygen_html_index)">Main Page</a> &nbsp; <li><a class="doxy_qindex" href="$(doxygen_html_namespaces)">Namespace List</a> &nbsp; <li><a class="doxy_qindex" href="$(doxygen_html_hierarchy)">Class Hierarchy</a> &nbsp; <li><a class="doxy_qindex" href="$(doxygen_html_annotated)">Compound List</a> &nbsp; <li><a class="doxy_qindex" href="$(doxygen_html_files)">File List</a> &nbsp; <li><a class="doxy_qindex" href="$(doxygen_html_namespacemembers)">Namespace Members</a> &nbsp; <li><a class="doxy_qindex" href="$(doxygen_html_functions)">Compound Members</a> &nbsp; <li><a class="doxy_qindex" href="$(doxygen_html_globals)">File Members</a> &nbsp; <li><a class="doxy_qindex" href="$(doxygen_html_pages)">Related Pages</a> &nbsp; </ul>
<hr>
<address style="align: right;"><small>Generated on Mon Dec 9 18:29:57 2002 for Depression Glass Debug Library by <a href="http://www.doxygen.org/index.html"> <img align="middle" alt="doxygen" border=0 height=53 src="$(doxygen)" width=110></a>1.2.17 </small></address>
</content>

<content name="doxygen_html_inherits" format="text/html">
<wmmeta name="title" value="Graphical Class Hierarchy" />
<h1>Depression Glass Debug Library Graphical Class Hierarchy</h1>
<a href="$(doxygen_html_hierarchy)">Go to the textual class hierarchy</a>
<p><table border=0 cellpadding=0 cellspacing=10><tr><td><img alt="" border=0 src="$(inherit__graph__0)" usemap="#DGD_1_1bad__params_map"><map name="DGD_1_1bad__params_map"><area alt="" coords="1,-1,113,18" href="$(doxygen_html_classDGD_1_1bad__params)" shape="rect"></map></td></tr><tr><td><img alt="" border=0 src="$(inherit__graph__1)" usemap="#DGD_1_1channel_map"><map name="DGD_1_1channel_map"><area alt="" coords="0,-1,91,18" href="$(doxygen_html_classDGD_1_1channel)" shape="rect"></map></td></tr><tr><td><img alt="" border=0 src="$(inherit__graph__2)" usemap="#DGD_1_1channel__manip_3_01Arg__type_01_4_map"><map name="DGD_1_1channel__manip_3_01Arg__type_01_4_map"><area alt="" coords="0,-1,203,18" href="$(doxygen_html_classDGD_1_1channel__manip)" shape="rect"></map></td></tr><tr><td><img alt="" border=0 src="$(inherit__graph__3)" usemap="#DGD_1_1channel__manip__nop_map"><map name="DGD_1_1channel__manip__nop_map"><area alt="" coords="0,-1,157,18" href="$(doxygen_html_classDGD_1_1channel__manip__nop)" shape="rect"></map></td></tr><tr><td><img alt="" border=0 src="$(inherit__graph__4)" usemap="#DGD_1_1channel__manip__void_map"><map name="DGD_1_1channel__manip__void_map"><area alt="" coords="1,-1,161,18" href="$(doxygen_html_classDGD_1_1channel__manip__void)" shape="rect"></map></td></tr><tr><td><img alt="" border=0 src="$(inherit__graph__5)" usemap="#DGD_1_1channelbuf_map"><map name="DGD_1_1channelbuf_map"><area alt="" coords="1,-1,108,18" href="$(doxygen_html_classDGD_1_1channelbuf)" shape="rect"><area alt="" coords="157,-1,259,18" href="$(doxygen_html_classDGD_1_1funnelbuf)" shape="rect"></map></td></tr><tr><td><img alt="" border=0 src="$(inherit__graph__6)" usemap="#DGD_1_1Debug_map"><map name="DGD_1_1Debug_map"><area alt="" coords="0,-1,85,18" href="$(doxygen_html_classDGD_1_1Debug)" shape="rect"></map></td></tr><tr><td><img alt="" border=0 src="$(inherit__graph__7)" usemap="#DGD_1_1debug__disabled_map"><map name="DGD_1_1debug__disabled_map"><area alt="" coords="0,-1,133,18" href="$(doxygen_html_classDGD_1_1debug__disabled)" shape="rect"></map></td></tr><tr><td><img alt="" border=0 src="$(inherit__graph__8)" usemap="#DGD_1_1dgd__reference_3_01T_01_4_map"><map name="DGD_1_1dgd__reference_3_01T_01_4_map"><area alt="" coords="0,-1,155,18" href="$(doxygen_html_structDGD_1_1dgd__reference)" shape="rect"></map></td></tr><tr><td><img alt="" border=0 src="$(inherit__graph__9)" usemap="#DGD_1_1exit__required_map"><map name="DGD_1_1exit__required_map"><area alt="" coords="0,-1,120,18" href="$(doxygen_html_classDGD_1_1exit__required)" shape="rect"></map></td></tr><tr><td><img alt="" border=0 src="$(inherit__graph__10)" usemap="#DGD_1_1funnelbuf_1_1Callback_map"><map name="DGD_1_1funnelbuf_1_1Callback_map"><area alt="" coords="1,-1,156,18" href="$(doxygen_html_classDGD_1_1funnelbuf_1_1Callback)" shape="rect"><area alt="" coords="207,-1,289,18" href="$(doxygen_html_classDGD_1_1funnel)" shape="rect"><area alt="" coords="339,-1,459,18" href="$(doxygen_html_classDGD_1_1multifile__log)" shape="rect"></map></td></tr><tr><td><img alt="" border=0 src="$(inherit__graph__11)" usemap="#DGD_1_1multifile__log_1_1Split__criteria_map"><map name="DGD_1_1multifile__log_1_1Split__criteria_map"><area alt="" coords="1,43,196,61" href="$(doxygen_html_classDGD_1_1multifile__log_1_1Split__criteria)" shape="rect"><area alt="" coords="257,0,439,19" href="$(doxygen_html_classDGD_1_1multifile__log_1_1Dont__split)" shape="rect"><area alt="" coords="247,43,449,61" href="$(doxygen_html_classDGD_1_1multifile__log_1_1Split__by__lines)" shape="rect"><area alt="" coords="248,85,448,104" href="$(doxygen_html_classDGD_1_1multifile__log_1_1Split__by__size)" shape="rect"></map></td></tr><tr><td><img alt="" border=0 src="$(inherit__graph__12)" usemap="#DGD_1_1option__filter_map"><map name="DGD_1_1option__filter_map"><area alt="" coords="1,-1,116,18" href="$(doxygen_html_classDGD_1_1option__filter)" shape="rect"></map></td></tr><tr><td><img alt="" border=0 src="$(inherit__graph__13)" usemap="#DGD_1_1option__filter_1_1option__set__type_map"><map name="DGD_1_1option__filter_1_1option__set__type_map"><area alt="" coords="1,-1,209,18" href="$(doxygen_html_classDGD_1_1option__filter_1_1option__set__type)" shape="rect"></map></td></tr></table><hr><address style="align: right;"><small>Generated on Mon Dec 9 18:30:07 2002 for Depression Glass Debug Library by <a href="http://www.doxygen.org/index.html"> <img align="middle" alt="doxygen" border=0 height=53 src="$(doxygen)" width=110></a>1.2.17 </small></address>
</content>

<content name="doxygen_html_namespaceDGD" format="text/html">
<wmmeta name="title" value="DGD Namespace Reference" />
<h1>DGD Namespace Reference</h1>
Depression Glass namespace. <a href="#_details">More...</a>
<p>
<h2>Compounds</h2>
<ul><li>class <a class="doxy_el" href="$(doxygen_html_classDGD_1_1channel)">channel</a><dl class="doxy_el"><dd><font size="-1"><em>Simple debug channel.</em> <a href="$(doxygen_html_classDGD_1_1channel)#_details">More...</a><em><br><br></em></font></dl><li>class <a class="doxy_el" href="$(doxygen_html_classDGD_1_1channelbuf)">channelbuf</a><dl class="doxy_el"><dd><font size="-1"><em>Simple formatting std::streambuf.</em> <a href="$(doxygen_html_classDGD_1_1channelbuf)#_details">More...</a><em><br><br></em></font></dl><li>class <a class="doxy_el" href="$(doxygen_html_classDGD_1_1channel__manip)">channel_manip</a><dl class="doxy_el"><dd><font size="-1"><em>Channel manipulator with a single argument.</em> <a href="$(doxygen_html_classDGD_1_1channel__manip)#_details">More...</a><em><br><br></em></font></dl><li>class <a class="doxy_el" href="$(doxygen_html_classDGD_1_1channel__manip__void)">channel_manip_void</a><dl class="doxy_el"><dd><font size="-1"><em>Channel manipulator without arguments.</em> <a href="$(doxygen_html_classDGD_1_1channel__manip__void)#_details">More...</a><em><br><br></em></font></dl><li>class <a class="doxy_el" href="$(doxygen_html_classDGD_1_1channel__manip__nop)">channel_manip_nop</a><dl class="doxy_el"><dd><font size="-1"><em>Channel manipulator without arguments.</em> <a href="$(doxygen_html_classDGD_1_1channel__manip__nop)#_details">More...</a><em><br><br></em></font></dl><li>class <a class="doxy_el" href="$(doxygen_html_classDGD_1_1bad__params)">bad_params</a><dl class="doxy_el"><dd><font size="-1"><em>Bad command line option exception.</em> <a href="$(doxygen_html_classDGD_1_1bad__params)#_details">More...</a><em><br><br></em></font></dl><li>class <a class="doxy_el" href="$(doxygen_html_classDGD_1_1debug__disabled)">debug_disabled</a><dl class="doxy_el"><dd><font size="-1"><em>Disabled <a class="doxy_el" href="$(doxygen_html_classDGD_1_1Debug)">Debug</a> exception.</em> <a href="$(doxygen_html_classDGD_1_1debug__disabled)#_details">More...</a><em><br><br></em></font></dl><li>class <a class="doxy_el" href="$(doxygen_html_classDGD_1_1exit__required)">exit_required</a><dl class="doxy_el"><dd><font size="-1"><em>Exit application exception.</em> <a href="$(doxygen_html_classDGD_1_1exit__required)#_details">More...</a><em><br><br></em></font></dl><li>class <a class="doxy_el" href="$(doxygen_html_classDGD_1_1Debug)">Debug</a><dl class="doxy_el"><dd><font size="-1"><em><a class="doxy_el" href="$(doxygen_html_namespaceDGD)">DGD</a> channel factory.</em> <a href="$(doxygen_html_classDGD_1_1Debug)#_details">More...</a><em><br><br></em></font></dl><li>struct <a class="doxy_el" href="$(doxygen_html_structDGD_1_1dgd__reference)">dgd_reference</a><dl class="doxy_el"><dd><font size="-1"><em>Memory location/block.</em> <a href="$(doxygen_html_structDGD_1_1dgd__reference)#_details">More...</a><em><br><br></em></font></dl><li>class <a class="doxy_el" href="$(doxygen_html_classDGD_1_1funnelbuf)">funnelbuf</a><li>class <a class="doxy_el" href="$(doxygen_html_classDGD_1_1funnelbuf_1_1Callback)">Callback</a><li>class <a class="doxy_el" href="$(doxygen_html_classDGD_1_1funnel)">funnel</a><li>class <a class="doxy_el" href="$(doxygen_html_classDGD_1_1multifile__log)">multifile_log</a><li>class <a class="doxy_el" href="$(doxygen_html_classDGD_1_1multifile__log_1_1Split__criteria)">Split_criteria</a><li>class <a class="doxy_el" href="$(doxygen_html_classDGD_1_1multifile__log_1_1Dont__split)">Dont_split</a><li>class <a class="doxy_el" href="$(doxygen_html_classDGD_1_1multifile__log_1_1Split__by__size)">Split_by_size</a><li>class <a class="doxy_el" href="$(doxygen_html_classDGD_1_1multifile__log_1_1Split__by__lines)">Split_by_lines</a><li>class <a class="doxy_el" href="$(doxygen_html_classDGD_1_1option__filter)">option_filter</a><dl class="doxy_el"><dd><font size="-1"><em>Command line options set filter.</em> <a href="$(doxygen_html_classDGD_1_1option__filter)#_details">More...</a><em><br><br></em></font></dl><li>class <a class="doxy_el" href="$(doxygen_html_classDGD_1_1option__filter_1_1option__set__type)">option_set_type</a></ul>
<h2>Typedefs</h2>
<ul><li>typedef <a class="doxy_el" href="$(doxygen_html_classDGD_1_1channel__manip)">channel_manip</a>&lt; bool &gt; <a class="doxy_el" href="$(doxygen_html_namespaceDGD)#a0">channel_manip_bool</a><dl class="doxy_el"><dd><font size="-1"><em>Alias for <a class="doxy_el" href="$(doxygen_html_classDGD_1_1channel__manip)">channel_manip</a>&lt;bool&gt;.</em> <a href="#a0"></a><em><br><br></em></font></dl><li>typedef <a class="doxy_el" href="$(doxygen_html_classDGD_1_1channel__manip)">channel_manip</a>&lt; unsigned <br> int &gt; <a class="doxy_el" href="$(doxygen_html_namespaceDGD)#a1">channel_manip_uint</a><dl class="doxy_el"><dd><font size="-1"><em>Alias for <a class="doxy_el" href="$(doxygen_html_classDGD_1_1channel__manip)">channel_manip</a>&lt;unsigned int&gt;.</em> <a href="#a1"></a><em><br><br></em></font></dl><li>typedef boost::shared_ptr&lt;<br> std::ostream &gt; <a class="doxy_el" href="$(doxygen_html_namespaceDGD)#a5">stream</a><dl class="doxy_el"><dd><font size="-1"><em>Right now <a class="doxy_el" href="$(doxygen_html_namespaceDGD)#a5">DGD::stream</a> is a simple smart pointer to any std::ostream or its children.</em> <a href="#a5"></a><em><br><br></em></font></dl></ul>
<h2>Functions</h2>
<ul><li>void <a class="doxy_el" href="$(doxygen_html_namespaceDGD)#a6">assoc</a> (std::ostream *s, <a class="doxy_el" href="$(doxygen_html_classDGD_1_1channel)">channel</a> &amp;<a class="doxy_el" href="$(doxygen_html_classDGD_1_1channel)">channel</a>) <dl class="doxy_el"><dd><font size="-1"><em>Associate physical stream with a channel.</em> <a href="#a6"></a><em><br><br></em></font></dl><li>void <a class="doxy_el" href="$(doxygen_html_namespaceDGD)#a7">assoc</a> (std::ostream &amp;s, <a class="doxy_el" href="$(doxygen_html_classDGD_1_1channel)">channel</a> &amp;cnl) <dl class="doxy_el"><dd><font size="-1"><em>Associate physical stream with a channel.</em> <a href="#a7"></a><em><br><br></em></font></dl><li>void <a class="doxy_el" href="$(doxygen_html_namespaceDGD)#a8">assoc</a> (std::ostream *s, const std::string &amp;name) <dl class="doxy_el"><dd><font size="-1"><em>Associate physical stream with a channel.</em> <a href="#a8"></a><em><br><br></em></font></dl><li>std::ostream &amp; <a class="doxy_el" href="$(doxygen_html_namespaceDGD)#a9">operator&lt;&lt;</a> (std::ostream &amp;cnl, const <a class="doxy_el" href="$(doxygen_html_classDGD_1_1channel__manip__void)">channel_manip_void</a> &amp;manip) <dl class="doxy_el"><dd><font size="-1"><em>Apply <a class="doxy_el" href="$(doxygen_html_classDGD_1_1channel__manip__void)">channel_manip_void</a> on channel.</em> <a href="#a9"></a><em><br><br></em></font></dl><li>std::ostream &amp; <a class="doxy_el" href="$(doxygen_html_namespaceDGD)#a10">operator&lt;&lt;</a> (std::ostream &amp;cnl, const <a class="doxy_el" href="$(doxygen_html_namespaceDGD)#a0">channel_manip_bool</a> &amp;manip) <dl class="doxy_el"><dd><font size="-1"><em>Apply channel_manip_bool on channel.</em> <a href="#a10"></a><em><br><br></em></font></dl><li>std::ostream &amp; <a class="doxy_el" href="$(doxygen_html_namespaceDGD)#a11">operator&lt;&lt;</a> (std::ostream &amp;cnl, const <a class="doxy_el" href="$(doxygen_html_namespaceDGD)#a1">channel_manip_uint</a> &amp;manip) <dl class="doxy_el"><dd><font size="-1"><em>Apply channel_manip_unit on channel.</em> <a href="#a11"></a><em><br><br></em></font></dl><li><a class="doxy_el" href="$(doxygen_html_classDGD_1_1channel)">channel</a> &amp; <a class="doxy_el" href="$(doxygen_html_namespaceDGD)#a12">operator&lt;&lt;</a> (std::ostream &amp;cnl, const <a class="doxy_el" href="$(doxygen_html_classDGD_1_1channel__manip__nop)">channel_manip_nop</a> &amp;manip) <dl class="doxy_el"><dd><font size="-1"><em>std::ostream to <a class="doxy_el" href="$(doxygen_html_classDGD_1_1channel)">DGD::channel</a> convertor.</em> <a href="#a12"></a><em><br><br></em></font></dl><li><a class="doxy_el" href="$(doxygen_html_namespaceDGD)#a1">channel_manip_uint</a> <a class="doxy_el" href="$(doxygen_html_namespaceDGD)#a13">step</a> (unsigned int s) <dl class="doxy_el"><dd><font size="-1"><em>Change indentation step manipulator.</em> <a href="#a13"></a><em><br><br></em></font></dl><li><a class="doxy_el" href="$(doxygen_html_namespaceDGD)#a1">channel_manip_uint</a> <a class="doxy_el" href="$(doxygen_html_namespaceDGD)#a14">indent</a> (unsigned int s) <dl class="doxy_el"><dd><font size="-1"><em>Change indentation level manipulator.</em> <a href="#a14"></a><em><br><br></em></font></dl><li><a class="doxy_el" href="$(doxygen_html_namespaceDGD)#a1">channel_manip_uint</a> <a class="doxy_el" href="$(doxygen_html_namespaceDGD)#a15">minwidth</a> (unsigned int s) <dl class="doxy_el"><dd><font size="-1"><em>Change minimum line width manipulator.</em> <a href="#a15"></a><em><br><br></em></font></dl><li><a class="doxy_el" href="$(doxygen_html_namespaceDGD)#a1">channel_manip_uint</a> <a class="doxy_el" href="$(doxygen_html_namespaceDGD)#a16">maxwidth</a> (unsigned int s) <dl class="doxy_el"><dd><font size="-1"><em>Change maximum line width manipulator.</em> <a href="#a16"></a><em><br><br></em></font></dl><li><a class="doxy_el" href="$(doxygen_html_namespaceDGD)#a0">channel_manip_bool</a> <a class="doxy_el" href="$(doxygen_html_namespaceDGD)#a17">wrap</a> (bool s) <dl class="doxy_el"><dd><font size="-1"><em>Enable/disable character wrapping manipulator.</em> <a href="#a17"></a><em><br><br></em></font></dl><li><a class="doxy_el" href="$(doxygen_html_namespaceDGD)#a0">channel_manip_bool</a> <a class="doxy_el" href="$(doxygen_html_namespaceDGD)#a18">word_wrap</a> (bool s) <dl class="doxy_el"><dd><font size="-1"><em>Enable/disable word wrapping manipulator.</em> <a href="#a18"></a><em><br><br></em></font></dl><li>template&lt;class First_type, class Second_type&gt; <a class="doxy_el" href="$(doxygen_html_classDGD_1_1channel)">channel</a> &amp; <a class="doxy_el" href="$(doxygen_html_namespaceDGD)#a19">operator&lt;&lt;</a> (<a class="doxy_el" href="$(doxygen_html_classDGD_1_1channel)">channel</a> &amp;cnl, const std::pair&lt; First_type, Second_type &gt; &amp;p) <dl class="doxy_el"><dd><font size="-1"><em>Pair output operator.</em> <a href="#a19"></a><em><br><br></em></font></dl><li>template&lt;&gt; <a class="doxy_el" href="$(doxygen_html_classDGD_1_1channel)">channel</a> &amp; <a class="doxy_el" href="$(doxygen_html_namespaceDGD)#a20">operator&lt;&lt;</a> (<a class="doxy_el" href="$(doxygen_html_classDGD_1_1channel)">channel</a> &amp;cnl, const std::pair&lt; int, char ** &gt; &amp;params) <dl class="doxy_el"><dd><font size="-1"><em>Specialzation of pair output operator.</em> <a href="#a20"></a><em><br><br></em></font></dl><li>template&lt;class Item_type&gt; <a class="doxy_el" href="$(doxygen_html_classDGD_1_1channel)">channel</a> &amp; <a class="doxy_el" href="$(doxygen_html_namespaceDGD)#a21">operator&lt;&lt;</a> (<a class="doxy_el" href="$(doxygen_html_classDGD_1_1channel)">channel</a> &amp;cnl, const std::list&lt; Item_type &gt; &amp;l) <dl class="doxy_el"><dd><font size="-1"><em>List output operator.</em> <a href="#a21"></a><em><br><br></em></font></dl><li>template&lt;class Item_type&gt; <a class="doxy_el" href="$(doxygen_html_classDGD_1_1channel)">channel</a> &amp; <a class="doxy_el" href="$(doxygen_html_namespaceDGD)#a22">operator&lt;&lt;</a> (<a class="doxy_el" href="$(doxygen_html_classDGD_1_1channel)">channel</a> &amp;cnl, const std::vector&lt; Item_type &gt; &amp;v) <dl class="doxy_el"><dd><font size="-1"><em>Vector output operator.</em> <a href="#a22"></a><em><br><br></em></font></dl><li>template&lt;class Key_type, class Value_type&gt; <a class="doxy_el" href="$(doxygen_html_classDGD_1_1channel)">channel</a> &amp; <a class="doxy_el" href="$(doxygen_html_namespaceDGD)#a23">operator&lt;&lt;</a> (<a class="doxy_el" href="$(doxygen_html_classDGD_1_1channel)">channel</a> &amp;cnl, const std::map&lt; Key_type, Value_type &gt; &amp;m) <dl class="doxy_el"><dd><font size="-1"><em>Map output operator.</em> <a href="#a23"></a><em><br><br></em></font></dl><li>template&lt;class T&gt; <a class="doxy_el" href="$(doxygen_html_structDGD_1_1dgd__reference)">dgd_reference</a>&lt; T &gt; <a class="doxy_el" href="$(doxygen_html_namespaceDGD)#a24">mem_ref</a> (const T *const p, const bool use_as_void=true, const unsigned int size=0) <dl class="doxy_el"><dd><font size="-1"><em>Memory reference manipulator.</em> <a href="#a24"></a><em><br><br></em></font></dl><li>template&lt;class T&gt; <a class="doxy_el" href="$(doxygen_html_structDGD_1_1dgd__reference)">dgd_reference</a>&lt; T &gt; <a class="doxy_el" href="$(doxygen_html_namespaceDGD)#a25">mem</a> (const T *const p, const unsigned int size=sizeof(T), const bool use_as_void=true) <dl class="doxy_el"><dd><font size="-1"><em>Memory reference manipulator.</em> <a href="#a25"></a><em><br><br></em></font></dl><li>template&lt;class T&gt; std::ostream &amp; <a class="doxy_el" href="$(doxygen_html_namespaceDGD)#a26">operator&lt;&lt;</a> (std::ostream &amp;cnl, const <a class="doxy_el" href="$(doxygen_html_structDGD_1_1dgd__reference)">dgd_reference</a>&lt; T &gt; &amp;ptr) <dl class="doxy_el"><dd><font size="-1"><em>Output operator for pointer and memory dump.</em> <a href="#a26"></a><em><br><br></em></font></dl></ul>
<h2>Variables</h2>
<ul><li>const <a class="doxy_el" href="$(doxygen_html_classDGD_1_1channel__manip__void)">channel_manip_void</a> <a class="doxy_el" href="$(doxygen_html_namespaceDGD)#a2">incr</a> = <a class="doxy_el" href="$(doxygen_html_classDGD_1_1channel__manip__void)">channel_manip_void</a>( &amp;channel::incr_indent ) <dl class="doxy_el"><dd><font size="-1"><em>Indentation increment manipulator for DGD:channel.</em> <a href="#a2"></a><em><br><br></em></font></dl><li>const <a class="doxy_el" href="$(doxygen_html_classDGD_1_1channel__manip__void)">channel_manip_void</a> <a class="doxy_el" href="$(doxygen_html_namespaceDGD)#a3">decr</a> = <a class="doxy_el" href="$(doxygen_html_classDGD_1_1channel__manip__void)">channel_manip_void</a>( &amp;channel::decr_indent ) <dl class="doxy_el"><dd><font size="-1"><em>Indentation decrement manipulator for DGD:channel.</em> <a href="#a3"></a><em><br><br></em></font></dl><li>const <a class="doxy_el" href="$(doxygen_html_classDGD_1_1channel__manip__nop)">channel_manip_nop</a> <a class="doxy_el" href="$(doxygen_html_namespaceDGD)#a4">dgd</a> = <a class="doxy_el" href="$(doxygen_html_classDGD_1_1channel__manip__nop)">channel_manip_nop</a>() <dl class="doxy_el"><dd><font size="-1"><em>Explicit conversion manipulator for DGD:channel.</em> <a href="#a4"></a><em><br><br></em></font></dl></ul>
<hr>
<a name="_details"></a>
<h2>Detailed Description</h2>
 Depression Glass namespace.<hr>
<h2>Typedef Documentation</h2>
<a doxytag="DGD::channel_manip_bool" name="a0"></a>
<p><table border=0 cellpadding=2 cellspacing=0 width="100%"><tr><td class="doxy_md"><table border=0 cellpadding=0 cellspacing=0><tr><td class="doxy_md" nowrap valign="top"> typedef <a class="doxy_el" href="$(doxygen_html_classDGD_1_1channel__manip)">channel_manip</a>&lt;bool&gt; DGD::channel_manip_bool </td></tr></table></td></tr></table><table border=0 cellpadding=0 cellspacing=5><tr><td> &nbsp; </td><td><p> Alias for <a class="doxy_el" href="$(doxygen_html_classDGD_1_1channel__manip)">channel_manip</a>&lt;bool&gt;. <p></td></tr></table><a doxytag="DGD::channel_manip_uint" name="a1"></a>
<p><table border=0 cellpadding=2 cellspacing=0 width="100%"><tr><td class="doxy_md"><table border=0 cellpadding=0 cellspacing=0><tr><td class="doxy_md" nowrap valign="top"> typedef <a class="doxy_el" href="$(doxygen_html_classDGD_1_1channel__manip)">channel_manip</a>&lt;unsigned int&gt; DGD::channel_manip_uint </td></tr></table></td></tr></table><table border=0 cellpadding=0 cellspacing=5><tr><td> &nbsp; </td><td><p> Alias for <a class="doxy_el" href="$(doxygen_html_classDGD_1_1channel__manip)">channel_manip</a>&lt;unsigned int&gt;. <p></td></tr></table><a doxytag="DGD::stream" name="a5"></a>
<p><table border=0 cellpadding=2 cellspacing=0 width="100%"><tr><td class="doxy_md"><table border=0 cellpadding=0 cellspacing=0><tr><td class="doxy_md" nowrap valign="top"> typedef boost::shared_ptr&lt; std::ostream &gt; DGD::stream </td></tr></table></td></tr></table><table border=0 cellpadding=0 cellspacing=5><tr><td> &nbsp; </td><td><p> Right now <a class="doxy_el" href="$(doxygen_html_namespaceDGD)#a5">DGD::stream</a> is a simple smart pointer to any std::ostream or its children. <p><dl compact><dt><b>See also: </b><dd> DGD::debug , <a class="doxy_el" href="$(doxygen_html_namespaceDGD)#a6">DGD::assoc</a>() </dl></td></tr></table><hr>
<h2>Function Documentation</h2>
<a doxytag="DGD::assoc" name="a6"></a>
<p><table border=0 cellpadding=2 cellspacing=0 width="100%"><tr><td class="doxy_md"><table border=0 cellpadding=0 cellspacing=0><tr><td class="doxy_md" nowrap valign="top"> void DGD::assoc </td><td class="doxy_md" valign="top">(&nbsp;</td><td class="doxy_md" nowrap valign="top">std::ostream *&nbsp;</td><td class="doxy_mdname" nowrap>&nbsp; <em>s</em>, </td></tr><tr><td></td><td></td><td class="doxy_md" nowrap><a class="doxy_el" href="$(doxygen_html_classDGD_1_1channel)">channel</a> &amp;&nbsp;</td><td class="doxy_mdname" nowrap>&nbsp; <em>channel</em></td></tr><tr><td></td><td class="doxy_md">)&nbsp;</td><td class="doxy_md" colspan=2></td></tr></table></td></tr></table><table border=0 cellpadding=0 cellspacing=5><tr><td> &nbsp; </td><td><p> Associate physical stream with a channel. <p> See <a class="doxy_el" href="$(doxygen_html_classDGD_1_1channel)">DGD::channel</a> documentation for more information. <dl compact><dt><b>Warning: </b><dd> DGD provides no limit on number of channels associated with the same physical stream (like std::cout). But it is not recommended to associate more then one channel with the same physical stream. In fact, unexpected formatting results can occur. Instead you can associate multiple channels with a single <a class="doxy_el" href="$(doxygen_html_classDGD_1_1channel)">DGD::channel</a>. </dl><dl compact><dt><b>See also: </b><dd><a class="doxy_el" href="$(doxygen_html_classDGD_1_1channelbuf)">DGD::channelbuf</a> , <a class="doxy_el" href="$(doxygen_html_classDGD_1_1channelbuf)#a2">channelbuf::assoc</a>(std::ostream*) </dl></td></tr></table><a doxytag="DGD::assoc" name="a7"></a>
<p><table border=0 cellpadding=2 cellspacing=0 width="100%"><tr><td class="doxy_md"><table border=0 cellpadding=0 cellspacing=0><tr><td class="doxy_md" nowrap valign="top"> void DGD::assoc </td><td class="doxy_md" valign="top">(&nbsp;</td><td class="doxy_md" nowrap valign="top">std::ostream &amp;&nbsp;</td><td class="doxy_mdname" nowrap>&nbsp; <em>s</em>, </td></tr><tr><td></td><td></td><td class="doxy_md" nowrap><a class="doxy_el" href="$(doxygen_html_classDGD_1_1channel)">channel</a> &amp;&nbsp;</td><td class="doxy_mdname" nowrap>&nbsp; <em>channel</em></td></tr><tr><td></td><td class="doxy_md">)&nbsp;</td><td class="doxy_md" colspan=2></td></tr></table></td></tr></table><table border=0 cellpadding=0 cellspacing=5><tr><td> &nbsp; </td><td><p> Associate physical stream with a channel. <p> See <a class="doxy_el" href="$(doxygen_html_classDGD_1_1channel)">DGD::channel</a> documentation for more information. This one is a simple alias to <a class="doxy_el" href="$(doxygen_html_namespaceDGD)#a6">assoc</a>(std::ostream*,channel&amp; channel). <dl compact><dt><b>Warning: </b><dd> DGD provides no limit on number of channels associated with the same physical stream (like std::cout). But it is not recommended to associate more then one channel with the same physical stream. In fact, unexpected formatting results can occur. Instead you can associate multiple channels with a single <a class="doxy_el" href="$(doxygen_html_classDGD_1_1channel)">DGD::channel</a>. </dl><dl compact><dt><b>See also: </b><dd><a class="doxy_el" href="$(doxygen_html_classDGD_1_1channelbuf)">DGD::channelbuf</a> , <a class="doxy_el" href="$(doxygen_html_classDGD_1_1channelbuf)#a2">channelbuf::assoc</a>(std::ostream*) , <a class="doxy_el" href="$(doxygen_html_namespaceDGD)#a6">assoc</a>(std::ostream*,channel&amp; channel) </dl></td></tr></table><a doxytag="DGD::assoc" name="a8"></a>
<p><table border=0 cellpadding=2 cellspacing=0 width="100%"><tr><td class="doxy_md"><table border=0 cellpadding=0 cellspacing=0><tr><td class="doxy_md" nowrap valign="top"> void DGD::assoc </td><td class="doxy_md" valign="top">(&nbsp;</td><td class="doxy_md" nowrap valign="top">std::ostream *&nbsp;</td><td class="doxy_mdname" nowrap>&nbsp; <em>s</em>, </td></tr><tr><td></td><td></td><td class="doxy_md" nowrap>const std::string &amp;&nbsp;</td><td class="doxy_mdname" nowrap>&nbsp; <em>name</em></td></tr><tr><td></td><td class="doxy_md">)&nbsp;</td><td class="doxy_md" colspan=2></td></tr></table></td></tr></table><table border=0 cellpadding=0 cellspacing=5><tr><td> &nbsp; </td><td><p> Associate physical stream with a channel. <p> This function acts as void <a class="doxy_el" href="$(doxygen_html_namespaceDGD)#a6">assoc</a>(std::ostream*,channel&amp;), but takes name of the channel instead. The <a class="doxy_el" href="$(doxygen_html_classDGD_1_1Debug)">DGD::Debug</a> factory is searched for the channel with the given name. See <a class="doxy_el" href="$(doxygen_html_classDGD_1_1channel)">DGD::channel</a> documentation for more information. <dl compact><dt><b>Warning: </b><dd> DGD provides no limit on number of channels associated with the same physical stream (like std::cout). But it is not recommended to associate more then one channel with the same physical stream. In fact, unexpected formatting results can occur. Instead you can associate multiple channels with a single <a class="doxy_el" href="$(doxygen_html_classDGD_1_1channel)">DGD::channel</a>. </dl><dl compact><dt><b>See also: </b><dd><a class="doxy_el" href="$(doxygen_html_classDGD_1_1channelbuf)">DGD::channelbuf</a> , <a class="doxy_el" href="$(doxygen_html_classDGD_1_1channelbuf)#a2">channelbuf::assoc</a>(std::ostream*) </dl></td></tr></table><a doxytag="DGD::operator&lt;&lt;" name="a9"></a>
<p><table border=0 cellpadding=2 cellspacing=0 width="100%"><tr><td class="doxy_md"><table border=0 cellpadding=0 cellspacing=0><tr><td class="doxy_md" nowrap valign="top"> std::ostream&amp; operator&lt;&lt; </td><td class="doxy_md" valign="top">(&nbsp;</td><td class="doxy_md" nowrap valign="top">std::ostream &amp;&nbsp;</td><td class="doxy_mdname" nowrap>&nbsp; <em>cnl</em>, </td></tr><tr><td></td><td></td><td class="doxy_md" nowrap>const <a class="doxy_el" href="$(doxygen_html_classDGD_1_1channel__manip__void)">channel_manip_void</a> &amp;&nbsp;</td><td class="doxy_mdname" nowrap>&nbsp; <em>manip</em></td></tr><tr><td></td><td class="doxy_md">)&nbsp;</td><td class="doxy_md" colspan=2><code> [inline]</code></td></tr></table></td></tr></table><table border=0 cellpadding=0 cellspacing=5><tr><td> &nbsp; </td><td><p> Apply <a class="doxy_el" href="$(doxygen_html_classDGD_1_1channel__manip__void)">channel_manip_void</a> on channel. <p></td></tr></table><a doxytag="DGD::operator&lt;&lt;" name="a10"></a>
<p><table border=0 cellpadding=2 cellspacing=0 width="100%"><tr><td class="doxy_md"><table border=0 cellpadding=0 cellspacing=0><tr><td class="doxy_md" nowrap valign="top"> std::ostream&amp; operator&lt;&lt; </td><td class="doxy_md" valign="top">(&nbsp;</td><td class="doxy_md" nowrap valign="top">std::ostream &amp;&nbsp;</td><td class="doxy_mdname" nowrap>&nbsp; <em>cnl</em>, </td></tr><tr><td></td><td></td><td class="doxy_md" nowrap>const <a class="doxy_el" href="$(doxygen_html_namespaceDGD)#a0">channel_manip_bool</a> &amp;&nbsp;</td><td class="doxy_mdname" nowrap>&nbsp; <em>manip</em></td></tr><tr><td></td><td class="doxy_md">)&nbsp;</td><td class="doxy_md" colspan=2><code> [inline]</code></td></tr></table></td></tr></table><table border=0 cellpadding=0 cellspacing=5><tr><td> &nbsp; </td><td><p> Apply channel_manip_bool on channel. <p></td></tr></table><a doxytag="DGD::operator&lt;&lt;" name="a11"></a>
<p><table border=0 cellpadding=2 cellspacing=0 width="100%"><tr><td class="doxy_md"><table border=0 cellpadding=0 cellspacing=0><tr><td class="doxy_md" nowrap valign="top"> std::ostream&amp; operator&lt;&lt; </td><td class="doxy_md" valign="top">(&nbsp;</td><td class="doxy_md" nowrap valign="top">std::ostream &amp;&nbsp;</td><td class="doxy_mdname" nowrap>&nbsp; <em>cnl</em>, </td></tr><tr><td></td><td></td><td class="doxy_md" nowrap>const <a class="doxy_el" href="$(doxygen_html_namespaceDGD)#a1">channel_manip_uint</a> &amp;&nbsp;</td><td class="doxy_mdname" nowrap>&nbsp; <em>manip</em></td></tr><tr><td></td><td class="doxy_md">)&nbsp;</td><td class="doxy_md" colspan=2><code> [inline]</code></td></tr></table></td></tr></table><table border=0 cellpadding=0 cellspacing=5><tr><td> &nbsp; </td><td><p> Apply channel_manip_unit on channel. <p></td></tr></table><a doxytag="DGD::operator&lt;&lt;" name="a12"></a>
<p><table border=0 cellpadding=2 cellspacing=0 width="100%"><tr><td class="doxy_md"><table border=0 cellpadding=0 cellspacing=0><tr><td class="doxy_md" nowrap valign="top"><a class="doxy_el" href="$(doxygen_html_classDGD_1_1channel)">channel</a>&amp; operator&lt;&lt; </td><td class="doxy_md" valign="top">(&nbsp;</td><td class="doxy_md" nowrap valign="top">std::ostream &amp;&nbsp;</td><td class="doxy_mdname" nowrap>&nbsp; <em>cnl</em>, </td></tr><tr><td></td><td></td><td class="doxy_md" nowrap>const <a class="doxy_el" href="$(doxygen_html_classDGD_1_1channel__manip__nop)">channel_manip_nop</a> &amp;&nbsp;</td><td class="doxy_mdname" nowrap>&nbsp; <em>manip</em></td></tr><tr><td></td><td class="doxy_md">)&nbsp;</td><td class="doxy_md" colspan=2><code> [inline]</code></td></tr></table></td></tr></table><table border=0 cellpadding=0 cellspacing=5><tr><td> &nbsp; </td><td><p> std::ostream to <a class="doxy_el" href="$(doxygen_html_classDGD_1_1channel)">DGD::channel</a> convertor. <p> This output operator does not change the stream. It performs static casting from std::ostream and returns the corresponding <a class="doxy_el" href="$(doxygen_html_classDGD_1_1channel)">DGD::channel</a>. <dl compact><dt><b>See also: </b><dd><a class="doxy_el" href="$(doxygen_html_namespaceDGD)#a4">DGD::dgd</a> , <a class="doxy_el" href="$(doxygen_html_classDGD_1_1channel__manip__nop)">DGD::channel_manip_nop</a></dl></td></tr></table><a doxytag="DGD::step" name="a13"></a>
<p><table border=0 cellpadding=2 cellspacing=0 width="100%"><tr><td class="doxy_md"><table border=0 cellpadding=0 cellspacing=0><tr><td class="doxy_md" nowrap valign="top"><a class="doxy_el" href="$(doxygen_html_namespaceDGD)#a1">channel_manip_uint</a> step </td><td class="doxy_md" valign="top">(&nbsp;</td><td class="doxy_md" nowrap valign="top">unsigned int&nbsp;</td><td class="doxy_mdname1" nowrap valign="top">&nbsp; <em>s</em></td><td class="doxy_md" valign="top">)&nbsp;</td><td class="doxy_md" nowrap><code> [inline]</code></td></tr></table></td></tr></table><table border=0 cellpadding=0 cellspacing=5><tr><td> &nbsp; </td><td><p> Change indentation step manipulator. <p><dl compact><dt><b>See also: </b><dd><a class="doxy_el" href="$(doxygen_html_classDGD_1_1channel)#a8">DGD::channel::indent_step</a>(unsigned int) </dl></td></tr></table><a doxytag="DGD::indent" name="a14"></a>
<p><table border=0 cellpadding=2 cellspacing=0 width="100%"><tr><td class="doxy_md"><table border=0 cellpadding=0 cellspacing=0><tr><td class="doxy_md" nowrap valign="top"><a class="doxy_el" href="$(doxygen_html_namespaceDGD)#a1">channel_manip_uint</a> indent </td><td class="doxy_md" valign="top">(&nbsp;</td><td class="doxy_md" nowrap valign="top">unsigned int&nbsp;</td><td class="doxy_mdname1" nowrap valign="top">&nbsp; <em>s</em></td><td class="doxy_md" valign="top">)&nbsp;</td><td class="doxy_md" nowrap><code> [inline]</code></td></tr></table></td></tr></table><table border=0 cellpadding=0 cellspacing=5><tr><td> &nbsp; </td><td><p> Change indentation level manipulator. <p><dl compact><dt><b>See also: </b><dd><a class="doxy_el" href="$(doxygen_html_classDGD_1_1channel)#a12">DGD::channel::indent</a>(unsigned int) </dl></td></tr></table><a doxytag="DGD::minwidth" name="a15"></a>
<p><table border=0 cellpadding=2 cellspacing=0 width="100%"><tr><td class="doxy_md"><table border=0 cellpadding=0 cellspacing=0><tr><td class="doxy_md" nowrap valign="top"><a class="doxy_el" href="$(doxygen_html_namespaceDGD)#a1">channel_manip_uint</a> minwidth </td><td class="doxy_md" valign="top">(&nbsp;</td><td class="doxy_md" nowrap valign="top">unsigned int&nbsp;</td><td class="doxy_mdname1" nowrap valign="top">&nbsp; <em>s</em></td><td class="doxy_md" valign="top">)&nbsp;</td><td class="doxy_md" nowrap><code> [inline]</code></td></tr></table></td></tr></table><table border=0 cellpadding=0 cellspacing=5><tr><td> &nbsp; </td><td><p> Change minimum line width manipulator. <p><dl compact><dt><b>See also: </b><dd><a class="doxy_el" href="$(doxygen_html_classDGD_1_1channel)#a14">DGD::channel::min_width</a>(unsigned int) </dl></td></tr></table><a doxytag="DGD::maxwidth" name="a16"></a>
<p><table border=0 cellpadding=2 cellspacing=0 width="100%"><tr><td class="doxy_md"><table border=0 cellpadding=0 cellspacing=0><tr><td class="doxy_md" nowrap valign="top"><a class="doxy_el" href="$(doxygen_html_namespaceDGD)#a1">channel_manip_uint</a> maxwidth </td><td class="doxy_md" valign="top">(&nbsp;</td><td class="doxy_md" nowrap valign="top">unsigned int&nbsp;</td><td class="doxy_mdname1" nowrap valign="top">&nbsp; <em>s</em></td><td class="doxy_md" valign="top">)&nbsp;</td><td class="doxy_md" nowrap><code> [inline]</code></td></tr></table></td></tr></table><table border=0 cellpadding=0 cellspacing=5><tr><td> &nbsp; </td><td><p> Change maximum line width manipulator. <p><dl compact><dt><b>See also: </b><dd><a class="doxy_el" href="$(doxygen_html_classDGD_1_1channel)#a16">DGD::channel::max_width</a>(unsigned int) </dl></td></tr></table><a doxytag="DGD::wrap" name="a17"></a>
<p><table border=0 cellpadding=2 cellspacing=0 width="100%"><tr><td class="doxy_md"><table border=0 cellpadding=0 cellspacing=0><tr><td class="doxy_md" nowrap valign="top"><a class="doxy_el" href="$(doxygen_html_namespaceDGD)#a0">channel_manip_bool</a> wrap </td><td class="doxy_md" valign="top">(&nbsp;</td><td class="doxy_md" nowrap valign="top">bool&nbsp;</td><td class="doxy_mdname1" nowrap valign="top">&nbsp; <em>s</em></td><td class="doxy_md" valign="top">)&nbsp;</td><td class="doxy_md" nowrap><code> [inline]</code></td></tr></table></td></tr></table><table border=0 cellpadding=0 cellspacing=5><tr><td> &nbsp; </td><td><p> Enable/disable character wrapping manipulator. <p><dl compact><dt><b>See also: </b><dd><a class="doxy_el" href="$(doxygen_html_classDGD_1_1channel)#a18">DGD::channel::wrap</a>(bool) </dl></td></tr></table><a doxytag="DGD::word_wrap" name="a18"></a>
<p><table border=0 cellpadding=2 cellspacing=0 width="100%"><tr><td class="doxy_md"><table border=0 cellpadding=0 cellspacing=0><tr><td class="doxy_md" nowrap valign="top"><a class="doxy_el" href="$(doxygen_html_namespaceDGD)#a0">channel_manip_bool</a> word_wrap </td><td class="doxy_md" valign="top">(&nbsp;</td><td class="doxy_md" nowrap valign="top">bool&nbsp;</td><td class="doxy_mdname1" nowrap valign="top">&nbsp; <em>s</em></td><td class="doxy_md" valign="top">)&nbsp;</td><td class="doxy_md" nowrap><code> [inline]</code></td></tr></table></td></tr></table><table border=0 cellpadding=0 cellspacing=5><tr><td> &nbsp; </td><td><p> Enable/disable word wrapping manipulator. <p><dl compact><dt><b>See also: </b><dd><a class="doxy_el" href="$(doxygen_html_classDGD_1_1channel)#a20">DGD::channel::word_wrap</a>(bool) </dl></td></tr></table><a doxytag="DGD::operator&lt;&lt;" name="a19"></a>
<p><table border=0 cellpadding=2 cellspacing=0 width="100%"><tr><td class="doxy_md"><table border=0 cellpadding=0 cellspacing=0><tr><td class="doxy_md" colspan=4> template&lt;class First_type, class Second_type&gt; </td></tr><tr><td class="doxy_md" nowrap valign="top"><a class="doxy_el" href="$(doxygen_html_classDGD_1_1channel)">channel</a>&amp; operator&lt;&lt; </td><td class="doxy_md" valign="top">(&nbsp;</td><td class="doxy_md" nowrap valign="top"><a class="doxy_el" href="$(doxygen_html_classDGD_1_1channel)">channel</a> &amp;&nbsp;</td><td class="doxy_mdname" nowrap>&nbsp; <em>cnl</em>, </td></tr><tr><td></td><td></td><td class="doxy_md" nowrap>const std::pair&lt; First_type, Second_type &gt; &amp;&nbsp;</td><td class="doxy_mdname" nowrap>&nbsp; <em>p</em></td></tr><tr><td></td><td class="doxy_md">)&nbsp;</td><td class="doxy_md" colspan=2><code> [inline]</code></td></tr></table></td></tr></table><table border=0 cellpadding=0 cellspacing=5><tr><td> &nbsp; </td><td><p> Pair output operator. <p> Will print a pair in a form &quot;[first second]&quot; </td></tr></table><a doxytag="DGD::operator&lt;&lt;" name="a20"></a>
<p><table border=0 cellpadding=2 cellspacing=0 width="100%"><tr><td class="doxy_md"><table border=0 cellpadding=0 cellspacing=0><tr><td class="doxy_md" colspan=4> template&lt;&gt; </td></tr><tr><td class="doxy_md" nowrap valign="top"><a class="doxy_el" href="$(doxygen_html_classDGD_1_1channel)">channel</a>&amp; operator&lt;&lt; </td><td class="doxy_md" valign="top">(&nbsp;</td><td class="doxy_md" nowrap valign="top"><a class="doxy_el" href="$(doxygen_html_classDGD_1_1channel)">channel</a> &amp;&nbsp;</td><td class="doxy_mdname" nowrap>&nbsp; <em>cnl</em>, </td></tr><tr><td></td><td></td><td class="doxy_md" nowrap>const std::pair&lt; int, char ** &gt; &amp;&nbsp;</td><td class="doxy_mdname" nowrap>&nbsp; <em>params</em></td></tr><tr><td></td><td class="doxy_md">)&nbsp;</td><td class="doxy_md" colspan=2><code> [inline]</code></td></tr></table></td></tr></table><table border=0 cellpadding=0 cellspacing=5><tr><td> &nbsp; </td><td><p> Specialzation of pair output operator. <p> This one is used when printing an option set &lt;int argc, char** argv&gt; received by main(). Prints space separated options. </td></tr></table><a doxytag="DGD::operator&lt;&lt;" name="a21"></a>
<p><table border=0 cellpadding=2 cellspacing=0 width="100%"><tr><td class="doxy_md"><table border=0 cellpadding=0 cellspacing=0><tr><td class="doxy_md" colspan=4> template&lt;class Item_type&gt; </td></tr><tr><td class="doxy_md" nowrap valign="top"><a class="doxy_el" href="$(doxygen_html_classDGD_1_1channel)">channel</a>&amp; operator&lt;&lt; </td><td class="doxy_md" valign="top">(&nbsp;</td><td class="doxy_md" nowrap valign="top"><a class="doxy_el" href="$(doxygen_html_classDGD_1_1channel)">channel</a> &amp;&nbsp;</td><td class="doxy_mdname" nowrap>&nbsp; <em>cnl</em>, </td></tr><tr><td></td><td></td><td class="doxy_md" nowrap>const std::list&lt; Item_type &gt; &amp;&nbsp;</td><td class="doxy_mdname" nowrap>&nbsp; <em>l</em></td></tr><tr><td></td><td class="doxy_md">)&nbsp;</td><td class="doxy_md" colspan=2><code> [inline]</code></td></tr></table></td></tr></table><table border=0 cellpadding=0 cellspacing=5><tr><td> &nbsp; </td><td><p> List output operator. <p> Prints list in form: <div class="doxy_fragment"><pre> {
    item1
    item2
    ...
 }
</pre></div></td></tr></table><a doxytag="DGD::operator&lt;&lt;" name="a22"></a>
<p><table border=0 cellpadding=2 cellspacing=0 width="100%"><tr><td class="doxy_md"><table border=0 cellpadding=0 cellspacing=0><tr><td class="doxy_md" colspan=4> template&lt;class Item_type&gt; </td></tr><tr><td class="doxy_md" nowrap valign="top"><a class="doxy_el" href="$(doxygen_html_classDGD_1_1channel)">channel</a>&amp; operator&lt;&lt; </td><td class="doxy_md" valign="top">(&nbsp;</td><td class="doxy_md" nowrap valign="top"><a class="doxy_el" href="$(doxygen_html_classDGD_1_1channel)">channel</a> &amp;&nbsp;</td><td class="doxy_mdname" nowrap>&nbsp; <em>cnl</em>, </td></tr><tr><td></td><td></td><td class="doxy_md" nowrap>const std::vector&lt; Item_type &gt; &amp;&nbsp;</td><td class="doxy_mdname" nowrap>&nbsp; <em>v</em></td></tr><tr><td></td><td class="doxy_md">)&nbsp;</td><td class="doxy_md" colspan=2><code> [inline]</code></td></tr></table></td></tr></table><table border=0 cellpadding=0 cellspacing=5><tr><td> &nbsp; </td><td><p> Vector output operator. <p> Prints vector in form: <div class="doxy_fragment"><pre> {
    item1
    item2
    ...
 }
</pre></div></td></tr></table><a doxytag="DGD::operator&lt;&lt;" name="a23"></a>
<p><table border=0 cellpadding=2 cellspacing=0 width="100%"><tr><td class="doxy_md"><table border=0 cellpadding=0 cellspacing=0><tr><td class="doxy_md" colspan=4> template&lt;class Key_type, class Value_type&gt; </td></tr><tr><td class="doxy_md" nowrap valign="top"><a class="doxy_el" href="$(doxygen_html_classDGD_1_1channel)">channel</a>&amp; operator&lt;&lt; </td><td class="doxy_md" valign="top">(&nbsp;</td><td class="doxy_md" nowrap valign="top"><a class="doxy_el" href="$(doxygen_html_classDGD_1_1channel)">channel</a> &amp;&nbsp;</td><td class="doxy_mdname" nowrap>&nbsp; <em>cnl</em>, </td></tr><tr><td></td><td></td><td class="doxy_md" nowrap>const std::map&lt; Key_type, Value_type &gt; &amp;&nbsp;</td><td class="doxy_mdname" nowrap>&nbsp; <em>m</em></td></tr><tr><td></td><td class="doxy_md">)&nbsp;</td><td class="doxy_md" colspan=2><code> [inline]</code></td></tr></table></td></tr></table><table border=0 cellpadding=0 cellspacing=5><tr><td> &nbsp; </td><td><p> Map output operator. <p> Prints map in form: <div class="doxy_fragment"><pre> {
    item1
    item2
    ...
 }
</pre></div> Order of elements is defined by std::map&lt;...&gt;iterator </td></tr></table><a doxytag="DGD::mem_ref" name="a24"></a>
<p><table border=0 cellpadding=2 cellspacing=0 width="100%"><tr><td class="doxy_md"><table border=0 cellpadding=0 cellspacing=0><tr><td class="doxy_md" colspan=4> template&lt;class T&gt; </td></tr><tr><td class="doxy_md" nowrap valign="top"><a class="doxy_el" href="$(doxygen_html_structDGD_1_1dgd__reference)">dgd_reference</a>&lt;T&gt; mem_ref </td><td class="doxy_md" valign="top">(&nbsp;</td><td class="doxy_md" nowrap valign="top">const T *const&nbsp;</td><td class="doxy_mdname" nowrap>&nbsp; <em>p</em>, </td></tr><tr><td></td><td></td><td class="doxy_md" nowrap>const bool&nbsp;</td><td class="doxy_mdname" nowrap>&nbsp; <em>use_as_void</em> = true, </td></tr><tr><td></td><td></td><td class="doxy_md" nowrap>const unsigned int&nbsp;</td><td class="doxy_mdname" nowrap>&nbsp; <em>size</em> = 0</td></tr><tr><td></td><td class="doxy_md">)&nbsp;</td><td class="doxy_md" colspan=2><code> [inline]</code></td></tr></table></td></tr></table><table border=0 cellpadding=0 cellspacing=5><tr><td> &nbsp; </td><td><p> Memory reference manipulator. <p> This function is used as a <a class="doxy_el" href="$(doxygen_html_classDGD_1_1channel)">DGD::channel</a> manipulator for pointer formatting. It returns <a class="doxy_el" href="$(doxygen_html_structDGD_1_1dgd__reference)">dgd_reference</a> representing the memory pointer or block. The default values are set for T* pointer representation without hexa memory dump. <dl compact><dt><b>Parameters: </b><dd><table border=0 cellpadding=0 cellspacing=2><tr><td valign="top"><em>p</em>&nbsp;</td><td> - pointer to type T. This pointer is used for referencing only so it is full const. </td></tr><tr><td valign="top"><em>use_as_void</em>&nbsp;</td><td> - if true the p pointer will be treated as void*, otherwise it will be treated as T* and printed in form (T*)0xXXXXXXXX. </td></tr><tr><td valign="top"><em>size</em>&nbsp;</td><td> - if greater then zero p will be treated as a pointer to a memory block of that size, and when printed it will appear as hexa dump. </td></tr></table></dl><dl compact><dt><b>See also: </b><dd><a class="doxy_el" href="$(doxygen_html_namespaceDGD)#a25">DGD::mem</a>() </dl></td></tr></table><a doxytag="DGD::mem" name="a25"></a>
<p><table border=0 cellpadding=2 cellspacing=0 width="100%"><tr><td class="doxy_md"><table border=0 cellpadding=0 cellspacing=0><tr><td class="doxy_md" colspan=4> template&lt;class T&gt; </td></tr><tr><td class="doxy_md" nowrap valign="top"><a class="doxy_el" href="$(doxygen_html_structDGD_1_1dgd__reference)">dgd_reference</a>&lt;T&gt; mem </td><td class="doxy_md" valign="top">(&nbsp;</td><td class="doxy_md" nowrap valign="top">const T *const&nbsp;</td><td class="doxy_mdname" nowrap>&nbsp; <em>p</em>, </td></tr><tr><td></td><td></td><td class="doxy_md" nowrap>const unsigned int&nbsp;</td><td class="doxy_mdname" nowrap>&nbsp; <em>size</em> = sizeof(T), </td></tr><tr><td></td><td></td><td class="doxy_md" nowrap>const bool&nbsp;</td><td class="doxy_mdname" nowrap>&nbsp; <em>use_as_void</em> = true</td></tr><tr><td></td><td class="doxy_md">)&nbsp;</td><td class="doxy_md" colspan=2><code> [inline]</code></td></tr></table></td></tr></table><table border=0 cellpadding=0 cellspacing=5><tr><td> &nbsp; </td><td><p> Memory reference manipulator. <p> This function is almost identical to <a class="doxy_el" href="$(doxygen_html_namespaceDGD)#a24">DGD::mem_ref</a>(), the only difference that default values are set to T* pointer with hexa memory dump of T. <dl compact><dt><b>See also: </b><dd><a class="doxy_el" href="$(doxygen_html_namespaceDGD)#a24">DGD::mem_ref</a>() </dl></td></tr></table><a doxytag="DGD::operator&lt;&lt;" name="a26"></a>
<p><table border=0 cellpadding=2 cellspacing=0 width="100%"><tr><td class="doxy_md"><table border=0 cellpadding=0 cellspacing=0><tr><td class="doxy_md" colspan=4> template&lt;class T&gt; </td></tr><tr><td class="doxy_md" nowrap valign="top"> std::ostream&amp; operator&lt;&lt; </td><td class="doxy_md" valign="top">(&nbsp;</td><td class="doxy_md" nowrap valign="top">std::ostream &amp;&nbsp;</td><td class="doxy_mdname" nowrap>&nbsp; <em>cnl</em>, </td></tr><tr><td></td><td></td><td class="doxy_md" nowrap>const <a class="doxy_el" href="$(doxygen_html_structDGD_1_1dgd__reference)">dgd_reference</a>&lt; T &gt; &amp;&nbsp;</td><td class="doxy_mdname" nowrap>&nbsp; <em>ptr</em></td></tr><tr><td></td><td class="doxy_md">)&nbsp;</td><td class="doxy_md" colspan=2><code> [inline]</code></td></tr></table></td></tr></table><table border=0 cellpadding=0 cellspacing=5><tr><td> &nbsp; </td><td><p> Output operator for pointer and memory dump. <p> Prints out pointer hex value, and optionally it's type and hexa dump of referenced memory. </td></tr></table><hr>
<h2>Variable Documentation</h2>
<a doxytag="DGD::incr" name="a2"></a>
<p><table border=0 cellpadding=2 cellspacing=0 width="100%"><tr><td class="doxy_md"><table border=0 cellpadding=0 cellspacing=0><tr><td class="doxy_md" nowrap valign="top"> const <a class="doxy_el" href="$(doxygen_html_classDGD_1_1channel__manip__void)">channel_manip_void</a> DGD::incr = <a class="doxy_el" href="$(doxygen_html_classDGD_1_1channel__manip__void)">channel_manip_void</a>( &amp;channel::incr_indent ) </td></tr></table></td></tr></table><table border=0 cellpadding=0 cellspacing=5><tr><td> &nbsp; </td><td><p> Indentation increment manipulator for DGD:channel. <p><dl compact><dt><b>See also: </b><dd><a class="doxy_el" href="$(doxygen_html_classDGD_1_1channel)#a10">DGD::channel::incr_indent</a>() </dl></td></tr></table><a doxytag="DGD::decr" name="a3"></a>
<p><table border=0 cellpadding=2 cellspacing=0 width="100%"><tr><td class="doxy_md"><table border=0 cellpadding=0 cellspacing=0><tr><td class="doxy_md" nowrap valign="top"> const <a class="doxy_el" href="$(doxygen_html_classDGD_1_1channel__manip__void)">channel_manip_void</a> DGD::decr = <a class="doxy_el" href="$(doxygen_html_classDGD_1_1channel__manip__void)">channel_manip_void</a>( &amp;channel::decr_indent ) </td></tr></table></td></tr></table><table border=0 cellpadding=0 cellspacing=5><tr><td> &nbsp; </td><td><p> Indentation decrement manipulator for DGD:channel. <p><dl compact><dt><b>See also: </b><dd><a class="doxy_el" href="$(doxygen_html_classDGD_1_1channel)#a11">DGD::channel::decr_indent</a>() </dl></td></tr></table><a doxytag="DGD::dgd" name="a4"></a>
<p><table border=0 cellpadding=2 cellspacing=0 width="100%"><tr><td class="doxy_md"><table border=0 cellpadding=0 cellspacing=0><tr><td class="doxy_md" nowrap valign="top"> const <a class="doxy_el" href="$(doxygen_html_classDGD_1_1channel__manip__nop)">channel_manip_nop</a> DGD::dgd = <a class="doxy_el" href="$(doxygen_html_classDGD_1_1channel__manip__nop)">channel_manip_nop</a>() </td></tr></table></td></tr></table><table border=0 cellpadding=0 cellspacing=5><tr><td> &nbsp; </td><td><p> Explicit conversion manipulator for DGD:channel. <p> This manipulator has no effect on any channel. It is used to solve ambiguities between output operators for the same type. Here is brief scenario explaining what <a class="doxy_el" href="$(doxygen_html_namespaceDGD)#a4">DGD::dgd</a> is good for. Suppose you have an Int class. Suppose you already have output operator for this class: <br><div class="doxy_fragment"><pre> std::ostream&amp; <a class="doxy_code" href="$(doxygen_html_namespaceDGD)#a9">operator &lt;&lt;</a>( std::ostream&amp; ostr, <span class="doxy_keyword">const</span> Int&amp; val ) {
 ... 
 }
</pre></div> Now for some reason you want Int to appear in your debug logs in hexa. The simplest way to accomplish this is to rewrite the output operator and put the following in: <div class="doxy_fragment"><pre> ...
 <span class="doxy_keywordflow">if</span>( dynamic_cast&lt;DGD::channel*&gt;(&amp;ostr) != NULL ) {
   ... output debug stuff ...
 } <span class="doxy_keywordflow">else</span> {
   ... output usual stuff ...
 }
 ...
</pre></div> This approach is good, but what if you do not want to change the output operator? The answer is simple - write output operator for <a class="doxy_el" href="$(doxygen_html_classDGD_1_1channel)">DGD::channel</a>: <div class="doxy_fragment"><pre> <a class="doxy_code" href="$(doxygen_html_classDGD_1_1channel)">DGD::channel</a>&amp; <a class="doxy_code" href="$(doxygen_html_namespaceDGD)#a9">operator &lt;&lt; </a>( <a class="doxy_code" href="$(doxygen_html_classDGD_1_1channel)">DGD::channel</a>&amp; cnl, <span class="doxy_keyword">const</span> Int&amp; val ) {
 ... 
 }
</pre></div> This approach has actually one weakness: The following code will actually call std::ostream's operator instead <a class="doxy_el" href="$(doxygen_html_classDGD_1_1channel)">DGD::channel</a>'s one: <div class="doxy_fragment"><pre> Int a(0xFF);
 channel debug(...);
 debug &lt;&lt; <span class="doxy_stringliteral">&quot;a = &quot;</span> &lt;&lt; a &lt;&lt; ednl; <span class="doxy_comment">// This will print 256 instead of FF</span>
</pre></div> You are invited to guess why does this happen. Here comes <a class="doxy_el" href="$(doxygen_html_namespaceDGD)#a4">DGD::dgd</a>. <div class="doxy_fragment"><pre> debug &lt;&lt; <span class="doxy_stringliteral">&quot;a = &quot;</span> &lt;&lt; DGD::dgd &lt;&lt; a &lt;&lt; endl; <span class="doxy_comment">// works well!</span>
</pre></div> It does not affect the stream, but explicitly returns reference to <a class="doxy_el" href="$(doxygen_html_classDGD_1_1channel)">DGD::channel</a>, thus ensuring the right operator call. </td></tr></table><hr><address style="align: right;"><small>Generated on Mon Dec 9 18:30:02 2002 for Depression Glass Debug Library by <a href="http://www.doxygen.org/index.html"> <img align="middle" alt="doxygen" border=0 height=53 src="$(doxygen)" width=110></a>1.2.17 </small></address>
</content>

<content name="doxygen_html_namespacemembers" format="text/html">
<wmmeta name="title" value="Namespace Member Index" />
<h1>Depression Glass Debug Library Namespace Members</h1>
<center><a href="#index_a">a</a>&nbsp;|&nbsp;<a href="#index_c">c</a>&nbsp;|&nbsp;<a href="#index_d">d</a>&nbsp;|&nbsp;<a href="#index_i">i</a>&nbsp;|&nbsp;<a href="#index_m">m</a>&nbsp;|&nbsp;<a href="#index_o">o</a>&nbsp;|&nbsp;<a href="#index_s">s</a>&nbsp;|&nbsp;<a href="#index_w">w</a></center>
<p> Here is a list of all namespace members with links to the namespace documentation for each member:
<h3><a name="index_a">- a -</a></h3>
<ul><li>assoc() : <a class="doxy_el" href="$(doxygen_html_namespaceDGD)#a8">DGD</a></ul>
<h3><a name="index_c">- c -</a></h3>
<ul><li>channel_manip_bool : <a class="doxy_el" href="$(doxygen_html_namespaceDGD)#a0">DGD</a><li>channel_manip_uint : <a class="doxy_el" href="$(doxygen_html_namespaceDGD)#a1">DGD</a></ul>
<h3><a name="index_d">- d -</a></h3>
<ul><li>decr : <a class="doxy_el" href="$(doxygen_html_namespaceDGD)#a3">DGD</a><li>dgd : <a class="doxy_el" href="$(doxygen_html_namespaceDGD)#a4">DGD</a></ul>
<h3><a name="index_i">- i -</a></h3>
<ul><li>incr : <a class="doxy_el" href="$(doxygen_html_namespaceDGD)#a2">DGD</a><li>indent() : <a class="doxy_el" href="$(doxygen_html_namespaceDGD)#a14">DGD</a></ul>
<h3><a name="index_m">- m -</a></h3>
<ul><li>maxwidth() : <a class="doxy_el" href="$(doxygen_html_namespaceDGD)#a16">DGD</a><li>mem() : <a class="doxy_el" href="$(doxygen_html_namespaceDGD)#a25">DGD</a><li>mem_ref() : <a class="doxy_el" href="$(doxygen_html_namespaceDGD)#a24">DGD</a><li>minwidth() : <a class="doxy_el" href="$(doxygen_html_namespaceDGD)#a15">DGD</a></ul>
<h3><a name="index_o">- o -</a></h3>
<ul><li>operator&lt;&lt;() : <a class="doxy_el" href="$(doxygen_html_namespaceDGD)#a26">DGD</a></ul>
<h3><a name="index_s">- s -</a></h3>
<ul><li>step() : <a class="doxy_el" href="$(doxygen_html_namespaceDGD)#a13">DGD</a><li>stream : <a class="doxy_el" href="$(doxygen_html_namespaceDGD)#a5">DGD</a></ul>
<h3><a name="index_w">- w -</a></h3>
<ul><li>word_wrap() : <a class="doxy_el" href="$(doxygen_html_namespaceDGD)#a18">DGD</a><li>wrap() : <a class="doxy_el" href="$(doxygen_html_namespaceDGD)#a17">DGD</a></ul>
<hr>
<address style="align: right;"><small>Generated on Mon Dec 9 18:30:06 2002 for Depression Glass Debug Library by <a href="http://www.doxygen.org/index.html"> <img align="middle" alt="doxygen" border=0 height=53 src="$(doxygen)" width=110></a>1.2.17 </small></address>
</content>

<content name="doxygen_html_namespaces" format="text/html">
<wmmeta name="title" value="Namespace Index" />
<h1>Depression Glass Debug Library Namespace List</h1>
Here is a list of all namespaces with brief descriptions:<table><tr><td class="doxy_indexkey"><a class="doxy_el" href="$(doxygen_html_namespaceDGD)">DGD</a></td><td class="doxy_indexvalue">Depression Glass namespace</td></tr></table>
<hr>
<address style="align: right;"><small>Generated on Mon Dec 9 18:30:02 2002 for Depression Glass Debug Library by <a href="http://www.doxygen.org/index.html"> <img align="middle" alt="doxygen" border=0 height=53 src="$(doxygen)" width=110></a>1.2.17 </small></address>
</content>

<content name="doxygen_html_pages" format="text/html">
<wmmeta name="title" value="Page Index" />
<h1>Depression Glass Debug Library Related Pages</h1>
Here is a list of all related documentation pages:<ul><li><a class="doxy_el" href="$(doxygen_html_tutor_channel)">DGD Channels - Things you need to know</a><li><a class="doxy_el" href="$(doxygen_html_tutor_assoc)">DGD Channels - Ensuring real output</a><li><a class="doxy_el" href="$(doxygen_html_tutor_channelbuf)">DGD Basics - channelbuf</a><li><a class="doxy_el" href="$(doxygen_html_tutor_formatting)">DGD Basics - Formatting</a></ul>
<hr>
<address style="align: right;"><small>Generated on Mon Dec 9 18:30:06 2002 for Depression Glass Debug Library by <a href="http://www.doxygen.org/index.html"> <img align="middle" alt="doxygen" border=0 height=53 src="$(doxygen)" width=110></a>1.2.17 </small></address>
</content>

<content name="doxygen_html_structDGD_1_1dgd__reference-members" format="text/html">
<wmmeta name="title" value="Member List" />
<h1>DGD::dgd_reference&lt; T &gt; Member List</h1>
This is the complete list of members for <a class="doxy_el" href="$(doxygen_html_structDGD_1_1dgd__reference)">DGD::dgd_reference&lt; T &gt;</a>
, including all inherited members.<table><tr bgcolor="#f0f0f0"><td><a class="doxy_el" href="$(doxygen_html_structDGD_1_1dgd__reference)#a0">dgd_reference</a>()</td><td><a class="doxy_el" href="$(doxygen_html_structDGD_1_1dgd__reference)">DGD::dgd_reference&lt; T &gt;</a></td><td><code> [inline]</code></td></tr><tr bgcolor="#f0f0f0"><td><a class="doxy_el" href="$(doxygen_html_structDGD_1_1dgd__reference)#a1">dgd_reference</a>(const T *const p, const bool use_as_void=false, const unsigned int size=0)</td><td><a class="doxy_el" href="$(doxygen_html_structDGD_1_1dgd__reference)">DGD::dgd_reference&lt; T &gt;</a></td><td><code> [inline, explicit]</code></td></tr><tr bgcolor="#f0f0f0"><td><a class="doxy_el" href="$(doxygen_html_structDGD_1_1dgd__reference)#a2">dgd_reference</a>(const dgd_reference &amp;peer)</td><td><a class="doxy_el" href="$(doxygen_html_structDGD_1_1dgd__reference)">DGD::dgd_reference&lt; T &gt;</a></td><td><code> [inline]</code></td></tr><tr bgcolor="#f0f0f0"><td><a class="doxy_el" href="$(doxygen_html_structDGD_1_1dgd__reference)#m0">m_pointer</a></td><td><a class="doxy_el" href="$(doxygen_html_structDGD_1_1dgd__reference)">DGD::dgd_reference&lt; T &gt;</a></td><td></td></tr><tr bgcolor="#f0f0f0"><td><a class="doxy_el" href="$(doxygen_html_structDGD_1_1dgd__reference)#m2">m_size</a></td><td><a class="doxy_el" href="$(doxygen_html_structDGD_1_1dgd__reference)">DGD::dgd_reference&lt; T &gt;</a></td><td></td></tr><tr bgcolor="#f0f0f0"><td><a class="doxy_el" href="$(doxygen_html_structDGD_1_1dgd__reference)#m1">m_use_as_void</a></td><td><a class="doxy_el" href="$(doxygen_html_structDGD_1_1dgd__reference)">DGD::dgd_reference&lt; T &gt;</a></td><td></td></tr></table>
<hr>
<address style="align: right;"><small>Generated on Mon Dec 9 18:30:03 2002 for Depression Glass Debug Library by <a href="http://www.doxygen.org/index.html"> <img align="middle" alt="doxygen" border=0 height=53 src="$(doxygen)" width=110></a>1.2.17 </small></address>
</content>

<content name="doxygen_html_structDGD_1_1dgd__reference" format="text/html">
<wmmeta name="title" value=" TemplateDGD::dgd_reference struct Reference" />
<h1>DGD::dgd_reference&lt; T &gt; Struct Template Reference</h1>
Memory location/block. <a href="#_details">More...</a>
<p><code>#include &lt;<a class="doxy_el" href="$(doxygen_html_dgDebugStd_8h-source)">dgDebugStd.h</a>&gt;</code>
<p> Collaboration diagram for DGD::dgd_reference&lt; T &gt;:
<p><center><img alt="Collaboration graph" border=0 src="$(structDGD_1_1dgd__reference__coll__graph)" usemap="#DGD_1_1dgd__reference_3_01T_01_4__coll__map"></center><center><font size=2>[<a href="$(doxygen_html_graph_legend)">legend</a>]</font></center><a href="$(doxygen_html_structDGD_1_1dgd__reference-members)">List of all members.</a>
<h2>Public Methods</h2>
<ul><li><a class="doxy_el" href="$(doxygen_html_structDGD_1_1dgd__reference)#a0">dgd_reference</a> () <li><a class="doxy_el" href="$(doxygen_html_structDGD_1_1dgd__reference)#a1">dgd_reference</a> (const T *const p, const bool use_as_void=false, const unsigned int size=0) <li><a class="doxy_el" href="$(doxygen_html_structDGD_1_1dgd__reference)#a2">dgd_reference</a> (const dgd_reference &amp;peer) </ul>
<h2>Public Attributes</h2>
<ul><li>const T *const <a class="doxy_el" href="$(doxygen_html_structDGD_1_1dgd__reference)#m0">m_pointer</a><li>const bool <a class="doxy_el" href="$(doxygen_html_structDGD_1_1dgd__reference)#m1">m_use_as_void</a><li>const unsigned int <a class="doxy_el" href="$(doxygen_html_structDGD_1_1dgd__reference)#m2">m_size</a></ul>
<hr>
<a name="_details"></a>
<h2>Detailed Description</h2>
<h3>template&lt;class T&gt;<br> struct DGD::dgd_reference&lt; T &gt;</h3>
 Memory location/block. <p> This class is used to print extended information about pointers and memory blocks. It encapsulates a pointer and optionally contains information about size of memory block referenced by the pointer. 
<p><hr>
<h2>Constructor &amp; Destructor Documentation</h2>
<a doxytag="DGD::dgd_reference::dgd_reference" name="a0"></a>
<p><table border=0 cellpadding=2 cellspacing=0 width="100%"><tr><td class="doxy_md"><table border=0 cellpadding=0 cellspacing=0><tr><td class="doxy_md" colspan=4> template&lt;class T&gt; </td></tr><tr><td class="doxy_md" nowrap valign="top"> DGD::dgd_reference&lt; T &gt;::dgd_reference </td><td class="doxy_md" valign="top">(&nbsp;</td><td class="doxy_mdname1" nowrap valign="top">&nbsp; </td><td class="doxy_md" valign="top">)&nbsp;</td><td class="doxy_md" nowrap><code> [inline]</code></td></tr></table></td></tr></table><table border=0 cellpadding=0 cellspacing=5><tr><td> &nbsp; </td><td><p></td></tr></table><a doxytag="DGD::dgd_reference::dgd_reference" name="a1"></a>
<p><table border=0 cellpadding=2 cellspacing=0 width="100%"><tr><td class="doxy_md"><table border=0 cellpadding=0 cellspacing=0><tr><td class="doxy_md" colspan=4> template&lt;class T&gt; </td></tr><tr><td class="doxy_md" nowrap valign="top"> DGD::dgd_reference&lt; T &gt;::dgd_reference </td><td class="doxy_md" valign="top">(&nbsp;</td><td class="doxy_md" nowrap valign="top">const T *const&nbsp;</td><td class="doxy_mdname" nowrap>&nbsp; <em>p</em>, </td></tr><tr><td></td><td></td><td class="doxy_md" nowrap>const bool&nbsp;</td><td class="doxy_mdname" nowrap>&nbsp; <em>use_as_void</em> = false, </td></tr><tr><td></td><td></td><td class="doxy_md" nowrap>const unsigned int&nbsp;</td><td class="doxy_mdname" nowrap>&nbsp; <em>size</em> = 0</td></tr><tr><td></td><td class="doxy_md">)&nbsp;</td><td class="doxy_md" colspan=2><code> [inline, explicit]</code></td></tr></table></td></tr></table><table border=0 cellpadding=0 cellspacing=5><tr><td> &nbsp; </td><td><p></td></tr></table><a doxytag="DGD::dgd_reference::dgd_reference" name="a2"></a>
<p><table border=0 cellpadding=2 cellspacing=0 width="100%"><tr><td class="doxy_md"><table border=0 cellpadding=0 cellspacing=0><tr><td class="doxy_md" colspan=4> template&lt;class T&gt; </td></tr><tr><td class="doxy_md" nowrap valign="top"> DGD::dgd_reference&lt; T &gt;::dgd_reference </td><td class="doxy_md" valign="top">(&nbsp;</td><td class="doxy_md" nowrap valign="top">const dgd_reference&lt; T &gt; &amp;&nbsp;</td><td class="doxy_mdname1" nowrap valign="top">&nbsp; <em>peer</em></td><td class="doxy_md" valign="top">)&nbsp;</td><td class="doxy_md" nowrap><code> [inline]</code></td></tr></table></td></tr></table><table border=0 cellpadding=0 cellspacing=5><tr><td> &nbsp; </td><td><p></td></tr></table><hr>
<h2>Member Data Documentation</h2>
<a doxytag="DGD::dgd_reference::m_pointer" name="m0"></a>
<p><table border=0 cellpadding=2 cellspacing=0 width="100%"><tr><td class="doxy_md"><table border=0 cellpadding=0 cellspacing=0><tr><td class="doxy_md" colspan=4> template&lt;class T&gt; </td></tr><tr><td class="doxy_md" nowrap valign="top"> const T* const DGD::dgd_reference&lt; T &gt;::m_pointer </td></tr></table></td></tr></table><table border=0 cellpadding=0 cellspacing=5><tr><td> &nbsp; </td><td><p></td></tr></table><a doxytag="DGD::dgd_reference::m_use_as_void" name="m1"></a>
<p><table border=0 cellpadding=2 cellspacing=0 width="100%"><tr><td class="doxy_md"><table border=0 cellpadding=0 cellspacing=0><tr><td class="doxy_md" colspan=4> template&lt;class T&gt; </td></tr><tr><td class="doxy_md" nowrap valign="top"> const bool DGD::dgd_reference&lt; T &gt;::m_use_as_void </td></tr></table></td></tr></table><table border=0 cellpadding=0 cellspacing=5><tr><td> &nbsp; </td><td><p></td></tr></table><a doxytag="DGD::dgd_reference::m_size" name="m2"></a>
<p><table border=0 cellpadding=2 cellspacing=0 width="100%"><tr><td class="doxy_md"><table border=0 cellpadding=0 cellspacing=0><tr><td class="doxy_md" colspan=4> template&lt;class T&gt; </td></tr><tr><td class="doxy_md" nowrap valign="top"> const unsigned int DGD::dgd_reference&lt; T &gt;::m_size </td></tr></table></td></tr></table><table border=0 cellpadding=0 cellspacing=5><tr><td> &nbsp; </td><td><p></td></tr></table><hr>The documentation for this struct was generated from the following file:<ul><li><a class="doxy_el" href="$(doxygen_html_dgDebugStd_8h-source)">dgDebugStd.h</a></ul><hr><address style="align: right;"><small>Generated on Mon Dec 9 18:30:03 2002 for Depression Glass Debug Library by <a href="http://www.doxygen.org/index.html"> <img align="middle" alt="doxygen" border=0 height=53 src="$(doxygen)" width=110></a>1.2.17 </small></address>
</content>

<content name="doxygen_html_tutor_assoc" format="text/html">
<wmmeta name="title" value="DGD Channels - Ensuring real output" />
<h2><a name="tutor_assoc">DGD Channels - Ensuring real output</a></h2>
 Here we go. <a class="doxy_el" href="$(doxygen_html_classDGD_1_1channel)">DGD::channel</a>
 makes no physical output, but makes formatting. To get the actual output we need to associate the channel with a physical stream e.g std::cout, sort of std::ofstream or any other object which is derived from std::ostream. There are three assoc() functions for making the association: <div class="doxy_fragment"><pre> <span class="doxy_keywordtype">void</span> assoc( std::ostream* s, channel&amp; channel );
 <span class="doxy_keywordtype">void</span> assoc( std::ostream&amp; s, channel&amp; channel );
 <span class="doxy_keywordtype">void</span> assoc( std::ostream* s, <span class="doxy_keyword">const</span> std::string&amp; name );
</pre></div>
<p> All functions make the same job, but the later one assumes existence of the <a class="doxy_el" href="$(doxygen_html_classDGD_1_1Debug)">DGD::Debug</a> factory and queries the channel object from the factory by the given name. 
<p> The only remaining tricky question about associations is: what if I make more then one association of the same channel, or more then one with the same physical stream? In fact <a class="doxy_el" href="$(doxygen_html_namespaceDGD)">DGD</a> makes no restrictions on what do you associate, how and when. So, for example, it is legal to associate the same channel with std::cout and std::cerr, the channel will replicate its output into both streams. It is legal to register the same channel twice with the same stream, its output will be duplicated in this stream. 
<p> There are two additional association schemes worth to be mentioned here. 
<p> It is possible to associate two different channels with the same physical stream. But in this case <a class="doxy_el" href="$(doxygen_html_namespaceDGD)">DGD</a> makes no garanties on validity of the resulting stream formatting. Surely, there is other simple way to avoid the problem and allow output from multiple channels into single physical buffer. 
<p> To avoid the problem mentioned above lets remind that assoc() functions accept any std::ostream as a physical stream and DGD::chnnel itself derives from std::ostream. So, it is possible to associate <a class="doxy_el" href="$(doxygen_html_classDGD_1_1channel)">DGD::channel</a> with another <a class="doxy_el" href="$(doxygen_html_classDGD_1_1channel)">DGD::channel</a>. Te problem could be solved by associating a single channel with a physical stream and then associating multiple other channels with that first channel. The example below demonstrates the soulution. <div class="doxy_fragment"><pre><span class="doxy_comment">// associate multiple channels with cout</span>

<span class="doxy_preprocessor">#include &lt;<a class="doxy_code" href="$(doxygen_html_dgChannel_8h)">dgChannel.h</a>&gt;</span>

<span class="doxy_keywordtype">int</span> main( <span class="doxy_keywordtype">int</span> argc, <span class="doxy_keywordtype">char</span>** argv ) {
   <a class="doxy_code" href="$(doxygen_html_classDGD_1_1channel)">DGD::channel</a> base( <span class="doxy_stringliteral">&quot;base&quot;</span> );
   <a class="doxy_code" href="$(doxygen_html_namespaceDGD)#a6">DGD::assoc</a>( std::cout, base );
   base.<a class="doxy_code" href="$(doxygen_html_classDGD_1_1channel)#a1">open</a>();

   <a class="doxy_code" href="$(doxygen_html_classDGD_1_1channel)">DGD::channel</a> a( <span class="doxy_stringliteral">&quot;channel_a&quot;</span> );
   <a class="doxy_code" href="$(doxygen_html_namespaceDGD)#a6">DGD::assoc</a>( base, a );
   a.<a class="doxy_code" href="$(doxygen_html_classDGD_1_1channel)#a1">open</a>();

   <a class="doxy_code" href="$(doxygen_html_classDGD_1_1channel)">DGD::channel</a> b( <span class="doxy_stringliteral">&quot;channel_b&quot;</span> );
   <a class="doxy_code" href="$(doxygen_html_namespaceDGD)#a6">DGD::assoc</a>( base, b );
   b.<a class="doxy_code" href="$(doxygen_html_classDGD_1_1channel)#a1">open</a>();
   
   a &lt;&lt; <span class="doxy_stringliteral">&quot;here is channel A&quot;</span> &lt;&lt; std::endl;
   b &lt;&lt; <span class="doxy_stringliteral">&quot;here is channel B&quot;</span> &lt;&lt; std::endl;

   <span class="doxy_keywordflow">return</span> 0;
}
</pre></div>
<p><hr><address style="align: right;"><small>Generated on Mon Dec 9 18:30:02 2002 for Depression Glass Debug Library by <a href="http://www.doxygen.org/index.html"> <img align="middle" alt="doxygen" border=0 height=53 src="$(doxygen)" width=110></a>1.2.17 </small></address>
</content>

<content name="doxygen_html_tutor_channel" format="text/html">
<wmmeta name="title" value="DGD Channels - Things you need to know" />
<h2><a name="tutor_channel">DGD Channels - Things you need to know</a></h2>
<a class="doxy_el" href="$(doxygen_html_classDGD_1_1channelbuf)">DGD::channelbuf</a>
 can't be used to make output. After all, it is derived from std::streambuf which is a kind of memory buffer. There must be a stream. The <a class="doxy_el" href="$(doxygen_html_classDGD_1_1channel)">DGD::channel</a>
 is such a stream. <p> Everything which <a href="$(doxygen_html_tutor_formatting)#tutor_formatting">was told about formatting</a> is also true for <a class="doxy_el" href="$(doxygen_html_classDGD_1_1channel)">DGD::channel</a>. If fact, it has all formatting-related methods as <a class="doxy_el" href="$(doxygen_html_classDGD_1_1channelbuf)">DGD::channelbuf</a> has. 
<p> There is a number of things which differ <a class="doxy_el" href="$(doxygen_html_classDGD_1_1channel)">DGD::channel</a> from std::ostream: <ul><li> Channels are named. There is no default constructor. You must pass a name of the channel when creating it. <li> Channels can be opened and closed. Closed channel makes no output. By default it is closed. Use <a class="doxy_el" href="$(doxygen_html_classDGD_1_1channel)#a1">DGD::channel::open</a>() method to open the channel. There is also <a class="doxy_el" href="$(doxygen_html_classDGD_1_1channel)#a3">DGD::channel::is_open</a>() and <a class="doxy_el" href="$(doxygen_html_classDGD_1_1channel)#a4">DGD::channel::operator bool</a>() which return the status of the channel. <li><a class="doxy_el" href="$(doxygen_html_classDGD_1_1channel)">DGD::channel</a> makes no physical output, just formatting. To achieve the output it must be associated with a physical stream such as std::cout. Use <a class="doxy_el" href="$(doxygen_html_namespaceDGD)#a6">DGD::assoc</a>() functions to <a href="$(doxygen_html_tutor_assoc)#tutor_assoc">make the association</a>. </ul><hr><address style="align: right;"><small>Generated on Mon Dec 9 18:30:02 2002 for Depression Glass Debug Library by <a href="http://www.doxygen.org/index.html"> <img align="middle" alt="doxygen" border=0 height=53 src="$(doxygen)" width=110></a>1.2.17 </small></address>
</content>

<content name="doxygen_html_tutor_channelbuf" format="text/html">
<wmmeta name="title" value="DGD Basics - channelbuf" />
<h2><a name="tutor_channelbuf">DGD Basics - channelbuf</a></h2>
<a class="doxy_el" href="$(doxygen_html_classDGD_1_1channelbuf)">DGD::channelbuf</a>
 is a basic class in the library. In fact, <a class="doxy_el" href="$(doxygen_html_namespaceDGD)">DGD</a>
 is started from the single class. Channelbuf can be used as stand-alone std::streambuf for formatting output. Lets consider the example: <div class="doxy_fragment"><pre><span class="doxy_comment">// format output with channelbuf</span>

<span class="doxy_preprocessor">#include &lt;<a class="doxy_code" href="$(doxygen_html_dgChannelBuf_8h)">dgChannelBuf.h</a>&gt;</span>
<span class="doxy_preprocessor">#include &lt;<a class="doxy_code" href="$(doxygen_html_dgStream_8h)">dgStream.h</a>&gt;</span>

main( <span class="doxy_keywordtype">int</span> argc, <span class="doxy_keywordtype">char</span>** argv ) {
   <a class="doxy_code" href="$(doxygen_html_classDGD_1_1channelbuf)">DGD::channelbuf</a> formatter;

   formatter.pubsetbuf( NULL, 100 );
   formatter.<a class="doxy_code" href="$(doxygen_html_classDGD_1_1channelbuf)#a2">assoc</a>( &amp;std::cout );

   std::ostream formatting_stream( &amp;formatter );

   formatting_stream &lt;&lt; <span class="doxy_stringliteral">&quot;Hello! This is actally very very very &quot;</span> 
                     &lt;&lt; <span class="doxy_stringliteral">&quot;very very very very very very very very &quot;</span> 
                     &lt;&lt; <span class="doxy_stringliteral">&quot;very very very very very very very long line!&quot;</span> 
                     &lt;&lt; std::endl;
   <span class="doxy_keywordflow">return</span> 0;
}
</pre></div>
 For this example the formatter is declared as a local variable. In practice this is usually not so good idea because std::streambuf is usually registered in some std::ostream. The channelbuf constructor does not allocate any memory. So line <div class="doxy_fragment"><pre>       formatter.pubsetbuf( NULL, 100 );
</pre></div>
 allocates buffer of 100 bytes in size. The first NULL parameter will cause internal memory allocation, while non-NULL first parameter will be treated as a pointer to the already allocated buffer. <p> Note that formatter makes no <code>physical</code> output, it just makes formatting. To achieve the physical output we must associate channelbuf with physical stream, for example std::cout: <div class="doxy_fragment"><pre>       formatter.assoc( &amp;std::cout );
</pre></div> Now, when the formatter is defined and associated with standard output we can make some output. But channelbuf can't do output itself. So we need an output stream: <div class="doxy_fragment"><pre>       std::ostream formatting_stream( &amp;formatter );
</pre></div> The next line will produce the following: <div class="doxy_fragment"><pre> Hello! This is actally very very very very very very very very very very
 very very very very very very very very <span class="doxy_keywordtype">long</span> line!
</pre></div>
<p> Note how the formatter split the line in two. By default it has word wrapping turned on and maximum line length 79. You can easily change the defaults. Read the next chapter to learn that. 
<p><hr><address style="align: right;"><small>Generated on Mon Dec 9 18:30:02 2002 for Depression Glass Debug Library by <a href="http://www.doxygen.org/index.html"> <img align="middle" alt="doxygen" border=0 height=53 src="$(doxygen)" width=110></a>1.2.17 </small></address>
</content>

<content name="doxygen_html_tutor_formatting" format="text/html">
<wmmeta name="title" value="DGD Basics - Formatting" />
<h2><a name="tutor_formatting">DGD Basics - Formatting</a></h2>
 Channelbuf makes no physical output. Instead, it makes some formatting on what it gets and then pipes already formatted output to the associated physical stream. In this chapter we will learn how the formatting is done. Consider the following example: <div class="doxy_fragment"><pre><span class="doxy_comment">// format output with channelbuf</span>

<span class="doxy_preprocessor">#include &lt;<a class="doxy_code" href="$(doxygen_html_dgChannel_8h)">dgChannel.h</a>&gt;</span>
<span class="doxy_preprocessor">#include &lt;<a class="doxy_code" href="$(doxygen_html_dgStream_8h)">dgStream.h</a>&gt;</span>

main( <span class="doxy_keywordtype">int</span> argc, <span class="doxy_keywordtype">char</span>** argv ) {
   <a class="doxy_code" href="$(doxygen_html_classDGD_1_1channel)">DGD::channel</a> formatter( <span class="doxy_stringliteral">&quot;formatter&quot;</span> );

   <a class="doxy_code" href="$(doxygen_html_namespaceDGD)#a6">DGD::assoc</a>( &amp;std::cout, formatter );
   formatter.<a class="doxy_code" href="$(doxygen_html_classDGD_1_1channel)#a1">open</a>();

   formatter &lt;&lt; <span class="doxy_stringliteral">&quot;Hello! This is actally very very very &quot;</span> 
             &lt;&lt; <span class="doxy_stringliteral">&quot;very very very very very very very very &quot;</span> 
             &lt;&lt; <span class="doxy_stringliteral">&quot;very very very very very very very long line!&quot;</span> 
             &lt;&lt; <span class="doxy_stringliteral">&quot;longer then &quot;</span> &lt;&lt; formatter.<a class="doxy_code" href="$(doxygen_html_classDGD_1_1channel)#a16">max_width</a>() &lt;&lt; <span class="doxy_stringliteral">&quot;!&quot;</span>
             &lt;&lt; std::endl;

   formatter.<a class="doxy_code" href="$(doxygen_html_classDGD_1_1channel)#a16">max_width</a>( 40 );

   formatter &lt;&lt; <span class="doxy_stringliteral">&quot;Hello! This is another very very very &quot;</span> 
             &lt;&lt; <span class="doxy_stringliteral">&quot;very very very very very very very very &quot;</span> 
             &lt;&lt; <span class="doxy_stringliteral">&quot;very very very very very very very long line!&quot;</span> 
             &lt;&lt; <span class="doxy_stringliteral">&quot;longer then &quot;</span> &lt;&lt; formatter.<a class="doxy_code" href="$(doxygen_html_classDGD_1_1channel)#a16">max_width</a>() &lt;&lt; <span class="doxy_stringliteral">&quot;!&quot;</span>
             &lt;&lt; std::endl;

   formatter.<a class="doxy_code" href="$(doxygen_html_classDGD_1_1channel)#a20">word_wrap</a>( <span class="doxy_keyword">false</span> );

   formatter &lt;&lt; <span class="doxy_stringliteral">&quot;Hello! This is another very very very &quot;</span> 
             &lt;&lt; <span class="doxy_stringliteral">&quot;very very very very very very very very &quot;</span> 
             &lt;&lt; <span class="doxy_stringliteral">&quot;very very very very very very very long line!&quot;</span> 
             &lt;&lt; <span class="doxy_stringliteral">&quot;longer then &quot;</span> &lt;&lt; formatter.<a class="doxy_code" href="$(doxygen_html_classDGD_1_1channel)#a16">max_width</a>() &lt;&lt; <span class="doxy_stringliteral">&quot;!&quot;</span>
             &lt;&lt; std::endl;

   formatter.<a class="doxy_code" href="$(doxygen_html_classDGD_1_1channel)#a20">word_wrap</a>( <span class="doxy_keyword">true</span> );

   formatter.<a class="doxy_code" href="$(doxygen_html_classDGD_1_1channel)#a22">space_chars</a>(<span class="doxy_stringliteral">&quot; \t;&quot;</span>);
   formatter.<a class="doxy_code" href="$(doxygen_html_classDGD_1_1channel)#a16">max_width</a>( 4 );
   formatter &lt;&lt; <span class="doxy_stringliteral">&quot;a;b;c;d;e;f;g;h&quot;</span> &lt;&lt; std::endl;

   formatter.<a class="doxy_code" href="$(doxygen_html_classDGD_1_1channel)#a16">max_width</a>( 60 );
   formatter.<a class="doxy_code" href="$(doxygen_html_classDGD_1_1channel)#a22">space_chars</a>(<span class="doxy_stringliteral">&quot; \t&quot;</span>);
   
   <span class="doxy_keywordflow">for</span>( <span class="doxy_keywordtype">int</span> i = 0; i &lt; 76; i++ ) {
      formatter &lt;&lt; <span class="doxy_stringliteral">&quot;word &quot;</span>;
      <span class="doxy_keywordflow">if</span>( i &gt; 0 &amp;&amp; i % 15 == 0 ) {
         formatter &lt;&lt; std::endl;
         <span class="doxy_keywordflow">if</span>( i &lt; 32 )
            formatter.<a class="doxy_code" href="$(doxygen_html_classDGD_1_1channel)#a10">incr_indent</a>();
         <span class="doxy_keywordflow">else</span> 
            formatter.<a class="doxy_code" href="$(doxygen_html_classDGD_1_1channel)#a11">decr_indent</a>();
      }
   }

   <span class="doxy_keywordflow">return</span> 0;
}
</pre></div>
 Note that in this example <a class="doxy_el" href="$(doxygen_html_classDGD_1_1channel)">DGD::channel</a>
 is used instead of directly using <a class="doxy_el" href="$(doxygen_html_classDGD_1_1channelbuf)">DGD::channelbuf</a>
. <a class="doxy_el" href="$(doxygen_html_classDGD_1_1channel)">DGD::channel</a>
 is a output stream which hides complexities of using channelbuf and encapsulates all of its functionality. Note also that <a class="doxy_el" href="$(doxygen_html_classDGD_1_1channel)">DGD::channel</a>
 always has name and must be explicitly opened and associated with physical stream: <div class="doxy_fragment"><pre>       <a class="doxy_code" href="$(doxygen_html_namespaceDGD)#a6">DGD::assoc</a>( &amp;std::cout, formatter );
</pre></div>
<div class="doxy_fragment"><pre>       formatter.open();
</pre></div>
<h2><a name="wrapping">Wrapping</a></h2>
<p> The very basic feature of the <a class="doxy_el" href="$(doxygen_html_namespaceDGD)">DGD</a> formatting is a maximum line length and wrapping. By default word wrapping is turned on and maximum line length is 79, so the following line: <div class="doxy_fragment"><pre>       formatter &lt;&lt; <span class="doxy_stringliteral">&quot;Hello! This is actally very very very &quot;</span> 
                 &lt;&lt; <span class="doxy_stringliteral">&quot;very very very very very very very very &quot;</span> 
                 &lt;&lt; <span class="doxy_stringliteral">&quot;very very very very very very very long line!&quot;</span> 
                 &lt;&lt; <span class="doxy_stringliteral">&quot;longer then &quot;</span> &lt;&lt; formatter.max_width() &lt;&lt; <span class="doxy_stringliteral">&quot;!&quot;</span>
                 &lt;&lt; std::endl;
</pre></div> will produce the following output: <div class="doxy_fragment"><pre> Hello! This is actally very very very very very very very very ver very very
 very very very very very very very <span class="doxy_keywordtype">long</span> line!longer then 79!
</pre></div> The maximum line width can be easily changed. For example the line: <div class="doxy_fragment"><pre>       formatter.max_width( 40 );
</pre></div> and same output will produce the following: <div class="doxy_fragment"><pre> Hello! This is another very very very
 very very very very very very very very
 very very very very very very very
 <span class="doxy_keywordtype">long</span> line!longer then 40!
</pre></div> Note how <a class="doxy_el" href="$(doxygen_html_namespaceDGD)">DGD</a> breaks the line. The line is split at spaces between words, not at the exact 40x positions. This is called word wrapping. The word wrapping can be turned off: <div class="doxy_fragment"><pre>       formatter.word_wrap( <span class="doxy_keyword">false</span> );
</pre></div> The output will look like this: <div class="doxy_fragment"><pre> Hello! This is another very very very ve
 ry very very very very very very very ve
 ry very very very very very very <span class="doxy_keywordtype">long</span> li
 ne!longer then 40!
</pre></div> If you don't want the lines being wrapped you can turn the wrapping off by using <a class="doxy_el" href="$(doxygen_html_classDGD_1_1channel)#a18">DGD::channel::wrap</a>(bool) method. 
<p> You can tell <a class="doxy_el" href="$(doxygen_html_namespaceDGD)">DGD</a> what characters are considered white spaces to change word wrapping behavior: <div class="doxy_fragment"><pre>       formatter.space_chars(<span class="doxy_stringliteral">&quot; \t;&quot;</span>);
       formatter.max_width( 4 );
       formatter &lt;&lt; <span class="doxy_stringliteral">&quot;a;b;c;d;e;f;g;h&quot;</span> &lt;&lt; std::endl;
</pre></div> The DGD::space_chars() method receives a string containing a set of characters which will be considered as white spaces. The output will look like this: <div class="doxy_fragment"><pre> a;b
 ;c;
 d;e
 ;f;
 g;h
</pre></div> Note that here word wrapping is enabled and maximum width is defined to 4, but there are only 3 characters in a line. This is because the '\n' in the end of each line is considered as a separate character. 
<p>
<h2><a name="indentation">Indentation</a></h2>
<p><a class="doxy_el" href="$(doxygen_html_namespaceDGD)">DGD</a> output can be indented. This means that you can define amount of blanks filled before any actual line of output. Consider the following code: <div class="doxy_fragment"><pre>       formatter.max_width( 60 );
       formatter.space_chars(<span class="doxy_stringliteral">&quot; \t&quot;</span>);
       <span class="doxy_keywordflow">for</span>( <span class="doxy_keywordtype">int</span> i = 0; i &lt; 76; i++ ) {
          formatter &lt;&lt; <span class="doxy_stringliteral">&quot;word &quot;</span>;
          <span class="doxy_keywordflow">if</span>( i &gt; 0 &amp;&amp; i % 15 == 0 ) {
             formatter &lt;&lt; std::endl;
             <span class="doxy_keywordflow">if</span>( i &lt; 32 )
                formatter.incr_indent();
             <span class="doxy_keywordflow">else</span> 
                formatter.decr_indent();
          }
</pre></div><div class="doxy_fragment"><pre>       }
</pre></div> The following output will be produced: <div class="doxy_fragment"><pre> word word word word word word word word word word word word
 word word word word
        word word word word word word word word word word
        word word word word word
                word word word word word word word word
                word word word word word word word
        word word word word word word word word word word
        word word word word word
 word word word word word word word word word word word word
  word word word
</pre></div> Note that the filled blanks are considered as part of the line so overall line width does not exceed the 60 characters limit. 
<p> This code demonstrates indentation level mechanism. <a class="doxy_el" href="$(doxygen_html_classDGD_1_1channel)#a10">DGD::channel::incr_indent</a>() and <a class="doxy_el" href="$(doxygen_html_classDGD_1_1channel)#a11">DGD::channel::decr_indent</a>() methods increment/decrement the current indentation level. The actual number of filled blanks is calculated at the beginning of each line (thus, the incr_indent() and decr_indent() take no effect until beginning of the next line). The indentation level value is multiplied by indentation step value and the calculated amount of blanks is filled to the output. The indentation step can be controlled by <a class="doxy_el" href="$(doxygen_html_classDGD_1_1channel)#a8">DGD::channel::indent_step</a>(unsigned) method. The default indentation step value is 8. 
<p> You can set the exact amount of indentation spaces using <a class="doxy_el" href="$(doxygen_html_classDGD_1_1channel)#a12">DGD::channel::indent</a>(unsigned) method. 
<p> Note that theoretically the indentation level could exceed the maximum line width. In this case <a class="doxy_el" href="$(doxygen_html_namespaceDGD)">DGD</a> considers minimum line width property of the <a class="doxy_el" href="$(doxygen_html_classDGD_1_1channel)">DGD::channel</a> or <a class="doxy_el" href="$(doxygen_html_classDGD_1_1channelbuf)">DGD::channelbuf</a>. Minimum line width tells <a class="doxy_el" href="$(doxygen_html_namespaceDGD)">DGD</a> to skip indentation and keep the actual output line at least &quot;min_width&quot; characters wide. Minimum width is controlled by <a class="doxy_el" href="$(doxygen_html_classDGD_1_1channel)#a14">DGD::channel::min_width</a>(unsigned) method. The default value for minimum width is 20. 
<p><hr><address style="align: right;"><small>Generated on Mon Dec 9 18:30:02 2002 for Depression Glass Debug Library by <a href="http://www.doxygen.org/index.html"> <img align="middle" alt="doxygen" border=0 height=53 src="$(doxygen)" width=110></a>1.2.17 </small></address>
</content>

<{perl 
  my @doxygen_html_content_list = ( "doxygen_html_annotated",
"doxygen_html_classDGD_1_1bad__params-members",
"doxygen_html_classDGD_1_1bad__params",
"doxygen_html_classDGD_1_1channel-members",
"doxygen_html_classDGD_1_1channel",
"doxygen_html_classDGD_1_1channel__manip-members",
"doxygen_html_classDGD_1_1channel__manip",
"doxygen_html_classDGD_1_1channel__manip__nop-members",
"doxygen_html_classDGD_1_1channel__manip__nop",
"doxygen_html_classDGD_1_1channel__manip__void-members",
"doxygen_html_classDGD_1_1channel__manip__void",
"doxygen_html_classDGD_1_1channelbuf-members",
"doxygen_html_classDGD_1_1channelbuf",
"doxygen_html_classDGD_1_1Debug-members",
"doxygen_html_classDGD_1_1Debug",
"doxygen_html_classDGD_1_1debug__disabled-members",
"doxygen_html_classDGD_1_1debug__disabled",
"doxygen_html_classDGD_1_1exit__required-members",
"doxygen_html_classDGD_1_1exit__required",
"doxygen_html_classDGD_1_1funnel-members",
"doxygen_html_classDGD_1_1funnel",
"doxygen_html_classDGD_1_1funnelbuf-members",
"doxygen_html_classDGD_1_1funnelbuf",
"doxygen_html_classDGD_1_1funnelbuf_1_1Callback-members",
"doxygen_html_classDGD_1_1funnelbuf_1_1Callback",
"doxygen_html_classDGD_1_1multifile__log-members",
"doxygen_html_classDGD_1_1multifile__log",
"doxygen_html_classDGD_1_1multifile__log_1_1Dont__split-members",
"doxygen_html_classDGD_1_1multifile__log_1_1Dont__split",
"doxygen_html_classDGD_1_1multifile__log_1_1Split__by__lines-members",
"doxygen_html_classDGD_1_1multifile__log_1_1Split__by__lines",
"doxygen_html_classDGD_1_1multifile__log_1_1Split__by__size-members",
"doxygen_html_classDGD_1_1multifile__log_1_1Split__by__size",
"doxygen_html_classDGD_1_1multifile__log_1_1Split__criteria-members",
"doxygen_html_classDGD_1_1multifile__log_1_1Split__criteria",
"doxygen_html_classDGD_1_1option__filter-members",
"doxygen_html_classDGD_1_1option__filter",
"doxygen_html_classDGD_1_1option__filter_1_1option__set__type-members",
"doxygen_html_classDGD_1_1option__filter_1_1option__set__type",
"doxygen_html_dgChannel_8cpp",
"doxygen_html_dgChannel_8h-source",
"doxygen_html_dgChannel_8h",
"doxygen_html_dgChannelBuf_8cpp",
"doxygen_html_dgChannelBuf_8h-source",
"doxygen_html_dgChannelBuf_8h",
"doxygen_html_dgChannelManip_8h-source",
"doxygen_html_dgChannelManip_8h",
"doxygen_html_dgConfig_8h-source",
"doxygen_html_dgConfig_8h",
"doxygen_html_dgDebug_8cpp",
"doxygen_html_dgDebug_8h-source",
"doxygen_html_dgDebug_8h",
"doxygen_html_dgDebugExtra_8h-source",
"doxygen_html_dgDebugExtra_8h",
"doxygen_html_dgDebugStd_8h-source",
"doxygen_html_dgDebugStd_8h",
"doxygen_html_dgFunnel_8cpp",
"doxygen_html_dgFunnel_8h-source",
"doxygen_html_dgFunnel_8h",
"doxygen_html_dgMultifileLog_8cpp",
"doxygen_html_dgMultifileLog_8h-source",
"doxygen_html_dgMultifileLog_8h",
"doxygen_html_dgOptionFilter_8cpp",
"doxygen_html_dgOptionFilter_8h-source",
"doxygen_html_dgOptionFilter_8h",
"doxygen_html_dgStream_8cpp",
"doxygen_html_dgStream_8h-source",
"doxygen_html_dgStream_8h",
"doxygen_html_example",
"doxygen_html_files",
"doxygen_html_functions",
"doxygen_html_globals",
"doxygen_html_graph_legend",
"doxygen_html_hierarchy",
"doxygen_html_index",
"doxygen_html_inherits",
"doxygen_html_namespaceDGD",
"doxygen_html_namespacemembers",
"doxygen_html_namespaces",
"doxygen_html_pages",
"doxygen_html_structDGD_1_1dgd__reference-members",
"doxygen_html_structDGD_1_1dgd__reference",
"doxygen_html_tutor_assoc",
"doxygen_html_tutor_channel",
"doxygen_html_tutor_channelbuf",
"doxygen_html_tutor_formatting");
set_list( "doxygen_html_content_list", @doxygen_html_content_list );
''
}>

