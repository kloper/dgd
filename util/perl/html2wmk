#!/d/perl/bin/perl.exe -w

use strict;
use File::Basename;
use File::Glob ':glob';
use HTML::Tree;
use URI;

sub path2project ($); #{}

my $class_subst = "s/^/doxy_/";
my @htmlext    = ( ".htm", ".html" );
my @mediaext   = ( ".jpg", ".jpeg", ".gif", ".png" );
my @extensions = ( @htmlext, @mediaext );
my $source_dir = (defined($ARGV[0])?$ARGV[0]:"./html");
my $target;
my $project; 
		  
$project = path2project( $source_dir );
$target = "$project.wmk";

local *target_handle;

sub path2project ($) {
    (my $project) = @_;
    $project =~ s/\W/_/g; 
    $project =~ s/^_+//;
    $project =~ s/_+$//;
    return $project;
}

sub mktag($$) {
    (my $path, my $name) = @_;
    my $project = path2project( $path );
    return "${project}_${name}";
}

sub dump_content ($) {
    (my $node) = @_;

    for my $item ($node->content_list()) {
	if( !( ref $item ) ) {
	    print target_handle "$item";
	} else {
	    print target_handle $item->as_HTML();
	}
    }
}

sub substitute_links($) {
    (my $node) = @_;

    for (@{  $node->extract_links()  }) {
	(my $link, my $element, my $attr, my $tag) = @$_;
	my $url = URI->new($link);
	if( defined( $url->scheme() ) ) {
	    next;
	}
	( my $name, my $path, my $suffix ) = 
	    fileparse( $url->path, @extensions );
	if( $suffix =~ /htm/ ) {
	    $element->attr( $attr, 
			    ( ( defined($name) && $name ne "" )?
			    "\$(" . mktag( $source_dir, $name ) . ")" : "" ) .
			    ( defined($url->fragment)?
			      "#" . $url->fragment : "" ) );
	} else {
	    $element->attr( $attr, 
			    ( ( defined($name) && $name ne "" )?
			      "\$($name)" : "" ) .
			    ( defined($url->fragment)?
			      "#" . $url->fragment : "" ) );
	}
    }
}

sub substitute_class_attr($) {
    (my $node) = @_;

    if( defined( $class_subst ) ) {
	for( $node->look_down( sub { defined( $_[0]->attr('class') ); } ) ) 
	{	    
	    (my $element) = $_;
	    my $class = $element->attr( 'class' );
	    eval "\$class =~ $class_subst";
	    $element->attr( 'class', $class );
	}
    }
}

open( target_handle, ">$target" ) or 
    die "Can't open file $target for writing: $!";

print target_handle 
    "<{!-- This WebMake file is automatically generated by:\n" .
    "   -- " . $0 . " " . join( ' ', @ARGV ) . " --}>\n\n";
for my $mediaext (@mediaext) {
    print target_handle 
	"<media src=\"$source_dir\" name=\"*$mediaext\" " . 
	    "namesubst=\"s/\\$mediaext//\" />\n";
}

my @content_list = ();
my $glob_pattern = "$source_dir/*{".join( ',', @extensions)."}";
for my $file (bsd_glob($glob_pattern)) {
    print "Input file: " . $file . "\n";
    ( my $name, my $path, my $suffix ) = fileparse($file,@extensions);
    
    my $wmtag = mktag( $source_dir, $name );

    if( $suffix =~ /htm/ ) {
	push( @content_list, $wmtag );

	print target_handle 
	    "<content name=\"$wmtag\" format=\"text/html\">\n";

	my $tree = HTML::TreeBuilder->new; 
	$tree->parse_file($file);

	substitute_links( $tree );
	substitute_class_attr( $tree );

	# search head, find title, drop meta
	my $title = $tree->find_by_tag_name( 'title' );
	print target_handle "<wmmeta name=\"title\" value=\"";
	if( defined( $title ) ) {	
	    dump_content( $title );
	} else {
	    print target_handle "$name";
	}
	print target_handle "\" />\n";

	# search and dump body, if none dump the entire tree
	my $body = $tree->find_by_tag_name( 'body' );
	if( defined( $body ) ) {
	    dump_content( $body );
	} else {
	    dump_content( $tree );
	}

	$tree = $tree->delete;

	print target_handle 
	    "</content>\n\n";
    } 
}

print target_handle "<{perl \n";
print target_handle "  my \@${project}_content_list = ( \"" .
    join( "\",\n\"", @content_list ) . "\");\n" .
    "set_list( \"${project}_content_list\", \@${project}_content_list );\n" .
    "''\n";
print target_handle "}>\n\n";

0;
